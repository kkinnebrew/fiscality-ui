(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var $, HandlebarsCompiler, Router, cache, numberWithCommas, router;

$ = window.jQuery = require('jquery');

require('jquery-circle-progress');

require('datejs');

Router = require('./common/router.coffee');

cache = require('./common/cache');

HandlebarsCompiler = require('hbsfy/runtime');

numberWithCommas = function(x) {
  var parts;
  parts = x.toString().split(".");
  parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  return parts.join(".");
};

HandlebarsCompiler.registerHelper('currency', function(d, sign) {
  sign = typeof sign === 'string' ? sign : '';
  if (d === void 0 || d === null) {
    return '';
  }
  if (d >= 0) {
    return sign + numberWithCommas(d.toFixed(2));
  } else {
    return '-' + sign + numberWithCommas(Math.abs(d).toFixed(2));
  }
});

HandlebarsCompiler.registerHelper('percentage', function(d) {
  if (d === void 0 || d === null) {
    return '';
  }
  if (d >= 0) {
    return numberWithCommas(d.toFixed(2));
  } else {
    return '-' + numberWithCommas(Math.abs(d).toFixed(2)) + '%';
  }
});

HandlebarsCompiler.registerHelper('dateFormat', function(d, f) {
  if (d === void 0 || d === null) {
    return '';
  }
  return Date.parse(d).toString(f);
});

HandlebarsCompiler.registerHelper('select', function(value, options) {
  var $el;
  $el = $('<select />').html(options.fn(this));
  $el.find('[value="' + value + '"]').attr({
    'selected': 'selected'
  });
  return $el.html();
});

HandlebarsCompiler.registerHelper('ifCond', function(v1, v2, options) {
  if (v1 === v2) {
    return options.fn(this);
  }
  return options.inverse(this);
});

router = new Router($('body'));

window.App = router;

router.otherwise('/home/login');

router.register('home', {
  redirect: '/home/login',
  template: require('../templates/home.hbs')
});

router.register('home.login', {
  template: require('../templates/home/login.hbs'),
  viewmodel: require('./viewmodels/home/login.coffee')
});

router.register('home.register', {
  template: require('../templates/home/register.hbs'),
  viewmodel: require('./viewmodels/home/register.coffee')
});

router.register('home.forgot', {
  template: require('../templates/home/forgot.hbs'),
  viewmodel: require('./viewmodels/home/forgot.coffee')
});

router.register('home.reset', {
  template: require('../templates/home/reset.hbs'),
  viewmodel: require('./viewmodels/home/reset.coffee')
});

router.register('app', {
  redirect: '/app/accounts',
  views: {
    'default': {
      primary: true,
      template: require('../templates/app.hbs')
    },
    'menu@default': {
      name: 'navigation',
      react: true,
      view: require('./views/app1/navigation.jsx'),
      viewmodel: require('./viewmodels/app1/navigation.coffee')
    }
  }
});

router.register('app.accounts', {
  params: ['accountId'],
  views: {
    'content': {
      name: 'banking',
      react: true,
      view: require('./views/app1/banking.jsx'),
      viewmodel: require('./viewmodels/app1/banking.coffee')
    }
  }
});

router.register('app.investments', {
  params: ['portfolioId'],
  views: {
    'content': {
      name: 'investments',
      react: true,
      view: require('./views/app1/investments.jsx'),
      viewmodel: require('./viewmodels/app1/investments.coffee')
    }
  }
});

router.register('app.settings', {
  views: {
    'content': {
      template: require('../templates/app/settings.hbs')
    }
  }
});

$(document).ready(function() {
  return router.listen();
});



},{"../templates/app.hbs":38,"../templates/app/settings.hbs":39,"../templates/home.hbs":40,"../templates/home/forgot.hbs":41,"../templates/home/login.hbs":42,"../templates/home/register.hbs":43,"../templates/home/reset.hbs":44,"./common/cache":2,"./common/router.coffee":5,"./viewmodels/app1/banking.coffee":13,"./viewmodels/app1/investments.coffee":14,"./viewmodels/app1/navigation.coffee":15,"./viewmodels/home/forgot.coffee":16,"./viewmodels/home/login.coffee":17,"./viewmodels/home/register.coffee":18,"./viewmodels/home/reset.coffee":19,"./views/app1/banking.jsx":20,"./views/app1/investments.jsx":32,"./views/app1/navigation.jsx":37,"datejs":"datejs","hbsfy/runtime":52,"jquery":"jquery","jquery-circle-progress":"jquery-circle-progress"}],2:[function(require,module,exports){
var cache = {};

module.exports = {

  hasPersistentItem: function(key) {

    var original = localStorage.getItem('cache:' + key);

    return !(original === null || original === undefined);

  },

  setPersistentItem: function(key, value) {

    if (value === null || value === undefined) {
      return this.clearPersistentItem(key);
    }

    var original = localStorage.getItem('cache:' + key);

    if (!original) {

      var keys = localStorage.getItem('persistentKeys');

      if (keys) {
        keys += ',' + key;
      } else {
        keys = key;
      }

      localStorage.setItem('persistentKeys', keys);

    }

    localStorage.setItem('cache:' + key, value);

  },

  getPersistentItem: function(key) {

    return localStorage.getItem('cache:' + key) || null;

  },

  clearPersistentItem: function(key) {

    var keys = localStorage.getItem('persistentKeys');

    if (keys) {

      var keysArray = keys.replace(/\s/g, '').split(',') || [];
      var finalArray = [];

      for (var i = 0; i < keysArray.length; i++) {
        if (keysArray[i] !== key) {
          finalArray.push(keysArray[i]);
        }
      }

      localStorage.setItem('persistentKeys', finalArray);

    }

    localStorage.removeItem('cache:' + key);

  },

  clearPersistentItems: function() {

    var keys = localStorage.getItem('persistentKeys');

    if (keys) {

      var keysArray = keys.replace(/\s/g, '').split(',') || [];

      for (var i = 0; i < keysArray.length; i++) {
        localStorage.removeItem('cache:' + keysArray[i]);
      }

      localStorage.removeItem('persistentKeys');

    }

  },

  hasItem: function(key) {
    return cache.hasOwnProperty(key);
  },

  setItem: function(key, value) {

    if (value === null || value === undefined) {
      return this.clearItem(key);
    }

    cache[key] = value;

  },

  getItem: function(key) {
    return cache.hasOwnProperty(key) ? cache[key] : null;
  },

  clearItem: function(key) {
    cache.hasOwnProperty(key) ? delete cache[key] : null;
  },

  clear: function() {
    cache = {};
  },

  purge: function() {
    this.clear();
    this.clearPersistentItems();
  }

};

},{}],3:[function(require,module,exports){
module.exports = {
  info: function(message) {
    return console.log('[INFO] ' + message);
  },
  debug: function(message) {
    return console.debug('[DEBUG] ' + message);
  },
  warn: function(message) {
    return console.warn('[WARN] ' + message);
  },
  error: function(message) {
    return console.error('[ERROR] ' + message);
  }
};



},{}],4:[function(require,module,exports){
var $, Log, React, ReactView, _,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$ = require('jquery');

_ = require('underscore');

Log = require('./log.coffee');

React = require('react');

ReactView = (function() {
  function ReactView(template, viewmodel) {
    this.refresh = bind(this.refresh, this);
    this.template = template;
    this.react = null;
    this.$el = null;
    this.rendered = false;
    this.viewmodel = viewmodel || null;
  }

  ReactView.prototype.render = function($el) {
    if (this.rendered) {
      return;
    }
    this.$el = $el;
    this.react = React.render(React.createElement(this.template, {
      viewmodel: this.viewmodel
    }), this.$el.get(0));
    this.bind();
    this.viewmodel.on('refresh', this.refresh);
    return this.rendered = true;
  };

  ReactView.prototype.refresh = function(state) {
    if (!this.rendered) {
      return Log.warn('Cannot refresh unrendered view');
    }
    this.react.setState(state);
    return Log.debug('Refreshing view "' + this.constructor.name + '"');
  };

  ReactView.prototype.bind = function() {};

  ReactView.prototype.unbind = function() {};

  ReactView.prototype.destroy = function(callback) {
    if (!this.rendered) {
      return;
    }
    if (this.viewmodel) {
      this.viewmodel.detach('refresh', this.refresh);
    }
    this.unbind();
    this.$el.empty();
    this.$el = null;
    this.react = null;
    this.rendered = false;
    if (callback) {
      return callback.call(this);
    }
  };

  return ReactView;

})();

module.exports = ReactView;



},{"./log.coffee":3,"jquery":"jquery","react":"react","underscore":"underscore"}],5:[function(require,module,exports){
var $, Log, ReactView, Router, View, ViewModel, _,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$ = require('jquery');

_ = require('underscore');

Log = require('./log.coffee');

View = require('./view.coffee');

ViewModel = require('./viewmodel.coffee');

ReactView = require('./react-view.coffee');

Router = (function() {
  function Router($root) {
    this.$root = $root;
    this.render = bind(this.render, this);
    this.stack = [];
    this.config = {};
    this.defaultState = null;
    this.globals = {};
    this.state = null;
    this.params = {};
  }

  Router.prototype.otherwise = function(state) {
    return this.defaultState = state.replace(/(^\/?)|(\/$)/g, '');
  };

  Router.prototype.register = function(name, conf) {
    var config, last, part, parts;
    parts = name.split('.');
    while (parts.length) {
      part = parts.shift();
      config = {};
      if (conf.template) {
        config.views = {
          'default': {
            primary: true,
            template: conf.template
          }
        };
        if (conf.hasOwnProperty('view')) {
          config.views['default'].view = conf.view;
        }
        if (conf.hasOwnProperty('viewmodel')) {
          config.views['default'].viewmodel = conf.viewmodel;
        }
        if (conf.hasOwnProperty('redirect')) {
          config.redirect = conf.redirect;
        }
        if (conf.hasOwnProperty('params')) {
          config.params = conf.params;
        }
      } else {
        config = conf;
      }
      if (!last) {
        last = this.config;
      }
      if (!parts.length) {
        if (last.hasOwnProperty(part)) {
          Log.warn('Overriding existing route "' + name + '"');
        }
        last[part] = {
          config: config,
          children: {}
        };
      } else {
        if (!last.hasOwnProperty(part)) {
          Log.warn('Parent route not defined "' + name + '"');
        }
        last = last[part].children;
      }
    }
    return Log.debug('Registering state "' + name + '"');
  };

  Router.prototype.getConfig = function(name) {
    var last, part, parts;
    parts = name.split('.');
    while (parts.length) {
      part = parts.shift();
      if (!last) {
        last = this.config;
      }
      if (!last.hasOwnProperty(part)) {
        return Log.error('State "' + name + '" not defined');
      }
      if (!parts.length) {
        return last[part].config;
      } else {
        last = last[part].children;
      }
    }
  };

  Router.prototype.replaceState = function(state) {};

  Router.prototype.goto = function(path, params) {
    var config, hash, i, j, part, parts, ref, state;
    hash = '#';
    parts = path.split('.');
    while (parts.length) {
      part = parts.shift();
      state = state ? state + '.' + part : part;
      config = this.getConfig(state);
      hash = hash + '/' + part;
      if (!config) {
        return Log.error('State not found for invalid route "' + state + '"');
      }
      if (config.params) {
        for (i = j = 0, ref = config.params.length; j < ref; i = j += 1) {
          if (params && params.hasOwnProperty(config.params[i])) {
            hash = hash + '/' + params[config.params[i]];
          } else if (parts.length) {
            hash = hash + '/undefined';
          }
        }
      }
    }
    return location.hash = hash;
  };

  Router.prototype.listen = function() {
    $(window).on('hashchange', this.render);
    this.render();
    return Log.info('Listening for hash changes');
  };

  Router.prototype.render = function() {
    var config, depth, i, j, k, len, param, params, part, parts, redirect, ref, ref1, ref2, state;
    parts = location.hash.replace(/(^#\/?)|(\/$)/g, '').split('/');
    if (parts.length === 1 && parts[0] === '') {
      if (this.defaultState) {
        Log.info('Redirecting to default state');
        return location.hash = '#/' + this.defaultState;
      } else {
        return Log.error('No default state defined');
      }
    }
    depth = 0;
    params = {};
    _.each(this.globals, (function(_this) {
      return function(node, name) {
        if (node.$el && !node.destroying) {
          return _this.destroyGlobal(name);
        }
      };
    })(this));
    while (parts.length) {
      part = parts.shift();
      state = state ? state + '.' + part : part;
      config = this.getConfig(state);
      if (!config) {
        return Log.error('State not found for invalid route "' + state + '"');
      }
      if (config.params) {
        if (config.params) {
          ref = config.params;
          for (j = 0, len = ref.length; j < len; j++) {
            param = ref[j];
            params[param] = parts.shift();
          }
        }
      }
      if (!this.stack[depth] || this.stack[depth].state !== state) {
        this.renderState(state, config, depth, params);
      } else if (this.stack[depth] && this.stack[depth].state === state) {
        _.each(this.stack[depth].views, function(node) {
          if (node.viewmodel) {
            return node.viewmodel.setParams(params);
          }
        });
        if (this.stack[depth].controller) {
          this.stack[depth].controller.setParams(params, true);
          this.stack[depth].controller.update();
        }
      }
      depth++;
    }
    this.params = params;
    if (config.redirect) {
      redirect = config.redirect.replace(/(^#?\/?)|(\/$)/g, '');
      Log.info('Redirecting to path "' + redirect + '"');
      return location.hash = '#/' + redirect;
    }
    if (this.stack.length > depth) {
      for (i = k = ref1 = depth, ref2 = this.stack.length; k < ref2; i = k += 1) {
        this.destroyState(i);
      }
      return this.stack.splice(depth);
    }
  };

  Router.prototype.renderState = function(state, config, depth, params) {
    var node;
    if (this.stack[depth]) {
      this.destroyState(depth);
    }
    node = {
      state: state,
      views: {}
    };
    _.each(config.views, (function(_this) {
      return function(conf, name) {
        var $el, primary, prior, subnode;
        if (!name.match(/@/)) {
          subnode = {};
          if (conf.primary === true) {
            subnode.primary = true;
          }
          if (conf.name) {
            subnode.name = conf.name;
          }
          if (typeof conf.viewmodel === 'function') {
            subnode.viewmodel = new conf.viewmodel(params);
            subnode.viewmodel.router = _this;
          } else {
            subnode.viewmodel = new ViewModel(params);
            subnode.viewmodel.router = _this;
          }
          if (conf.react) {
            subnode.view = new ReactView(conf.view, subnode.viewmodel || void 0);
          } else if (typeof conf.view === 'function') {
            subnode.view = new conf.view(conf.template, subnode.viewmodel || void 0);
          } else {
            subnode.view = new View(conf.template, subnode.viewmodel || void 0);
          }
          if (depth === 0) {
            $el = _this.$root.find(name && name !== 'default' ? '[ui-view="' + name + '"]' : '[ui-view]');
            subnode.view.render($el);
          } else {
            prior = _this.stack[depth - 1];
            primary = _.find(prior.views, function(view) {
              return view.hasOwnProperty('primary') && view.primary === true;
            });
            if (primary) {
              primary.view.renderSubview(name, subnode.view);
            } else {
              Log.warn('No main view found for partial state: ' + state + ' -> ' + name);
            }
          }
          node.views[name] = subnode;
          return Log.debug('Rendering relative state: ' + state + ' -> ' + name);
        }
      };
    })(this));
    this.stack[depth] = node;
    _.each(config.views, (function(_this) {
      return function(conf, name) {
        var context, current, parts, subnode, target;
        if (name.match(/@/)) {
          subnode = {};
          if (conf.name) {
            subnode.name = conf.name;
          }
          if (typeof conf.viewmodel === 'function') {
            subnode.viewmodel = new conf.viewmodel(params);
            subnode.viewmodel.router = _this;
          } else {
            subnode.viewmodel = new ViewModel(params);
            subnode.viewmodel.router = _this;
          }
          if (conf.react) {
            subnode.view = new ReactView(conf.view, subnode.viewmodel || void 0);
          } else if (typeof conf.view === 'function') {
            subnode.view = new conf.view(conf.template, subnode.viewmodel || void 0);
          } else {
            subnode.view = new View(conf.template, subnode.viewmodel || void 0);
          }
          parts = name.split('@');
          target = parts[0];
          context = parts[1];
          current = _this.stack[depth];
          if (context !== 'global') {
            if (!current.views.hasOwnProperty(context)) {
              return Log.error('Absolute view context "' + context + '" not defined');
            }
            current.views[context].view.renderSubview(target, subnode.view);
            Log.debug('Rendering absolute state: ' + state + ' -> ' + name);
          } else if (config.controller) {
            _this.globals[target] = subnode;
          }
          return node.views[target] = subnode;
        }
      };
    })(this));
    if (config.controller) {
      node.controller = new config.controller(params);
      node.controller.router = this;
      _.each(node.views, function(subnode) {
        if (subnode.name) {
          return node.controller[subnode.name + 'ViewModel'] = subnode.viewmodel;
        }
      });
      return node.controller.load();
    }
  };

  Router.prototype.destroyState = function(depth) {
    var item, j, len, node, ref;
    node = this.stack[depth];
    ref = node.views;
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      item.destroy();
    }
    if (node.controller) {
      node.controller.destroy();
    }
    return Log.debug('Destroying state: ' + this.stack[depth].state);
  };

  Router.prototype.renderGlobal = function(name) {
    var $global, count, node;
    if (!this.globals.hasOwnProperty(name)) {
      return;
    }
    Log.debug('Rendering global state "' + name + '"');
    count = this.$root.find('[data-global]').length;
    $global = $('<div data-global="' + name + '"></div>');
    $global.css('z-index', 100 + count);
    this.$root.append($global);
    node = this.globals[name];
    node.view.render($global);
    return node.$el = $global;
  };

  Router.prototype.destroyGlobal = function(name) {
    var node;
    if (!this.globals.hasOwnProperty(name)) {
      return;
    }
    Log.debug('Destroying global state "' + name + '"');
    node = this.globals[name];
    node.destroying = true;
    return node.view.destroy(function() {
      node.$el.remove();
      return delete node.$el;
    });
  };

  return Router;

})();

module.exports = Router;



},{"./log.coffee":3,"./react-view.coffee":4,"./view.coffee":7,"./viewmodel.coffee":8,"jquery":"jquery","underscore":"underscore"}],6:[function(require,module,exports){
var $ = require('jquery');

function Service(config, cache) {
  this.config = config || {};
  this.cache = cache || null;
}

Service.prototype.headers = function(url) {
  return {};
};

Service.prototype.cacheGet = function(url, data) {
  return this.ajax('GET', url, data, true);
};

Service.prototype.get = function(url, data) {
  return this.ajax('GET', url, data);
};

Service.prototype.cachePost = function(url, data) {
  return this.ajax('POST', url, data, true);
};

Service.prototype.post = function(url, data) {
  return this.ajax('POST', url, data);
};

Service.prototype.ajax = function(method, url, data, cache) {

  var that = this;
  var deferred = $.Deferred();

  var cacheKey = method + ':' + url + ':' + JSON.stringify(data);

  if (cache && !this.cache) {
    console.error('No cache defined: ' + url);
    cache = false;
  }

  if (cache && this.cache.hasItem(cacheKey)) {
    setTimeout(function() {
      deferred.resolve(that.cache.getItem(cacheKey));
    }, 0);
    return deferred;
  }

  var requestUrl = (this.config.hasOwnProperty('baseUrl') ? this.config.baseUrl : '') + url;

  //console.log('Request: ' + requestUrl, 'Headers: ' + JSON.stringify(this.headers(url)));

  $.ajax({
    type: method,
    url: requestUrl,
    data: data ? JSON.stringify(data) : {},
    contentType: (this.config.hasOwnProperty('contentType') ? this.config.contentType : 'application/json;charset=UTF-8'),
    headers: this.headers(url),
    success: function(result) {
      if (cache) {
        that.cache.setItem(cacheKey, result);
      }
      deferred.resolve(result);
    },
    error: function(xhr) {
      that.onError(xhr.status, requestUrl);
      deferred.reject();
    }
  });

  return deferred;

};

Service.prototype.onError = function(url, status) {
  console.error('Status ' + status + ': ' + url);
};

module.exports = Service;

},{"jquery":"jquery"}],7:[function(require,module,exports){
var $, Log, View, _,
  bind1 = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$ = require('jquery');

_ = require('underscore');

Log = require('./log.coffee');

View = (function() {
  function View(template, viewmodel) {
    this.change = bind1(this.change, this);
    this.refresh = bind1(this.refresh, this);
    this.template = template;
    this.$el = null;
    this.rendered = false;
    this.viewmodel = viewmodel || null;
  }

  View.prototype.render = function($el) {
    var html;
    if (this.rendered) {
      return;
    }
    this.$el = $el;
    html = typeof this.template === 'function' ? this.template(this.viewmodel || {}) : this.template;
    this.$el.html(html);
    this.bind();
    this.viewmodel.on('refresh', this.refresh);
    this.viewmodel.on('change', this.change);
    this.rendered = true;
    return setTimeout((function(_this) {
      return function() {
        return _this.$el.addClass('rendered');
      };
    })(this), 100);
  };

  View.prototype.getSubview = function(name) {
    var selector, subview;
    selector = name && name !== 'default' ? '[ui-view="' + name + '"]' : '[ui-view]';
    subview = this.$el.find(selector);
    if (!subview.length) {
      Log.warn('Subview' + (name ? ' with name "' + name + '"' : '') + ' not found');
    }
    return subview;
  };

  View.prototype.renderSubview = function(name, view) {
    var $subview;
    $subview = this.getSubview(name);
    if ($subview) {
      return view.render($subview);
    }
  };

  View.prototype.sync = function() {
    var data;
    data = {};
    this.$el.find('[data-model]').each(function() {
      var model, tagName;
      model = $(this).attr('data-model');
      tagName = $(this).prop('tagName').toLowerCase();
      if (tagName === 'input' || tagName === 'textarea' || tagName === 'select') {
        return data[model] = $(this).val();
      } else if (tagName === 'div' || tagName === 'span') {
        return data[model] = $(this).text();
      }
    });
    return this.viewmodel.setParams(data);
  };

  View.prototype.bind = function() {
    var that;
    if (this.bindings) {
      _.each(this.bindings, (function(_this) {
        return function(events, selector) {
          return _.each(events, function(callback, event) {
            if (typeof _this[callback] === 'function') {
              return _this.$el.on(event, selector, _this[callback]);
            }
          });
        };
      })(this));
    }
    this.$el.on('click', '[data-link]', (function(_this) {
      return function(e) {
        var link;
        link = $(e.currentTarget).attr('data-link');
        if (link) {
          return _this.viewmodel.goto(link);
        }
      };
    })(this));
    that = this;
    return this.$el.find('[data-bind]').each(function() {
      var args, bind, event, method, parts;
      bind = $(this).attr('data-bind');
      parts = bind.match(/(.+):(.+)\((.*)\)/);
      event = parts[1];
      method = parts[2];
      args = parts[3] ? parts[3].replace(/\s/g, '').split(',') : [];
      return $(this).on(event, function(e) {
        e.preventDefault();
        that.sync();
        return that.viewmodel.run(method, args);
      });
    });
  };

  View.prototype.unbind = function() {
    if (this.bindings) {
      _.each(this.bindings, (function(_this) {
        return function(events, selector) {
          return _.each(events, function(callback, event) {
            if (typeof _this[callback] === 'function') {
              return _this.$el.off(event, selector, _this[callback]);
            }
          });
        };
      })(this));
    }
    this.$el.off('click', '[data-link]');
    return this.$el.find('[data-bind]').each(function() {
      var bind, event, parts;
      bind = $(this).attr('data-bind');
      parts = bind.match(/(.+):(.+)\((.*)\)/);
      event = parts[1];
      return $(this).off(event);
    });
  };

  View.prototype.refresh = function() {
    var $subviews, html, that;
    if (!this.rendered) {
      return Log.warn('Cannot refresh unrendered view');
    }
    that = this;
    this.unbind();
    $subviews = this.$el.find('[ui-view]');
    this.$el.empty();
    html = typeof this.template === 'function' ? this.template(this.viewmodel || {}) : this.template;
    this.$el.html(html);
    this.bind();
    $subviews.each(function() {
      var name;
      name = $(this).attr('ui-view');
      if (name) {
        return that.$el.find('[ui-view="' + name + '"]').replaceWith(this);
      } else {
        return that.$el.find('[ui-view]').replaceWith(this);
      }
    });
    return Log.debug('Refreshing view "' + this.constructor.name + '"');
  };

  View.prototype.change = function() {
    if (!this.rendered) {
      return;
    }
    if (this.viewmodel.loading) {
      this.$el.addClass('loading');
    } else {
      this.$el.removeClass('loading');
    }
    if (this.viewmodel.inactive) {
      return this.$el.addClass('inactive');
    } else {
      return this.$el.removeClass('inactive');
    }
  };

  View.prototype.destroy = function(callback) {
    if (!this.rendered) {
      return;
    }
    if (this.viewmodel) {
      this.viewmodel.detach('refresh', this.refresh);
    }
    this.$el.removeClass('rendered');
    this.unbind();
    this.$el.empty();
    this.$el = null;
    this.rendered = false;
    if (callback) {
      return callback.call(this);
    }
  };

  return View;

})();

module.exports = View;



},{"./log.coffee":3,"jquery":"jquery","underscore":"underscore"}],8:[function(require,module,exports){
var Log, ViewModel, _;

_ = require('underscore');

Log = require('./log.coffee');

ViewModel = (function() {
  function ViewModel() {
    this.loading = false;
    this.inactive = false;
    this.events = {};
  }

  ViewModel.prototype.update = function() {};

  ViewModel.prototype.setParams = function(params) {
    var changed;
    changed = false;
    _.each(params, (function(_this) {
      return function(value, name) {
        if (_this.hasOwnProperty(name) && _this[name] !== value) {
          _this[name] = value;
          return changed = true;
        }
      };
    })(this));
    if (changed) {
      return this.update();
    }
  };

  ViewModel.prototype.startLoading = function() {
    this.loading = true;
    return this.fire('change');
  };

  ViewModel.prototype.stopLoading = function() {
    this.loading = false;
    return this.fire('change');
  };

  ViewModel.prototype.markInactive = function() {
    this.inactive = true;
    return this.fire('change');
  };

  ViewModel.prototype.markActive = function() {
    this.inactive = false;
    return this.fire('change');
  };

  ViewModel.prototype.goto = function(path) {
    return this.router.goto(path);
  };

  ViewModel.prototype.run = function(method, args) {
    var i, j, ref, values;
    if (typeof this[method] !== 'function') {
      return Log.error('Unknown method on viewmodel: ' + method);
    }
    values = [];
    for (i = j = 0, ref = args.length; j < ref; i = j += 1) {
      if (!this.hasOwnProperty(args[i])) {
        Log.warn('Unknown property on viewmodel: ' + args[i]);
      } else {
        values.push(this[args[i]]);
      }
    }
    return this[method].apply(this, values);
  };

  ViewModel.prototype.on = function(event, callback) {
    if (!this.events.hasOwnProperty(event)) {
      this.events[event] = [];
    }
    return this.events[event].push(callback);
  };

  ViewModel.prototype.detach = function(event, callback) {
    var index;
    if (this.events.hasOwnProperty(event)) {
      index = this.events[event].indexOf(callback);
      if (index !== -1) {
        return this.events[event].splice(index, 1);
      }
    }
  };

  ViewModel.prototype.fire = function(event) {
    var args, i, j, ref, results;
    args = Array.prototype.slice.call(arguments, 1);
    if (this.events.hasOwnProperty(event)) {
      results = [];
      for (i = j = 0, ref = this.events[event].length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push(this.events[event][i].apply(this, args));
      }
      return results;
    }
  };

  return ViewModel;

})();

module.exports = ViewModel;



},{"./log.coffee":3,"underscore":"underscore"}],9:[function(require,module,exports){
var $, AuthService, Service, cache, investmentsAPI, transactionsAPI,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$ = require('jquery');

transactionsAPI = require('./transactions.coffee');

investmentsAPI = require('./investments.coffee');

cache = require('../common/cache');

Service = require('../common/service');

AuthService = (function(superClass) {
  extend(AuthService, superClass);

  function AuthService() {
    return AuthService.__super__.constructor.apply(this, arguments);
  }

  AuthService.prototype.headers = function(url) {
    var authToken;
    if (url === '/api/logout') {
      authToken = cache.getPersistentItem('authToken');
      if (!authToken) {
        cache.purge();
        location.hash = '#/home/login';
      }
      return {
        'X-Auth-Token': authToken
      };
    } else {
      return {};
    }
  };

  AuthService.prototype.login = function(email, password) {
    var deferred, success;
    deferred = $.Deferred();
    success = function(user) {
      var accountsRequest, portfoliosRequest;
      cache.setPersistentItem('authToken', user.sessionId);
      accountsRequest = transactionsAPI.accounts();
      portfoliosRequest = investmentsAPI.portfolios();
      return $.when(accountsRequest, portfoliosRequest).then(function(accounts, portfolios) {
        if (accounts && accounts.length > 0) {
          accounts.reverse();
          cache.setPersistentItem('accountId', accounts[0].accountId);
        }
        if (portfolios && portfolios.length > 0) {
          cache.setPersistentItem('portfolioId', portfolios[0].portfolioId);
        }
        return deferred.resolve(user);
      }, function() {
        return deferred.reject();
      });
    };
    this.post('/api/login', {
      email: email,
      password: password
    }).then(success, function() {
      return deferred.reject();
    });
    return deferred;
  };

  AuthService.prototype.register = function(firstName, lastName, email, password) {
    return this.post('/api/register', {
      firstName: firstName,
      lastName: lastName,
      email: email,
      password: password
    });
  };

  AuthService.prototype.forgotPassword = function(email) {
    return this.post('/api/forgotpassword', {
      email: email
    });
  };

  AuthService.prototype.resetPassword = function(password, confirm) {
    return this.post('/api/changepassword', {
      password: password,
      confirm: confirm
    });
  };

  AuthService.prototype.logout = function() {
    var deferred;
    deferred = $.Deferred();
    this.get('/api/logout').then(function() {
      cache.purge();
      return deferred.resolve();
    }, function() {
      return deferred.reject();
    });
    return deferred;
  };

  return AuthService;

})(Service);

module.exports = new AuthService({
  baseUrl: require('./config').getBaseUrl()
});



},{"../common/cache":2,"../common/service":6,"./config":10,"./investments.coffee":11,"./transactions.coffee":12,"jquery":"jquery"}],10:[function(require,module,exports){
module.exports = {
  BASE_URL: {
    PROD: 'https://fiscality-api.herokuapp.com',
    DEV: 'http://localhost:9000'
  },
  ENV: 'DEV',
  getBaseUrl: function() {
    return this.BASE_URL[this.ENV];
  }
};

},{}],11:[function(require,module,exports){
var $, InvestmentsService, Service, _, cache,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$ = require('jquery');

_ = require('underscore');

cache = require('../common/cache');

Service = require('../common/service');

InvestmentsService = (function(superClass) {
  extend(InvestmentsService, superClass);

  function InvestmentsService() {
    return InvestmentsService.__super__.constructor.apply(this, arguments);
  }

  InvestmentsService.prototype.headers = function() {
    var authToken;
    authToken = cache.getPersistentItem('authToken');
    if (!authToken) {
      cache.purge();
      location.hash = '#/home/login';
    }
    return {
      'X-Auth-Token': authToken
    };
  };

  InvestmentsService.prototype.portfolios = function() {
    return this.cacheGet('/api/portfolios');
  };

  InvestmentsService.prototype.portfolio = function(portfolioId) {
    return this.cacheGet('/api/portfolios/' + portfolioId);
  };

  InvestmentsService.prototype.balance = function(portfolioId) {
    return this.cacheGet('/api/portfolios/' + portfolioId + '/balance');
  };

  InvestmentsService.prototype.holdings = function(portfolioId) {
    return this.cacheGet('/api/portfolios/' + portfolioId + '/holdings');
  };

  InvestmentsService.prototype.onError = function(status) {
    if (status === 401) {
      cache.purge();
      return location.hash = '#/home/login';
    }
  };

  return InvestmentsService;

})(Service);

module.exports = new InvestmentsService({
  baseUrl: require('./config').getBaseUrl()
}, cache);



},{"../common/cache":2,"../common/service":6,"./config":10,"jquery":"jquery","underscore":"underscore"}],12:[function(require,module,exports){
var $, Service, TransactionsService, _, cache,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$ = require('jquery');

_ = require('underscore');

cache = require('../common/cache');

Service = require('../common/service');

TransactionsService = (function(superClass) {
  extend(TransactionsService, superClass);

  function TransactionsService() {
    return TransactionsService.__super__.constructor.apply(this, arguments);
  }

  TransactionsService.prototype.headers = function() {
    var authToken;
    authToken = cache.getPersistentItem('authToken');
    if (!authToken) {
      cache.purge();
      location.hash = '#/home/login';
    }
    return {
      'X-Auth-Token': authToken
    };
  };

  TransactionsService.prototype.types = function() {
    return this.get('/api/transactions/types');
  };

  TransactionsService.prototype.transactions = function(accountId) {
    var deferred, success;
    deferred = $.Deferred();
    success = function(data) {
      _.each(data, function(item) {
        return item.accountNames = _.pluck(item.otherLines, 'accountName').join(', ');
      });
      cache.setItem('transactions:' + accountId, data);
      return deferred.resolve(data);
    };
    this.get('/api/accounts/' + accountId + '/transactions').then(success, function() {
      return deferred.reject();
    });
    return deferred;
  };

  TransactionsService.prototype.accounts = function() {
    return this.cacheGet('/api/accounts');
  };

  TransactionsService.prototype.account = function(accountId) {
    return this.cacheGet('/api/accounts/' + accountId);
  };

  TransactionsService.prototype.createAccount = function(accountName, accountType) {
    return this.post('/api/accounts/add', {
      accountName: accountName,
      accountType: accountType
    }).then((function(_this) {
      return function(data) {
        return cache.clear();
      };
    })(this));
  };

  TransactionsService.prototype.balance = function(accountId) {
    return this.get('/api/accounts/' + accountId + '/balance');
  };

  TransactionsService.prototype.addTransaction = function(data) {
    return this.post('/api/transactions/add', data);
  };

  TransactionsService.prototype.editTransaction = function(transactionId, data) {
    return this.post('/api/transactions/' + transactionId + '/edit', data);
  };

  TransactionsService.prototype.removeTransaction = function(transactionId) {
    return this.get('/api/transactions/' + transactionId + '/remove');
  };

  TransactionsService.prototype.onError = function(status) {
    if (status === 401) {
      cache.purge();
      return location.hash = '#/home/login';
    }
  };

  return TransactionsService;

})(Service);

module.exports = new TransactionsService({
  baseUrl: require('./config').getBaseUrl()
}, cache);



},{"../common/cache":2,"../common/service":6,"./config":10,"jquery":"jquery","underscore":"underscore"}],13:[function(require,module,exports){
var $, BankingViewModel, Log, ViewModel, _, numberWithCommas, numberWithSymbolAndCommas, transactionsService,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewModel = require('../../common/viewmodel.coffee');

transactionsService = require('../../services/transactions.coffee');

Log = require('../../common/log.coffee');

$ = require('jquery');

_ = require('underscore');

numberWithCommas = function(x) {
  var parts;
  parts = x.toString().split(".");
  parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  return parts.join(".");
};

numberWithSymbolAndCommas = function(x) {
  var value;
  value = isNaN(x) ? parseFloat(x) : x;
  if (value >= 0) {
    return '$' + numberWithCommas(value.toFixed(2));
  } else {
    return '-$' + numberWithCommas(Math.abs(value).toFixed(2));
  }
};

BankingViewModel = (function(superClass) {
  extend(BankingViewModel, superClass);

  function BankingViewModel(params) {
    BankingViewModel.__super__.constructor.apply(this, arguments);
    this.accountId = params.accountId || null;
    this.accounts = [];
    this.accountOptions = [];
    this.account = null;
    this.balance = '$0.00';
    this.transactions = [];
    this.types = [];
    if (!this.accountId) {
      this.getAccounts().then((function(_this) {
        return function() {
          if (_this.accounts && _this.accounts.length > 0) {
            _this.accountId = _this.accounts[0].accountId;
            return _this.update();
          }
        };
      })(this));
    } else {
      this.update();
    }
  }

  BankingViewModel.prototype.update = function() {
    var accountRequest, accountsRequest, balanceRequest, map, transactionsRequest, typesRequest;
    accountRequest = transactionsService.account(this.accountId);
    balanceRequest = transactionsService.balance(this.accountId);
    typesRequest = transactionsService.types();
    accountsRequest = transactionsService.accounts();
    $.when(accountRequest, balanceRequest, typesRequest, accountsRequest).then((function(_this) {
      return function(account, balance, types, accounts) {
        _this.account = account;
        _this.types = types;
        _this.balance = numberWithSymbolAndCommas(balance);
        _this.accountOptions = _.map(_.filter(accounts, function(account) {
          return account.accountId !== _this.accountId;
        }), function(account) {
          return {
            value: account.accountId,
            label: account.accountName
          };
        });
        return _this.fire('refresh', {
          account: account,
          balance: _this.balance,
          types: types,
          accountOptions: _this.accountOptions
        });
      };
    })(this));
    transactionsRequest = transactionsService.transactions(this.accountId);
    map = (function(_this) {
      return function(transaction) {
        var date;
        date = new Date(transaction.transactionDate);
        return {
          transactionId: transaction.transactionId,
          date: date.toString('M/d/yyyy'),
          transactionType: transaction.transactionType,
          description: transaction.description,
          amount: numberWithCommas(transaction.amount.toFixed(2)),
          balance: numberWithSymbolAndCommas(transaction.balance),
          editing: false,
          saved: true
        };
      };
    })(this);
    return $.when(transactionsRequest).then((function(_this) {
      return function(transactions) {
        _this.transactions = _.map(transactions, map).reverse();
        return _this.fire('refresh', {
          transactions: _this.transactions
        });
      };
    })(this), function() {
      return console.log('Error fetching transactions');
    });
  };

  BankingViewModel.prototype.getAccounts = function() {
    return transactionsService.accounts().then((function(_this) {
      return function(data) {
        _this.accounts = data;
        return _this.fire('refresh', {
          accounts: data
        });
      };
    })(this), function() {
      return Log.error('Error fetching accounts');
    });
  };

  BankingViewModel.prototype.setAccount = function(accountId) {
    return this.router.goto('app.accounts', {
      accountId: accountId
    });
  };

  BankingViewModel.prototype.addTransaction = function() {
    var date, dateString;
    date = new Date();
    dateString = date.toString('M/d/yyyy');
    _.each(this.transactions, (function(_this) {
      return function(transaction) {
        return transaction.editing = false;
      };
    })(this));
    this.transactions.unshift({
      transactionId: null,
      date: dateString,
      transactionType: 'Test',
      description: 'Test',
      amount: 0,
      balance: '0.00',
      editing: true,
      saved: false
    });
    return this.fire('refresh', {
      transactions: this.transactions
    });
  };

  BankingViewModel.prototype.saveTransaction = function(transaction) {
    var date, request;
    date = new Date(transaction.date);
    request = {
      transactionDate: date.toString('yyyy-MM-dd'),
      transactionType: transaction.transactionType,
      description: transaction.description,
      amount: parseFloat(transaction.amount),
      fromAccountId: this.accountId,
      toAccountId: transaction.toAccountId
    };
    return transactionsService.addTransaction(request).then((function(_this) {
      return function() {
        return _this.update();
      };
    })(this), function() {
      return Log.error('Error saving transaction');
    });
  };

  BankingViewModel.prototype.editTransaction = function(transaction) {
    var date, request;
    date = new Date(transaction.date);
    request = {
      transactionDate: date.toString('yyyy-MM-dd'),
      transactionType: transaction.transactionType,
      description: transaction.description,
      amount: parseFloat(transaction.amount)
    };
    return transactionsService.editTransaction(transaction.transactionId, request).then((function(_this) {
      return function() {
        return _this.update();
      };
    })(this), function() {
      return Log.error('Error saving transaction');
    });
  };

  BankingViewModel.prototype.removeTransaction = function(transactionId) {
    return transactionsService.removeTransaction(transactionId).then((function(_this) {
      return function() {
        return _this.update();
      };
    })(this), function() {
      return Log.error('Error deleting transaction');
    });
  };

  BankingViewModel.prototype.markEditing = function(transactionId) {
    this.transactions = _.map(this.transactions, (function(_this) {
      return function(transaction) {
        if (transaction.transactionId === transactionId) {
          transaction.editing = true;
        } else {
          transaction.editing = false;
        }
        return transaction;
      };
    })(this));
    return this.fire('refresh', {
      transactions: this.transactions
    });
  };

  BankingViewModel.prototype.clearEditing = function(transactionId) {
    var transactions;
    transactions = [];
    _.each(this.transactions, (function(_this) {
      return function(transaction) {
        transaction.editing = false;
        if (transaction.saved) {
          return transactions.push(transaction);
        }
      };
    })(this));
    this.transactions = transactions;
    return this.fire('refresh', {
      transactions: this.transactions
    });
  };

  return BankingViewModel;

})(ViewModel);

module.exports = BankingViewModel;



},{"../../common/log.coffee":3,"../../common/viewmodel.coffee":8,"../../services/transactions.coffee":12,"jquery":"jquery","underscore":"underscore"}],14:[function(require,module,exports){
var $, InvestmentsViewModel, Log, ViewModel, _, investmentsService, numberWithCommas,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewModel = require('../../common/viewmodel.coffee');

investmentsService = require('../../services/investments.coffee');

Log = require('../../common/log.coffee');

$ = require('jquery');

_ = require('underscore');

numberWithCommas = function(x) {
  var parts;
  parts = x.toString().split(".");
  parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  return parts.join(".");
};

InvestmentsViewModel = (function(superClass) {
  extend(InvestmentsViewModel, superClass);

  function InvestmentsViewModel(params) {
    InvestmentsViewModel.__super__.constructor.apply(this, arguments);
    this.portfolioId = params.portfolioId || null;
    this.portfolios = [];
    this.portfolio = null;
    this.balance = 0;
    this.holdings = [];
    if (!this.portfolioId) {
      this.getPortfolios().then((function(_this) {
        return function() {
          if (_this.portfolios && _this.portfolios.length > 0) {
            _this.portfolioId = _this.portfolios[0].portfolioId;
            return _this.update();
          }
        };
      })(this));
    } else {
      this.update();
    }
  }

  InvestmentsViewModel.prototype.update = function() {
    var balanceRequest, filter, holdingsRequest, map, portfolioRequest;
    portfolioRequest = investmentsService.portfolio(this.portfolioId);
    balanceRequest = investmentsService.balance(this.portfolioId);
    $.when(portfolioRequest, balanceRequest).then((function(_this) {
      return function(portfolio, balance) {
        _this.portfolio = portfolio;
        _this.balance = balance;
        return _this.fire('refresh', {
          portfolio: portfolio,
          balance: numberWithCommas(balance)
        });
      };
    })(this));
    holdingsRequest = investmentsService.holdings(this.portfolioId);
    map = (function(_this) {
      return function(holding) {
        return {
          symbol: holding.security ? holding.security.symbol : '',
          name: holding.security ? holding.security.name : '',
          price: holding.price,
          priceChange: holding.dayValueChange,
          priceChangePercentage: holding.dayPercentageChange,
          quantity: 0,
          marketValue: holding.marketValue,
          marketChange: holding.marketValueChange,
          marketChangePercentage: holding.dayPercentageChange,
          gainLoss: holding.unrealizedGainLoss,
          gainLossPercentage: 0
        };
      };
    })(this);
    filter = (function(_this) {
      return function(holding) {
        return holding.marketValue > 0;
      };
    })(this);
    return $.when(holdingsRequest).then((function(_this) {
      return function(holdings) {
        _this.holdings = _.sortBy(_.map(_.filter(holdings, filter), map), 'symbol');
        return _this.fire('refresh', {
          holdings: _this.holdings
        });
      };
    })(this), function() {
      return console.log('Error fetching holdings');
    });
  };

  InvestmentsViewModel.prototype.getPortfolios = function() {
    return investmentsService.portfolios().then((function(_this) {
      return function(data) {
        _this.portfolios = data;
        return _this.fire('refresh', {
          portfolios: data
        });
      };
    })(this), function() {
      return Log.error('Error fetching accounts');
    });
  };

  InvestmentsViewModel.prototype.setPortfolio = function(portfolioId) {
    return this.router.goto('app.investments', {
      portfolioId: portfolioId
    });
  };

  return InvestmentsViewModel;

})(ViewModel);

module.exports = InvestmentsViewModel;



},{"../../common/log.coffee":3,"../../common/viewmodel.coffee":8,"../../services/investments.coffee":11,"jquery":"jquery","underscore":"underscore"}],15:[function(require,module,exports){
var NavigationViewModel, ViewModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewModel = require('../../common/viewmodel.coffee');

NavigationViewModel = (function(superClass) {
  extend(NavigationViewModel, superClass);

  function NavigationViewModel() {
    var hash;
    NavigationViewModel.__super__.constructor.apply(this, arguments);
    hash = location.hash.replace(/(^#\/?)|(\/$)/g, '').split('/');
    this.state = hash[1] || 'accounts';
  }

  NavigationViewModel.prototype.setState = function(state) {
    this.state = state;
    return this.router.goto('app.' + state);
  };

  NavigationViewModel.prototype.logout = function() {
    return this.router.goto('home.login');
  };

  return NavigationViewModel;

})(ViewModel);

module.exports = NavigationViewModel;



},{"../../common/viewmodel.coffee":8}],16:[function(require,module,exports){
var ForgotViewModel, Log, ViewModel, authService,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewModel = require('../../common/viewmodel.coffee');

authService = require('../../services/auth.coffee');

Log = require('../../common/log.coffee');

ForgotViewModel = (function(superClass) {
  extend(ForgotViewModel, superClass);

  function ForgotViewModel() {
    ForgotViewModel.__super__.constructor.apply(this, arguments);
    this.email = null;
  }

  ForgotViewModel.prototype.forgotPassword = function(email) {
    if (!email) {
      return Log.warn('Invalid email address');
    }
    return authService.forgotPassword(email).then((function(_this) {
      return function() {
        return _this.router.goto('home.login');
      };
    })(this), function() {
      return Log.error('Unable to process request');
    });
  };

  return ForgotViewModel;

})(ViewModel);

module.exports = ForgotViewModel;



},{"../../common/log.coffee":3,"../../common/viewmodel.coffee":8,"../../services/auth.coffee":9}],17:[function(require,module,exports){
var Log, LoginViewModel, ViewModel, authService,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewModel = require('../../common/viewmodel.coffee');

authService = require('../../services/auth.coffee');

Log = require('../../common/log.coffee');

LoginViewModel = (function(superClass) {
  extend(LoginViewModel, superClass);

  function LoginViewModel() {
    LoginViewModel.__super__.constructor.apply(this, arguments);
    this.email = null;
    this.password = null;
  }

  LoginViewModel.prototype.login = function(email, password) {
    return authService.login(email, password).then((function(_this) {
      return function() {
        return _this.router.goto('app.accounts');
      };
    })(this), function() {
      return Log.error('Unable to login to account');
    });
  };

  return LoginViewModel;

})(ViewModel);

module.exports = LoginViewModel;



},{"../../common/log.coffee":3,"../../common/viewmodel.coffee":8,"../../services/auth.coffee":9}],18:[function(require,module,exports){
var Log, RegisterViewModel, ViewModel, authService,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewModel = require('../../common/viewmodel.coffee');

authService = require('../../services/auth.coffee');

Log = require('../../common/log.coffee');

RegisterViewModel = (function(superClass) {
  extend(RegisterViewModel, superClass);

  function RegisterViewModel() {
    RegisterViewModel.__super__.constructor.apply(this, arguments);
    this.firstName = null;
    this.lastName = null;
    this.email = null;
    this.password = null;
  }

  RegisterViewModel.prototype.register = function(firstName, lastName, email, password) {
    if (!firstName || !lastName || !email || !password) {
      return Log.warn('Invalid form');
    }
    return authService.register(firstName, lastName, email, password).then((function(_this) {
      return function() {
        return _this.router.goto('home.login');
      };
    })(this), function() {
      return Log.error('Error registering');
    });
  };

  return RegisterViewModel;

})(ViewModel);

module.exports = RegisterViewModel;



},{"../../common/log.coffee":3,"../../common/viewmodel.coffee":8,"../../services/auth.coffee":9}],19:[function(require,module,exports){
var Log, ResetViewModel, ViewModel, authService,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewModel = require('../../common/viewmodel.coffee');

authService = require('../../services/auth.coffee');

Log = require('../../common/log.coffee');

ResetViewModel = (function(superClass) {
  extend(ResetViewModel, superClass);

  function ResetViewModel() {
    ResetViewModel.__super__.constructor.apply(this, arguments);
    this.password = null;
    this.confirm = null;
  }

  ResetViewModel.prototype.resetPassword = function(password, confirm) {
    if (!password || !confirm || password !== confirm) {
      return Log.warn('Invalid password');
    }
    return authService.resetPassword(password, confirm).then((function(_this) {
      return function() {
        return _this.router.goto('home.login');
      };
    })(this), function() {
      return Log.error('Error resetting password');
    });
  };

  return ResetViewModel;

})(ViewModel);

module.exports = ResetViewModel;



},{"../../common/log.coffee":3,"../../common/viewmodel.coffee":8,"../../services/auth.coffee":9}],20:[function(require,module,exports){
var React = require('react');
var BankingToolbar = require('./banking/toolbar.jsx');
var TransactionTable = require('./banking/transaction-table.jsx');
var TransactionDetail = require('./banking/transaction-detail.jsx');
var AccountsMenu = require('./banking/menu.jsx');
var PopupMenu = require('./banking/popup-menu.jsx');

var BankingView = React.createClass({displayName: "BankingView",

  getInitialState: function() {
    return {
      accounts: [],
      accountOptions: [],
      transactions: [],
      account: {},
      balance: '$0.00',
      types: []
    }
  },

  componentDidMount: function() {
    this.props.viewmodel.getAccounts();
  },

  handleMenuClose: function() {
    React.findDOMNode(this.refs.menu).classList.add('visible');
  },

  handleMenuOpen: function() {
    React.findDOMNode(this.refs.menu).classList.remove('visible');
  },

  handleSelect: function(key) {
    this.props.viewmodel.setAccount(key);
    React.findDOMNode(this.refs.menu).classList.remove('visible');
  },

  handleAdd: function() {
    React.findDOMNode(this.refs.addMenu).classList.add('visible');
  },

  handleAddSelect: function(key) {
    this.props.viewmodel.addTransaction();
    React.findDOMNode(this.refs.addMenu).classList.remove('visible');
  },

  handleEdit: function(key) {
    this.props.viewmodel.markEditing(key);
  },

  handleCancel: function(key) {
    this.props.viewmodel.clearEditing();
  },

  handleRemove: function(key) {
    this.props.viewmodel.removeTransaction(key);
  },

  handleSave: function(transaction) {
    if (transaction.transactionId == null) {
      this.props.viewmodel.saveTransaction(transaction);
    } else {
      this.props.viewmodel.editTransaction(transaction);
    }
  },

  render: function() {
    return (
      React.createElement("div", {id: "banking"}, 
        React.createElement(BankingToolbar, {key: "toolbar", account: this.state.account, balance: this.state.balance, onClick: this.handleMenuClose, onAdd: this.handleAdd}), 
        React.createElement(PopupMenu, {key: "menu", ref: "addMenu", onSelect: this.handleAddSelect}), 
        React.createElement(TransactionTable, {key: "transaction-table", accounts: this.state.accountOptions, types: this.state.types, transactions: this.state.transactions, onCancel: this.handleCancel, onSave: this.handleSave, onRemove: this.handleRemove, onEdit: this.handleEdit}), 
        React.createElement(TransactionDetail, {key: "detail"}), 
        React.createElement(AccountsMenu, {ref: "menu", key: "accounts", accounts: this.state.accounts, onSelect: this.handleSelect, onClick: this.handleMenuOpen})
      )
    )
  }

});

module.exports = BankingView;

},{"./banking/menu.jsx":21,"./banking/popup-menu.jsx":22,"./banking/toolbar.jsx":23,"./banking/transaction-detail.jsx":24,"./banking/transaction-table.jsx":27,"react":"react"}],21:[function(require,module,exports){
var React = require('react');
var $ = require('jquery');

var AccountsMenu = React.createClass({displayName: "AccountsMenu",

  getDefaultProps: function() {
    return {
      accounts: []
    };
  },

  handleClick: function() {
    if (typeof this.props.onClick == 'function') {
      this.props.onClick.call(this);
    }
  },

  handleSelect: function(e) {

    var key = $(e.currentTarget).attr('data-key');

    if (typeof this.props.onSelect == 'function') {
      this.props.onSelect.call(this, key);
    }

  },

  render: function() {

    var that = this;

    var accountRows = this.props.accounts.map(function(account) {
      return (
        React.createElement("div", {className: "item", onClick: that.handleSelect, "data-key": account.accountId, key: account.accountId}, account.accountName)
      )
    });

    return (
      React.createElement("div", {id: "accounts-menu"}, 
        React.createElement("div", {className: "header"}, 
          React.createElement("div", {className: "back-button", onClick: this.handleClick}), 
          React.createElement("div", {className: "title"}, "Accounts"), 
          React.createElement("div", {className: "add-account-button"}, "New")
        ), 
        React.createElement("div", {className: "section"}, 
          React.createElement("div", {className: "title"}, "Banking"), 
          accountRows
        ), 
        React.createElement("div", {className: "section"}, 
          React.createElement("div", {className: "title"}, "Credit & Loan"), 
          React.createElement("div", {className: "item"}, "American Express Blue Cash"), 
          React.createElement("div", {className: "item"}, "Citi Double Cash"), 
          React.createElement("div", {className: "item"}, "Citi AAdvantage Signature"), 
          React.createElement("div", {className: "item"}, "Chase Freedom Rewards Signature"), 
          React.createElement("div", {className: "item"}, "Chase Ink Premier"), 
          React.createElement("div", {className: "item"}, "Bank of America World Points")
        )
      )
    )
  }

});

module.exports = AccountsMenu;

},{"jquery":"jquery","react":"react"}],22:[function(require,module,exports){
var React = require('react');
var $ = require('jquery');

var PopUpMenu = React.createClass({displayName: "PopUpMenu",

  handleSelect: function(e) {

    var key = $(e.currentTarget).attr('data-key');

    if (typeof this.props.onSelect == 'function') {
      this.props.onSelect.call(this, key);
    }

  },

  render: function() {
    return (
      React.createElement("ul", {id: "add-transaction-menu"}, 
        React.createElement("li", {className: "menu-option", onClick: this.handleSelect, "data-key": "transfer"}, "Transfer"), 
        React.createElement("li", {className: "menu-option", onClick: this.handleSelect, "data-key": "deposit"}, "Deposit"), 
        React.createElement("li", {className: "menu-option", onClick: this.handleSelect, "data-key": "withdrawal"}, "Withdrawal"), 
        React.createElement("li", {className: "menu-option", onClick: this.handleSelect, "data-key": "billpay"}, "Bill Pay"), 
        React.createElement("li", {className: "menu-option", onClick: this.handleSelect, "data-key": "custom"}, "Custom")
      )
    )
  }

});

module.exports = PopUpMenu;

},{"jquery":"jquery","react":"react"}],23:[function(require,module,exports){
var React = require('react');
var $ = require('jquery');

var BankingToolbar = React.createClass({displayName: "BankingToolbar",

  handleClick: function() {

    if (typeof this.props.onClick == 'function') {
      this.props.onClick.call(this);
    }
  },

  handleAdd: function() {

    if (typeof this.props.onAdd == 'function') {
      this.props.onAdd.call(this);
    }
  },

  render: function() {
    return (
      React.createElement("div", {className: "toolbar"}, 
        React.createElement("div", {className: "menu-button", onClick: this.handleClick}), 
        React.createElement("h2", {className: "label"}, this.props.account.accountName), 
        React.createElement("div", {className: "add-transaction-button", onClick: this.handleAdd}, "Add Transaction"), 
        React.createElement("div", {className: "info"}, 
          React.createElement("div", {className: "balance"}, this.props.balance), 
          React.createElement("div", {className: "updated"}, "Last Updated May 8, 2015")
        )
      )
    )
  }

});

module.exports = BankingToolbar;

},{"jquery":"jquery","react":"react"}],24:[function(require,module,exports){
var React = require('react');

var TransactionDetail = React.createClass({displayName: "TransactionDetail",

  render: function() {
    return (
      React.createElement("div", {id: "transaction-detail"}, 
        React.createElement("div", {className: "actions"}, 
          React.createElement("div", {className: "modify-button selected"}, "Modify"), 
          React.createElement("div", {className: "delete-button"}, "Delete")
        ), 
        React.createElement("div", {className: "section lines"}, 
          React.createElement("h3", {className: "title"}, "Lines"), 
          React.createElement("ul", {className: "line-group"}, 
            React.createElement("li", {className: "line"}, 
              React.createElement("div", {className: "account"}, "Chase Freedom Visa"), 
              React.createElement("div", {className: "amount"}, "190.12")
            ), 
            React.createElement("li", {className: "line"}, 
              React.createElement("div", {className: "account"}, "Chase Freedom Visa"), 
              React.createElement("div", {className: "amount"}, "190.12")
            )
          ), 
          React.createElement("div", {className: "line-editor-button"}, "Line Editor")
        ), 
        React.createElement("div", {className: "section tags"}, 
          React.createElement("h3", {className: "title"}, "Tags"), 
          React.createElement("ul", {className: "tag-group"}, 
            React.createElement("li", {className: "tag"}, "Bill Pay"), 
            React.createElement("li", {className: "tag"}, "Recruiting"), 
            React.createElement("li", {className: "add-tag-button"})
          )
        ), 
        React.createElement("div", {className: "section comments"}, 
          React.createElement("h3", {className: "title"}, "Comments"), 
          React.createElement("div", {className: "comment"}, "Bill Pay was sent automatically on 8/8/14.")
        ), 
        React.createElement("div", {className: "controls"}, 
          React.createElement("div", {className: "previous-button"}, "Previous"), 
          React.createElement("div", {className: "next-button"}, "Next")
        )
      )
    )
  }

});

module.exports = TransactionDetail;

},{"react":"react"}],25:[function(require,module,exports){
var React = require('react');
var $ = require('jquery');
var DateField = require('../common/date-field.jsx');
var TextField = require('../common/text-field.jsx');
var CurrencyField = require('../common/currency-field.jsx');
var SelectField = require('../common/select-field.jsx');

var TransactionEditRow = React.createClass({displayName: "TransactionEditRow",

  getDefaultProps: function() {
    return {
      transaction: {},
      types: [],
      accounts: []
    };
  },

  handleSave: function() {
    if (this.props.onSave && typeof this.props.onSave == 'function') {
      this.props.onSave.call(this, {
        transactionId: this.props.transaction.transactionId,
        date: this.refs.date.getValue(),
        transactionType: this.refs.type.getValue(),
        description: this.refs.description.getValue(),
        amount: this.refs.amount.getValue(),
        toAccountId: this.refs.account ? this.refs.account.getValue() : undefined
      });
    }
  },

  handleCancel: function() {
    if (this.props.onCancel && typeof this.props.onCancel == 'function') {
      this.props.onCancel.call(this, this.props.transaction.transactionId);
    }
  },

  handleRemove: function() {
    if (this.props.onRemove && typeof this.props.onRemove == 'function') {
      this.props.onRemove.call(this, this.props.transaction.transactionId);
    }
  },

  render: function() {
    var transaction = this.props.transaction;
    var accountSelector = '';
    if (!transaction.transactionId) {
      accountSelector = React.createElement(SelectField, {className: "field", options: this.props.accounts, ref: "account", value: transaction.toAccountId});
    }
    return (
      React.createElement("div", {className: "row editing", "data-key": transaction.transactionId}, 
        React.createElement("div", {className: "column"}, 
          React.createElement(DateField, {className: "field", ref: "date", value: transaction.date})
        ), 
        React.createElement("div", {className: "column md"}, 
          React.createElement(SelectField, {className: "field", ref: "type", options: this.props.types, value: transaction.transactionType})
        ), 
        React.createElement("div", {className: "column xl"}, 
          React.createElement(TextField, {className: "field", ref: "description", value: transaction.description}), 
          accountSelector
        ), 
        React.createElement("div", {className: "column lg right last"}, 
          React.createElement("div", {className: "save-button", onClick: this.handleSave}, "Save"), 
          React.createElement("div", {className: "remove-button", onClick: this.handleRemove}, "Remove"), 
          React.createElement("div", {className: "cancel-button", onClick: this.handleCancel}, "Cancel")
        ), 
        React.createElement("div", {className: "column right"}, 
          React.createElement(CurrencyField, {className: "field", ref: "amount", value: transaction.amount})
        )
      )
    )
  }

});

module.exports = TransactionEditRow;

},{"../common/currency-field.jsx":28,"../common/date-field.jsx":29,"../common/select-field.jsx":30,"../common/text-field.jsx":31,"jquery":"jquery","react":"react"}],26:[function(require,module,exports){
var React = require('react');
var $ = require('jquery');

var TransactionRow = React.createClass({displayName: "TransactionRow",

  getDefaultProps: function() {
    return {
      transaction: {}
    };
  },

  handleClick: function(e) {
    if (this.props.onClick && typeof this.props.onClick == 'function') {
      var key = $(e.currentTarget).attr('data-key');
      this.props.onClick.call(this, key);
    }
  },

  render: function() {
    var transaction = this.props.transaction;
    return (
      React.createElement("div", {className: "row", onClick: this.handleClick, "data-key": transaction.transactionId}, 
        React.createElement("div", {className: "column"}, 
          React.createElement("div", {className: "label"}, transaction.date)
        ), 
        React.createElement("div", {className: "column md"}, 
          React.createElement("div", {className: "label"}, transaction.transactionType)
        ), 
        React.createElement("div", {className: "column xl"}, 
          React.createElement("div", {className: "label"}, transaction.description), 
          React.createElement("div", {className: "tags"}, 
            React.createElement("div", {className: "tag"}, "Interest"), 
            React.createElement("div", {className: "tag"}, "Taxable")
          )
        ), 
        React.createElement("div", {className: "column lg right last"}, 
          React.createElement("div", {className: "label"}, transaction.balance)
        ), 
        React.createElement("div", {className: "column right"}, 
          React.createElement("div", {className: "label"}, transaction.amount)
        )
      )
    )
  }

});

module.exports = TransactionRow;

},{"jquery":"jquery","react":"react"}],27:[function(require,module,exports){
var React = require('react');
var TransactionRow = require('./transaction-row.jsx')
var TransactionEditRow = require('./transaction-edit-row.jsx')

var TransactionTable = React.createClass({displayName: "TransactionTable",

  getDefaultProps: function() {
    return {
      transactions: [],
      types: [],
      accounts: []
    };
  },

  handleEdit: function(key) {
    if (this.props.onEdit && typeof this.props.onEdit == 'function') {
      this.props.onEdit.call(this, key);
    }
  },

  handleSave: function(transaction) {
    if (this.props.onSave && typeof this.props.onSave == 'function') {
      this.props.onSave.call(this, transaction);
    }
  },

  handleCancel: function(key) {
    if (this.props.onCancel && typeof this.props.onCancel == 'function') {
      this.props.onCancel.call(this, key);
    }
  },

  handleRemove: function(key) {
    if (this.props.onRemove && typeof this.props.onRemove == 'function') {
      this.props.onRemove.call(this, key);
    }
  },

  render: function() {

    var that = this;

    var transactionRows = this.props.transactions.map(function(transaction) {
      if (transaction.editing) {
        return (
          React.createElement(TransactionEditRow, {types: that.props.types, 
                              accounts: that.props.accounts, 
                              transaction: transaction, 
                              onSave: that.handleSave, 
                              onCancel: that.handleCancel, 
                              onRemove: that.handleRemove, 
                              key: transaction.transactionId})
        )
      } else {
        return (
          React.createElement(TransactionRow, {onClick: that.handleEdit, transaction: transaction, key: transaction.transactionId})
        )
      }
    });

    return (
      React.createElement("div", {id: "transaction-table"}, 
        React.createElement("div", {className: "table-head"}, 
          React.createElement("div", {className: "header-row"}, 
            React.createElement("div", {className: "header-column selected ascending"}, "Date"), 
            React.createElement("div", {className: "header-column md"}, "Type"), 
            React.createElement("div", {className: "header-column xl"}, "Description"), 
            React.createElement("div", {className: "header-column lg right last"}, "Balance"), 
            React.createElement("div", {className: "header-column right"}, "Amount")
          )
        ), 
        React.createElement("div", {className: "table-body"}, 
        transactionRows
        )
      )
    )
  }

});

module.exports = TransactionTable;

},{"./transaction-edit-row.jsx":25,"./transaction-row.jsx":26,"react":"react"}],28:[function(require,module,exports){
var React = require('react');

function numberWithCommas(x) {
  var parts = x.toString().split(".");
  parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  return parts.join(".");
}

var CurrencyField = React.createClass({displayName: "CurrencyField",

  getInitialState: function() {
    return { value: this.props.value || '0', editing: false };
  },

  handleChange: function(event) {
    this.setState({ value: event.target.value });
  },

  componentWillReceiveProps: function(nextProps) {
    this.setState({ value: nextProps.value });
  },

  handleFocus: function() {
    this.setState({ value: this.state.value.replace(',', ''), editing: true });
  },

  handleBlur: function() {
    this.setState({ editing: false });
  },

  getValue: function() {
    return this.state.value;
  },

  render: function() {
    var formatted = this.state.value;
    var classes = this.props.className;
    if (!this.state.editing) {
      formatted = numberWithCommas(this.state.value);
    }
    return React.createElement("input", {className: classes, type: "text", value: formatted, onBlur: this.handleBlur, onFocus: this.handleFocus, onChange: this.handleChange});
  }

});

module.exports = CurrencyField;

},{"react":"react"}],29:[function(require,module,exports){
var React = require('react');

var DateField = React.createClass({displayName: "DateField",

  getInitialState: function() {
    return { value: this.props.value, editing: false };
  },

  handleChange: function(event) {
    this.setState({ value: event.target.value });
  },

  componentWillReceiveProps: function(nextProps) {
    this.setState({ value: nextProps.value });
  },

  handleFocus: function() {
    this.setState({ editing: true });
  },

  handleBlur: function() {
    this.setState({ editing: false });
  },

  getValue: function() {
    return this.state.value;
  },

  render: function() {
    var str = '';
    var classes = this.props.className;
    if (this.state.editing) {
      classes += ' editing';
      str = this.state.value;
    } else {
      var date = new Date(this.state.value);
      str = date.toString(this.props.format || 'M/d/yyyy');
    }
    return React.createElement("input", {className: classes, type: "text", value: str, onBlur: this.handleBlur, onFocus: this.handleFocus, onChange: this.handleChange});
  }

});

module.exports = DateField;

},{"react":"react"}],30:[function(require,module,exports){
var React = require('react');

var SelectField = React.createClass({displayName: "SelectField",

  getDefaultProps: function() {
    return {
      options: []
    };
  },

  getInitialState: function() {
    return { value: this.props.value, editing: false };
  },

  handleChange: function(event) {
    this.setState({ value: event.target.value });
  },

  componentWillReceiveProps: function(nextProps) {
    this.setState({ value: nextProps.value });
  },

  handleFocus: function() {
    if (this.props.onFocus) {
      this.props.onFocus();
    }
    this.setState({ editing: true });
  },

  handleBlur: function() {
    if (this.props.onBlur) {
      this.props.onBlur();
    }
    this.setState({ editing: false });
  },

  getValue: function() {
    return this.state.value;
  },

  render: function() {

    var value = this.state.value;
    var classes = 'select-field ' + this.props.className;
    if (this.state.editing) {
      classes += ' editing';
    }

    var options = this.props.options.map(function(option) {
      if (typeof option === 'string') {
        return React.createElement("option", {value: option, key: option}, option)
      } else {
        return React.createElement("option", {value: option.value, key: option.value}, option.label)
      }
    });

    return (
      React.createElement("select", {className: classes, type: "text", value: value, onBlur: this.handleBlur, onFocus: this.handleFocus, onChange: this.handleChange}, 
      options
      )
    )
  }

});

module.exports = SelectField;

},{"react":"react"}],31:[function(require,module,exports){
var React = require('react');

var TextField = React.createClass({displayName: "TextField",

  getInitialState: function() {
    return { value: this.props.value, editing: false };
  },

  handleChange: function(event) {
    this.setState({ value: event.target.value });
  },

  componentWillReceiveProps: function(nextProps) {
    this.setState({ value: nextProps.value });
  },

  handleFocus: function() {
    if (this.props.onFocus) {
      this.props.onFocus();
    }
    this.setState({ editing: true });
  },

  handleBlur: function() {
    if (this.props.onBlur) {
      this.props.onBlur();
    }
    this.setState({ editing: false });
  },

  getValue: function() {
    return this.state.value;
  },

  render: function() {
    var value = this.state.value;
    var classes = this.props.className;
    if (this.state.editing) {
      classes += ' editing';
    }
    return React.createElement("input", {className: classes, type: "text", value: value, onBlur: this.handleBlur, onFocus: this.handleFocus, onChange: this.handleChange});
  }

});

module.exports = TextField;

},{"react":"react"}],32:[function(require,module,exports){
var React = require('react');
var InvestmentsToolbar = require('./investments/toolbar.jsx');
var InvestmentsChart = require('./investments/chart.jsx');
var HoldingsTable = require('./investments/holdings-table.jsx');
var InvestmentsMenu = require('./investments/menu.jsx');

var InvestmentsView = React.createClass({displayName: "InvestmentsView",

  getInitialState: function() {
    return {
      portfolios: [],
      holdings: [],
      portfolio: {},
      balance: 0
    }
  },

  componentDidMount: function() {

    this.props.viewmodel.getPortfolios();

  },

  handleMenuClose: function() {
    React.findDOMNode(this.refs.menu).classList.add('visible');
  },

  handleMenuOpen: function() {
    React.findDOMNode(this.refs.menu).classList.remove('visible');
  },

  handleSelect: function(key) {
    this.props.viewmodel.setPortfolio(key);
    React.findDOMNode(this.refs.menu).classList.remove('visible');
  },

  render: function() {
    return (
      React.createElement("div", {id: "investments"}, 
        React.createElement(InvestmentsToolbar, {portfolio: this.state.portfolio, balance: this.state.balance, onClick: this.handleMenuClose}), 
        React.createElement(InvestmentsChart, null), 
        React.createElement(HoldingsTable, {holdings: this.state.holdings}), 
        React.createElement(InvestmentsMenu, {ref: "menu", portfolios: this.state.portfolios, onSelect: this.handleSelect, onClick: this.handleMenuOpen})
      )
    )
  }

});

module.exports = InvestmentsView;

},{"./investments/chart.jsx":33,"./investments/holdings-table.jsx":34,"./investments/menu.jsx":35,"./investments/toolbar.jsx":36,"react":"react"}],33:[function(require,module,exports){
var React = require('react');

var InvestmentsChart = React.createClass({displayName: "InvestmentsChart",

  render: function() {
    return (
      React.createElement("div", {id: "investments-chart"}, 
        React.createElement("div", {className: "controls"}, 
          React.createElement("ul", {className: "views"}, 
            React.createElement("li", {className: "view-option selected"}, "Performance"), 
            React.createElement("li", {className: "view-option"}, "Return")
          ), 
          React.createElement("ul", {className: "date-range"}, 
            React.createElement("li", {className: "date-range-option"}, "1M"), 
            React.createElement("li", {className: "date-range-option"}, "2M"), 
            React.createElement("li", {className: "date-range-option selected"}, "3M"), 
            React.createElement("li", {className: "date-range-option"}, "6M"), 
            React.createElement("li", {className: "date-range-option"}, "1Y"), 
            React.createElement("li", {className: "date-range-option"}, "3Y"), 
            React.createElement("li", {className: "date-range-option"}, "5Y"), 
            React.createElement("li", {className: "date-range-option"}, "All")
          )
        ), 
        React.createElement("div", {className: "chart"})
      )
    )
  }

});

module.exports = InvestmentsChart;

},{"react":"react"}],34:[function(require,module,exports){
var React = require('react');

var HoldingsTable = React.createClass({displayName: "HoldingsTable",

  getDefaultProps: function() {
    return {
      holdings: []
    };
  },

  render: function() {

    var holdingsRows = this.props.holdings.map(function(holding) {
      return (
        React.createElement("div", {className: "row"}, 
          React.createElement("div", {className: "column"}, 
            React.createElement("div", {className: "label"}, holding.symbol)
          ), 
          React.createElement("div", {className: "column lg"}, 
            React.createElement("div", {className: "label"}, holding.name)
          ), 
          React.createElement("div", {className: "column align-right"}, 
            React.createElement("div", {className: "label"}, holding.price)
          ), 
          React.createElement("div", {className: "column align-right md"}, 
            React.createElement("div", {className: "label"}, holding.priceChange), 
            React.createElement("div", {className: "label"}, holding.priceChangePercentage, "%")
          ), 
          React.createElement("div", {className: "column align-right"}, 
            React.createElement("div", {className: "label"}, holding.quantity)
          ), 
          React.createElement("div", {className: "column align-right md"}, 
            React.createElement("div", {className: "label"}, holding.marketValue)
          ), 
          React.createElement("div", {className: "column align-right"}, 
            React.createElement("div", {className: "label"}, holding.marketChange), 
            React.createElement("div", {className: "label"}, holding.marketChangePercentage, "%")
          ), 
          React.createElement("div", {className: "column align-right lg"}, 
            React.createElement("div", {className: "label"}, holding.gainLoss), 
            React.createElement("div", {className: "label"}, holding.gainLossPercentage, "%")
          ), 
          React.createElement("div", {className: "column align-right xsm"}, 
            React.createElement("div", {className: "details-button"})
          )
        )
      )
    });

    return (
      React.createElement("div", {id: "holdings-table"}, 
        React.createElement("div", {className: "table-head"}, 
          React.createElement("div", {className: "header-row"}, 
            React.createElement("div", {className: "header-column selected ascending"}, "Symbol"), 
            React.createElement("div", {className: "header-column lg"}, "Name"), 
            React.createElement("div", {className: "header-column align-right"}, "Price"), 
            React.createElement("div", {className: "header-column align-right md"}, "Change"), 
            React.createElement("div", {className: "header-column align-right"}, "Quantity"), 
            React.createElement("div", {className: "header-column align-right md"}, "Market Value"), 
            React.createElement("div", {className: "header-column align-right"}, "Change"), 
            React.createElement("div", {className: "header-column align-right lg"}, "Gain / Loss"), 
            React.createElement("div", {className: "header-column align-right xsm"})
          )
        ), 
        React.createElement("div", {className: "table-body"}, 
        holdingsRows
        )
      )
    )
  }

});

module.exports = HoldingsTable;

},{"react":"react"}],35:[function(require,module,exports){
var React = require('react');
var $ = require('jquery');

var InvestmentsMenu = React.createClass({displayName: "InvestmentsMenu",

  getDefaultProps: function() {
    return {
      portfolios: []
    };
  },

  handleClick: function() {
    if (typeof this.props.onClick == 'function') {
      this.props.onClick.call(this);
    }
  },

  handleSelect: function(e) {

    var key = $(e.currentTarget).attr('data-key');

    if (typeof this.props.onSelect == 'function') {
      this.props.onSelect.call(this, key);
    }

  },

  render: function() {

    var that = this;

    var portfolioRows = this.props.portfolios.map(function(portfolio) {
      return (
        React.createElement("div", {className: "item", onClick: that.handleSelect, "data-key": portfolio.portfolioId}, portfolio.portfolioName)
      )
    });

    return (
      React.createElement("div", {id: "portfolios-menu"}, 
        React.createElement("div", {className: "header"}, 
          React.createElement("div", {className: "back-button", onClick: this.handleClick}), 
          React.createElement("div", {className: "title"}, "Portfolios"), 
          React.createElement("div", {className: "add-portfolio-button"}, "New")
        ), 
        React.createElement("div", {className: "section"}, 
          React.createElement("div", {className: "title"}, "Brokerage"), 
          portfolioRows
        )
      )
    )
  }

});

module.exports = InvestmentsMenu;

},{"jquery":"jquery","react":"react"}],36:[function(require,module,exports){
var React = require('react');

var InvestmentsToolbar = React.createClass({displayName: "InvestmentsToolbar",

  handleClick: function() {

    if (typeof this.props.onClick == 'function') {
      this.props.onClick.call(this);
    }
  },

  render: function() {
    return (
      React.createElement("div", {className: "toolbar"}, 
        React.createElement("div", {className: "menu-button", onClick: this.handleClick}), 
        React.createElement("h2", {className: "label"}, this.props.portfolio.portfolioName), 
        React.createElement("div", {className: "trade-button"}, "Trade"), 
        React.createElement("div", {className: "info"}, 
          React.createElement("div", {className: "balance"}, this.props.balance), 
          React.createElement("div", {className: "updated"}, "Last Updated May 8, 2015")
        )
      )
    )
  }

});

module.exports = InvestmentsToolbar;

},{"react":"react"}],37:[function(require,module,exports){
var React = require('react');

var NavigationBar = React.createClass({displayName: "NavigationBar",

  handleSummary: function() {

    if (React.findDOMNode(this.refs.summary).classList.contains('selected')) return;

    React.findDOMNode(this.refs.summary).classList.add('selected');
    React.findDOMNode(this.refs.banking).classList.remove('selected');
    React.findDOMNode(this.refs.investments).classList.remove('selected');
    React.findDOMNode(this.refs.budgets).classList.remove('selected');

  },

  handleBanking: function() {

    if (React.findDOMNode(this.refs.banking).classList.contains('selected')) return;

    React.findDOMNode(this.refs.summary).classList.remove('selected');
    React.findDOMNode(this.refs.banking).classList.add('selected');
    React.findDOMNode(this.refs.investments).classList.remove('selected');
    React.findDOMNode(this.refs.budgets).classList.remove('selected');

    this.props.viewmodel.setState('accounts');

  },

  handleInvestments: function() {

    if (React.findDOMNode(this.refs.investments).classList.contains('selected')) return;

    React.findDOMNode(this.refs.summary).classList.remove('selected');
    React.findDOMNode(this.refs.banking).classList.remove('selected');
    React.findDOMNode(this.refs.investments).classList.add('selected');
    React.findDOMNode(this.refs.budgets).classList.remove('selected');

    this.props.viewmodel.setState('investments');

  },

  handleBudgets: function() {

    if (React.findDOMNode(this.refs.budgets).classList.contains('selected')) return;

    React.findDOMNode(this.refs.summary).classList.remove('selected');
    React.findDOMNode(this.refs.banking).classList.remove('selected');
    React.findDOMNode(this.refs.investments).classList.remove('selected');
    React.findDOMNode(this.refs.budgets).classList.add('selected');

  },

  handleLogout: function() {
    this.props.viewmodel.logout();
  },

  render: function() {
    return (
      React.createElement("nav", {id: "nav"}, 
        React.createElement("h1", {id: "logo"}), 
        React.createElement("ul", {className: "menu"}, 
          React.createElement("li", {className: "menu-option", ref: "summary", onClick: this.handleSummary}, "Summary"), 
          React.createElement("li", {className: "menu-option", ref: "banking", onClick: this.handleBanking}, "Banking"), 
          React.createElement("li", {className: "menu-option", ref: "investments", onClick: this.handleInvestments}, "Investments"), 
          React.createElement("li", {className: "menu-option", ref: "budgets", onClick: this.handleBudgets}, "Budgets")
        ), 
        React.createElement("div", {id: "profile", onClick: this.handleLogout}, 
          React.createElement("div", {className: "badge"}), 
          React.createElement("div", {className: "label"}, "Kevin Kinnebrew")
        )
      )
    )
  }

});

module.exports = NavigationBar;

},{"react":"react"}],38:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div id=\"menu\" ui-view=\"menu\"></div>\n\n<div id=\"content\" ui-view=\"content\"></div>";
},"useData":true});

},{"hbsfy/runtime":52}],39:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h2>Settings</h2>";
},"useData":true});

},{"hbsfy/runtime":52}],40:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div id=\"home-layout\">\n\n    <div id=\"home-content\">\n\n        <div id=\"logo-group\">\n            <div class=\"logo\"></div>\n            <span class=\"title\">Fiscality</span>\n        </div>\n\n        <div id=\"home-form\" ui-view></div>\n\n    </div>\n\n    <footer id=\"footer\">\n\n        <nav id=\"footer-nav\">\n            <ul>\n                <li class=\"footer-nav-title\">SiteMap</li>\n                <li class=\"footer-nav-item\"><a data-link=\"/home\">Home</a></li>\n                <li class=\"footer-nav-item\"><a>About Fiscality</a></li>\n                <li class=\"footer-nav-item\"><a>Terms of Service</a></li>\n                <li class=\"footer-nav-item\"><a>Privacy Policy</a></li>\n                <li class=\"footer-nav-item\"><a>Contact Us</a></li>\n            </ul>\n        </nav>\n\n        <div id=\"footer-brand\">\n            <div class=\"logo-group\">\n                <span class=\"title\">Fiscality</span>\n                <div class=\"logo\"></div>\n            </div>\n            <div class=\"copyright\">Copyright &copy; 2015 Stack Trace LLC. All Rights Reserved.</div>\n        </div>\n\n    </footer>\n\n</div>";
},"useData":true});

},{"hbsfy/runtime":52}],41:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div class=\"form-title\">\n    <h2 class=\"title\">Forgot Password</h2>\n    <div class=\"description\">Need help logging in? Request to reset your password here.</div>\n</div>\n\n<form data-bind=\"submit:forgotPassword(email)\">\n\n    <div class=\"form-group\">\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Enter your email</label>\n            <input class=\"text-field\" type=\"text\" placeholder=\"you@example.com\" data-model=\"email\" spellcheck=\"false\" />\n        </div>\n\n        <input class=\"field-btn submit-btn\" type=\"submit\" value=\"Reset Password\" />\n\n    </div>\n\n</form>";
},"useData":true});

},{"hbsfy/runtime":52}],42:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div class=\"form-title\">\n    <h2 class=\"title\">Sign In</h2>\n    <div class=\"description\">Welcome back. Login to start managing your finances.</div>\n</div>\n\n<form data-bind=\"submit:login(email, password)\">\n\n    <div class=\"form-group\">\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Enter your email</label>\n            <input class=\"text-field\" type=\"email\" placeholder=\"you@example.com\" data-model=\"email\" spellcheck=\"false\" />\n        </div>\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Enter your password</label>\n            <input class=\"text-field\" type=\"password\" placeholder=\"Password\" data-model=\"password\" />\n            <a id=\"forgot-password-link\" class=\"field-subtitle\" data-link=\"/home/forgot\">Forgot your password?</a>\n        </div>\n\n        <input class=\"field-btn submit-btn\" type=\"submit\" value=\"Login\" />\n\n    </div>\n\n</form>\n\n<hr />\n\n<div id=\"register-splash\">\n    <span class=\"message\">Don’t have an account yet?</span>\n    <button class=\"field-btn btn-dark\" data-link=\"home.register\">Register</button>\n</div>\n\n<div class=\"shadow\"></div>";
},"useData":true});

},{"hbsfy/runtime":52}],43:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div class=\"form-title\">\n    <h2 class=\"title\">Join Us</h2>\n    <div class=\"description\">Start managing your finances with Fiscality</div>\n</div>\n\n<form data-bind=\"submit:register(firstName, lastName, email, password)\">\n\n    <div class=\"form-group\">\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Tell us your name</label>\n            <input class=\"text-field field-left\" type=\"text\" placeholder=\"ex. John\" data-model=\"firstName\" spellcheck=\"false\" />\n            <input class=\"text-field field-right\" type=\"text\" placeholder=\"ex. Smith\" data-model=\"lastName\" spellcheck=\"false\" />\n        </div>\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Enter your email</label>\n            <input class=\"text-field\" type=\"text\" placeholder=\"you@example.com\" data-model=\"email\" spellcheck=\"false\" />\n        </div>\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Choose a password</label>\n            <input class=\"text-field\" type=\"password\" placeholder=\"Password\" data-model=\"password\" />\n        </div>\n\n        <input class=\"field-btn submit-btn\" type=\"submit\" value=\"Get Started\" />\n\n    </div>\n\n</form>\n\n<hr />\n\n<div id=\"login-splash\">\n    <span class=\"message\">Already have an account?</span>\n    <button class=\"field-btn btn-dark\" data-link=\"/home/login\">Login Here</button>\n</div>\n\n<div class=\"shadow\"></div>";
},"useData":true});

},{"hbsfy/runtime":52}],44:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div class=\"form-title\">\n    <h2 class=\"title\">Reset Password</h2>\n    <div class=\"description\">Reset your Fiscality password now.</div>\n</div>\n\n<form data-bind=\"submit:resetPassword(password, confirm)\">\n\n    <div class=\"form-group\">\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Enter a new password</label>\n            <input class=\"text-field\" type=\"password\" placeholder=\"Password\" data-model=\"password\" spellcheck=\"false\" />\n        </div>\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Confirm your password</label>\n            <input class=\"text-field\" type=\"password\" placeholder=\"Confirm Password\" data-model=\"confirm\" spellcheck=\"false\" />\n        </div>\n\n        <input class=\"field-btn submit-btn\" type=\"submit\" value=\"Reset Password\" />\n\n    </div>\n\n</form>";
},"useData":true});

},{"hbsfy/runtime":52}],45:[function(require,module,exports){
(function (global){
"use strict";
/*globals Handlebars: true */
var base = require("./handlebars/base");

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)
var SafeString = require("./handlebars/safe-string")["default"];
var Exception = require("./handlebars/exception")["default"];
var Utils = require("./handlebars/utils");
var runtime = require("./handlebars/runtime");

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
var create = function() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = SafeString;
  hb.Exception = Exception;
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function(spec) {
    return runtime.template(spec, hb);
  };

  return hb;
};

var Handlebars = create();
Handlebars.create = create;

/*jshint -W040 */
/* istanbul ignore next */
var root = typeof global !== 'undefined' ? global : window,
    $Handlebars = root.Handlebars;
/* istanbul ignore next */
Handlebars.noConflict = function() {
  if (root.Handlebars === Handlebars) {
    root.Handlebars = $Handlebars;
  }
};

Handlebars['default'] = Handlebars;

exports["default"] = Handlebars;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./handlebars/base":46,"./handlebars/exception":47,"./handlebars/runtime":48,"./handlebars/safe-string":49,"./handlebars/utils":50}],46:[function(require,module,exports){
"use strict";
var Utils = require("./utils");
var Exception = require("./exception")["default"];

var VERSION = "3.0.0";
exports.VERSION = VERSION;var COMPILER_REVISION = 6;
exports.COMPILER_REVISION = COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1'
};
exports.REVISION_CHANGES = REVISION_CHANGES;
var isArray = Utils.isArray,
    isFunction = Utils.isFunction,
    toString = Utils.toString,
    objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials) {
  this.helpers = helpers || {};
  this.partials = partials || {};

  registerDefaultHelpers(this);
}

exports.HandlebarsEnvironment = HandlebarsEnvironment;HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: logger,
  log: log,

  registerHelper: function(name, fn) {
    if (toString.call(name) === objectType) {
      if (fn) { throw new Exception('Arg not supported with multiple helpers'); }
      Utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function(name) {
    delete this.helpers[name];
  },

  registerPartial: function(name, partial) {
    if (toString.call(name) === objectType) {
      Utils.extend(this.partials,  name);
    } else {
      if (typeof partial === 'undefined') {
        throw new Exception('Attempting to register a partial as undefined');
      }
      this.partials[name] = partial;
    }
  },
  unregisterPartial: function(name) {
    delete this.partials[name];
  }
};

function registerDefaultHelpers(instance) {
  instance.registerHelper('helperMissing', function(/* [args, ]options */) {
    if(arguments.length === 1) {
      // A missing field in a {{foo}} constuct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new Exception("Missing helper: '" + arguments[arguments.length-1].name + "'");
    }
  });

  instance.registerHelper('blockHelperMissing', function(context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if(context === true) {
      return fn(this);
    } else if(context === false || context == null) {
      return inverse(this);
    } else if (isArray(context)) {
      if(context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = createFrame(options.data);
        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
        options = {data: data};
      }

      return fn(context, options);
    }
  });

  instance.registerHelper('each', function(context, options) {
    if (!options) {
      throw new Exception('Must pass iterator to #each');
    }

    var fn = options.fn, inverse = options.inverse;
    var i = 0, ret = "", data;

    var contextPath;
    if (options.data && options.ids) {
      contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (isFunction(context)) { context = context.call(this); }

    if (options.data) {
      data = createFrame(options.data);
    }

    function execIteration(key, i, last) {
      if (data) {
        data.key = key;
        data.index = i;
        data.first = i === 0;
        data.last  = !!last;

        if (contextPath) {
          data.contextPath = contextPath + key;
        }
      }

      ret = ret + fn(context[key], {
        data: data,
        blockParams: Utils.blockParams([context[key], key], [contextPath + key, null])
      });
    }

    if(context && typeof context === 'object') {
      if (isArray(context)) {
        for(var j = context.length; i<j; i++) {
          execIteration(i, i, i === context.length-1);
        }
      } else {
        var priorKey;

        for(var key in context) {
          if(context.hasOwnProperty(key)) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array. 
            if (priorKey) {
              execIteration(priorKey, i-1);
            }
            priorKey = key;
            i++;
          }
        }
        if (priorKey) {
          execIteration(priorKey, i-1, true);
        }
      }
    }

    if(i === 0){
      ret = inverse(this);
    }

    return ret;
  });

  instance.registerHelper('if', function(conditional, options) {
    if (isFunction(conditional)) { conditional = conditional.call(this); }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if ((!options.hash.includeZero && !conditional) || Utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function(conditional, options) {
    return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});
  });

  instance.registerHelper('with', function(context, options) {
    if (isFunction(context)) { context = context.call(this); }

    var fn = options.fn;

    if (!Utils.isEmpty(context)) {
      if (options.data && options.ids) {
        var data = createFrame(options.data);
        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
        options = {data:data};
      }

      return fn(context, options);
    } else {
      return options.inverse(this);
    }
  });

  instance.registerHelper('log', function(message, options) {
    var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
    instance.log(level, message);
  });

  instance.registerHelper('lookup', function(obj, field) {
    return obj && obj[field];
  });
}

var logger = {
  methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },

  // State enum
  DEBUG: 0,
  INFO: 1,
  WARN: 2,
  ERROR: 3,
  level: 1,

  // Can be overridden in the host environment
  log: function(level, message) {
    if (typeof console !== 'undefined' && logger.level <= level) {
      var method = logger.methodMap[level];
      (console[method] || console.log).call(console, message);
    }
  }
};
exports.logger = logger;
var log = logger.log;
exports.log = log;
var createFrame = function(object) {
  var frame = Utils.extend({}, object);
  frame._parent = object;
  return frame;
};
exports.createFrame = createFrame;
},{"./exception":47,"./utils":50}],47:[function(require,module,exports){
"use strict";

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var loc = node && node.loc,
      line,
      column;
  if (loc) {
    line = loc.start.line;
    column = loc.start.column;

    message += ' - ' + line + ':' + column;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  if (loc) {
    this.lineNumber = line;
    this.column = column;
  }
}

Exception.prototype = new Error();

exports["default"] = Exception;
},{}],48:[function(require,module,exports){
"use strict";
var Utils = require("./utils");
var Exception = require("./exception")["default"];
var COMPILER_REVISION = require("./base").COMPILER_REVISION;
var REVISION_CHANGES = require("./base").REVISION_CHANGES;
var createFrame = require("./base").createFrame;

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = COMPILER_REVISION;

  if (compilerRevision !== currentRevision) {
    if (compilerRevision < currentRevision) {
      var runtimeVersions = REVISION_CHANGES[currentRevision],
          compilerVersions = REVISION_CHANGES[compilerRevision];
      throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. "+
            "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").");
    } else {
      // Use the embedded version info since the runtime doesn't know about this revision yet
      throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. "+
            "Please update your runtime to a newer version ("+compilerInfo[1]+").");
    }
  }
}

exports.checkRevision = checkRevision;// TODO: Remove this line and break up compilePartial

function template(templateSpec, env) {
  /* istanbul ignore next */
  if (!env) {
    throw new Exception("No environment passed to template");
  }
  if (!templateSpec || !templateSpec.main) {
    throw new Exception('Unknown template object: ' + typeof templateSpec);
  }

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as psuedo-supported APIs.
  env.VM.checkRevision(templateSpec.compiler);

  var invokePartialWrapper = function(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);
    }

    partial = env.VM.resolvePartial.call(this, partial, context, options);
    var result = env.VM.invokePartial.call(this, partial, context, options);

    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, options);
    }
    if (result != null) {
      if (options.indent) {
        var lines = result.split('\n');
        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = options.indent + lines[i];
        }
        result = lines.join('\n');
      }
      return result;
    } else {
      throw new Exception("The partial " + options.name + " could not be compiled when running in runtime-only mode");
    }
  };

  // Just add water
  var container = {
    strict: function(obj, name) {
      if (!(name in obj)) {
        throw new Exception('"' + name + '" not defined in ' + obj);
      }
      return obj[name];
    },
    lookup: function(depths, name) {
      var len = depths.length;
      for (var i = 0; i < len; i++) {
        if (depths[i] && depths[i][name] != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },

    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,

    fn: function(i) {
      return templateSpec[i];
    },

    programs: [],
    program: function(i, data, declaredBlockParams, blockParams, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);
      if (data || depths || blockParams || declaredBlockParams) {
        programWrapper = program(this, i, fn, data, declaredBlockParams, blockParams, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = program(this, i, fn);
      }
      return programWrapper;
    },

    data: function(data, depth) {
      while (data && depth--) {
        data = data._parent;
      }
      return data;
    },
    merge: function(param, common) {
      var ret = param || common;

      if (param && common && (param !== common)) {
        ret = Utils.extend({}, common, param);
      }

      return ret;
    },

    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  var ret = function(context, options) {
    options = options || {};
    var data = options.data;

    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths,
        blockParams = templateSpec.useBlockParams ? [] : undefined;
    if (templateSpec.useDepths) {
      depths = options.depths ? [context].concat(options.depths) : [context];
    }

    return templateSpec.main.call(container, context, container.helpers, container.partials, data, blockParams, depths);
  };
  ret.isTop = true;

  ret._setup = function(options) {
    if (!options.partial) {
      container.helpers = container.merge(options.helpers, env.helpers);

      if (templateSpec.usePartial) {
        container.partials = container.merge(options.partials, env.partials);
      }
    } else {
      container.helpers = options.helpers;
      container.partials = options.partials;
    }
  };

  ret._child = function(i, data, blockParams, depths) {
    if (templateSpec.useBlockParams && !blockParams) {
      throw new Exception('must pass block params');
    }
    if (templateSpec.useDepths && !depths) {
      throw new Exception('must pass parent depths');
    }

    return program(container, i, templateSpec[i], data, 0, blockParams, depths);
  };
  return ret;
}

exports.template = template;function program(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  var prog = function(context, options) {
    options = options || {};

    return fn.call(container,
        context,
        container.helpers, container.partials,
        options.data || data,
        blockParams && [options.blockParams].concat(blockParams),
        depths && [context].concat(depths));
  };
  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}

exports.program = program;function resolvePartial(partial, context, options) {
  if (!partial) {
    partial = options.partials[options.name];
  } else if (!partial.call && !options.name) {
    // This is a dynamic partial that returned a string
    options.name = partial;
    partial = options.partials[partial];
  }
  return partial;
}

exports.resolvePartial = resolvePartial;function invokePartial(partial, context, options) {
  options.partial = true;

  if(partial === undefined) {
    throw new Exception("The partial " + options.name + " could not be found");
  } else if(partial instanceof Function) {
    return partial(context, options);
  }
}

exports.invokePartial = invokePartial;function noop() { return ""; }

exports.noop = noop;function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? createFrame(data) : {};
    data.root = context;
  }
  return data;
}
},{"./base":46,"./exception":47,"./utils":50}],49:[function(require,module,exports){
"use strict";
// Build out our basic SafeString type
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
  return "" + this.string;
};

exports["default"] = SafeString;
},{}],50:[function(require,module,exports){
"use strict";
/*jshint -W004 */
var escape = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#x27;",
  "`": "&#x60;"
};

var badChars = /[&<>"'`]/g;
var possible = /[&<>"'`]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj /* , ...source */) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

exports.extend = extend;var toString = Object.prototype.toString;
exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
var isFunction = function(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
/* istanbul ignore next */
if (isFunction(/x/)) {
  isFunction = function(value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
var isFunction;
exports.isFunction = isFunction;
/* istanbul ignore next */
var isArray = Array.isArray || function(value) {
  return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;
};
exports.isArray = isArray;
// Older IE versions do not directly support indexOf so we must implement our own, sadly.
function indexOf(array, value) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}

exports.indexOf = indexOf;
function escapeExpression(string) {
  // don't escape SafeStrings, since they're already safe
  if (string && string.toHTML) {
    return string.toHTML();
  } else if (string == null) {
    return "";
  } else if (!string) {
    return string + '';
  }

  // Force a string conversion as this will be done by the append regardless and
  // the regex test will do this transparently behind the scenes, causing issues if
  // an object's to string has escaped characters in it.
  string = "" + string;

  if(!possible.test(string)) { return string; }
  return string.replace(badChars, escapeChar);
}

exports.escapeExpression = escapeExpression;function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

exports.isEmpty = isEmpty;function blockParams(params, ids) {
  params.path = ids;
  return params;
}

exports.blockParams = blockParams;function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}

exports.appendContextPath = appendContextPath;
},{}],51:[function(require,module,exports){
// Create a simple path alias to allow browserify to resolve
// the runtime on a supported path.
module.exports = require('./dist/cjs/handlebars.runtime').default;

},{"./dist/cjs/handlebars.runtime":45}],52:[function(require,module,exports){
module.exports = require("handlebars/runtime")["default"];

},{"handlebars/runtime":51}]},{},[1])


//# sourceMappingURL=app.min.js.map