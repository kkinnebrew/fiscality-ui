(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var $, HandlebarsCompiler, Router, cache, router;

$ = window.jQuery = require('jquery');

require('jquery-circle-progress');

require('datejs');

Router = require('./common1/router.coffee');

cache = require('./common/cache');

HandlebarsCompiler = require('hbsfy/runtime');

HandlebarsCompiler.registerHelper('currency', function(d, sign) {
  sign = typeof sign === 'string' ? sign : '';
  if (d === void 0 || d === null) {
    return '';
  }
  if (d >= 0) {
    return sign + numberWithCommas(d.toFixed(2));
  } else {
    return '-' + sign + numberWithCommas(Math.abs(d).toFixed(2));
  }
});

router = new Router($('body'));

window.App = router;

router.register('home', {
  redirect: '/home/login',
  template: require('../templates1/home.hbs')
});

router.register('home.login', {
  template: require('../templates1/home/login.hbs'),
  viewmodel: require('./viewmodels1/home/login.coffee')
});

router.register('home.register', {
  template: require('../templates1/home/register.hbs'),
  viewmodel: require('./viewmodels1/home/register.coffee')
});

router.register('home.forgot', {
  template: require('../templates1/home/forgot.hbs'),
  viewmodel: require('./viewmodels1/home/forgot.coffee')
});

router.register('home.reset', {
  template: require('../templates1/home/reset.hbs'),
  viewmodel: require('./viewmodels1/home/reset.coffee')
});

router.register('app', {
  redirect: '/app/accounts',
  views: {
    'default': {
      primary: true,
      template: require('../templates1/app.hbs')
    },
    'menu@default': {
      template: require('../templates1/app/menu.hbs'),
      view: require('./views1/app/menu.coffee'),
      viewmodel: require('./viewmodels1/app/menu.coffee')
    }
  }
});

router.register('app.accounts', {
  presenter: require('./presenters1/app/accounts/accounts.coffee'),
  params: ['accountId'],
  views: {
    'content': {
      template: require('../templates1/app/accounts.hbs')
    },
    'chart@content': {
      present: 'chart',
      template: require('../templates1/app/accounts/chart.hbs'),
      viewmodel: require('./viewmodels1/app/accounts/chart.coffee')
    },
    'transactions@content': {
      present: 'transactions',
      template: require('../templates1/app/accounts/transactions.hbs'),
      viewmodel: require('./viewmodels1/app/accounts/transactions.coffee')
    },
    'accounts@global': {
      present: 'accounts',
      template: require('../templates1/app/accounts/overlay.hbs'),
      view: require('./views1/app/accounts/overlay.coffee'),
      viewmodel: require('./viewmodels1/app/accounts/overlay.coffee')
    }
  }
});

router.register('app.investments', {
  presenter: require('./presenters1/app/investments/investments.coffee'),
  params: ['portfolioId'],
  views: {
    'content': {
      primary: true,
      present: 'investments',
      template: require('../templates1/app/investments.hbs'),
      viewmodel: require('./viewmodels1/app/investments/investments.coffee')
    },
    'portfolios@global': {
      present: 'portfolios',
      template: require('../templates1/app/investments/overlay.hbs'),
      viewmodel: require('./viewmodels1/app/investments/overlay.coffee')
    }
  }
});

router.register('app.investments.positions', {
  views: {
    'investments': {
      template: require('../templates1/app/investments/positions.hbs')
    },
    'chart@investments': {
      template: require('../templates1/app/investments/positions/chart.hbs'),
      viewmodel: require('./viewmodels1/app/investments/positions/chart.coffee')
    },
    'positions@investments': {
      template: require('../templates1/app/investments/positions/positions.hbs'),
      viewmodel: require('./viewmodels1/app/investments/positions/positions.coffee')
    }
  }
});

router.register('app.investments.activity', {
  views: {
    'investments': {
      template: require('../templates1/app/investments/activity.hbs')
    }
  }
});

router.register('app.investments.performance', {
  views: {
    'investments': {
      template: require('../templates1/app/investments/performance.hbs')
    }
  }
});

router.register('app.investments.allocation', {
  views: {
    'investments': {
      template: require('../templates1/app/investments/allocation.hbs')
    }
  }
});

router.register('app.settings', {
  views: {
    'content': {
      template: require('../templates1/app/settings.hbs')
    }
  }
});

$(document).ready(function() {
  return router.listen();
});



},{"../templates1/app.hbs":29,"../templates1/app/accounts.hbs":30,"../templates1/app/accounts/chart.hbs":31,"../templates1/app/accounts/overlay.hbs":32,"../templates1/app/accounts/transactions.hbs":33,"../templates1/app/investments.hbs":34,"../templates1/app/investments/activity.hbs":35,"../templates1/app/investments/allocation.hbs":36,"../templates1/app/investments/overlay.hbs":37,"../templates1/app/investments/performance.hbs":38,"../templates1/app/investments/positions.hbs":39,"../templates1/app/investments/positions/chart.hbs":40,"../templates1/app/investments/positions/positions.hbs":41,"../templates1/app/menu.hbs":42,"../templates1/app/settings.hbs":43,"../templates1/home.hbs":44,"../templates1/home/forgot.hbs":45,"../templates1/home/login.hbs":46,"../templates1/home/register.hbs":47,"../templates1/home/reset.hbs":48,"./common/cache":2,"./common1/router.coffee":7,"./presenters1/app/accounts/accounts.coffee":10,"./presenters1/app/investments/investments.coffee":11,"./viewmodels1/app/accounts/chart.coffee":15,"./viewmodels1/app/accounts/overlay.coffee":16,"./viewmodels1/app/accounts/transactions.coffee":17,"./viewmodels1/app/investments/investments.coffee":18,"./viewmodels1/app/investments/overlay.coffee":19,"./viewmodels1/app/investments/positions/chart.coffee":20,"./viewmodels1/app/investments/positions/positions.coffee":21,"./viewmodels1/app/menu.coffee":22,"./viewmodels1/home/forgot.coffee":23,"./viewmodels1/home/login.coffee":24,"./viewmodels1/home/register.coffee":25,"./viewmodels1/home/reset.coffee":26,"./views1/app/accounts/overlay.coffee":27,"./views1/app/menu.coffee":28,"datejs":"datejs","hbsfy/runtime":56,"jquery":"jquery","jquery-circle-progress":"jquery-circle-progress"}],2:[function(require,module,exports){
var cache = {};

module.exports = {

  hasPersistentItem: function(key) {

    var original = localStorage.getItem('cache:' + key);

    return !(original === null || original === undefined);

  },

  setPersistentItem: function(key, value) {

    if (value === null || value === undefined) {
      return this.clearPersistentItem(key);
    }

    var original = localStorage.getItem('cache:' + key);

    if (!original) {

      var keys = localStorage.getItem('persistentKeys');

      if (keys) {
        keys += ',' + key;
      } else {
        keys = key;
      }

      localStorage.setItem('persistentKeys', keys);

    }

    localStorage.setItem('cache:' + key, value);

  },

  getPersistentItem: function(key) {

    return localStorage.getItem('cache:' + key) || null;

  },

  clearPersistentItem: function(key) {

    var keys = localStorage.getItem('persistentKeys');

    if (keys) {

      var keysArray = keys.replace(/\s/g, '').split(',') || [];
      var finalArray = [];

      for (var i = 0; i < keysArray.length; i++) {
        if (keysArray[i] !== key) {
          finalArray.push(keysArray[i]);
        }
      }

      localStorage.setItem('persistentKeys', finalArray);

    }

    localStorage.removeItem('cache:' + key);

  },

  clearPersistentItems: function() {

    var keys = localStorage.getItem('persistentKeys');

    if (keys) {

      var keysArray = keys.replace(/\s/g, '').split(',') || [];

      for (var i = 0; i < keysArray.length; i++) {
        localStorage.removeItem('cache:' + keysArray[i]);
      }

      localStorage.removeItem('persistentKeys');

    }

  },

  hasItem: function(key) {
    return cache.hasOwnProperty(key);
  },

  setItem: function(key, value) {

    if (value === null || value === undefined) {
      return this.clearItem(key);
    }

    cache[key] = value;

  },

  getItem: function(key) {
    return cache.hasOwnProperty(key) ? cache[key] : null;
  },

  clearItem: function(key) {
    cache.hasOwnProperty(key) ? delete cache[key] : null;
  },

  clear: function() {
    cache = {};
  },

  purge: function() {
    this.clear();
    this.clearPersistentItems();
  }

};
},{}],3:[function(require,module,exports){
var $ = require('jquery');

function Service(config, cache) {
  this.config = config || {};
  this.cache = cache || null;
}

Service.prototype.headers = function(url) {
  return {};
};

Service.prototype.cacheGet = function(url, data) {
  return this.ajax('GET', url, data, true);
};

Service.prototype.get = function(url, data) {
  return this.ajax('GET', url, data);
};

Service.prototype.cachePost = function(url, data) {
  return this.ajax('POST', url, data, true);
};

Service.prototype.post = function(url, data) {
  return this.ajax('POST', url, data);
};

Service.prototype.ajax = function(method, url, data, cache) {

  var that = this;
  var deferred = $.Deferred();

  var cacheKey = method + ':' + url + ':' + JSON.stringify(data);

  if (cache && !this.cache) {
    console.error('No cache defined: ' + url);
    cache = false;
  }

  if (cache && this.cache.hasItem(cacheKey)) {
    setTimeout(function() {
      deferred.resolve(that.cache.getItem(cacheKey));
    }, 0);
    return deferred;
  }

  var requestUrl = (this.config.hasOwnProperty('baseUrl') ? this.config.baseUrl : '') + url;

  //console.log('Request: ' + requestUrl, 'Headers: ' + JSON.stringify(this.headers(url)));

  $.ajax({
    type: method,
    url: requestUrl,
    data: data ? JSON.stringify(data) : {},
    contentType: (this.config.hasOwnProperty('contentType') ? this.config.contentType : 'application/json;charset=UTF-8'),
    headers: this.headers(url),
    success: function(result) {
      if (cache) {
        that.cache.setItem(cacheKey, result);
      }
      deferred.resolve(result);
    },
    error: function(xhr) {
      that.onError(xhr.status, requestUrl);
      deferred.reject();
    }
  });

  return deferred;

};

Service.prototype.onError = function(url, status) {
  console.error('Status ' + status + ': ' + url);
};

module.exports = Service;
},{"jquery":"jquery"}],4:[function(require,module,exports){
var $ = require('jquery');

function View(template, viewModel) {

  /**
   * stores a copy of the template provided to the view
   * @param {Function|string}
   */
  this.template = template;

  /**
   * holds a reference to where the view is rendered into the DOM
   * @type {jQuery}
   */
  this.$el = null;

  /**
   * whether or not the view has been rendered
   * @type {boolean}
   */
  this.rendered = false;

  /**
   * stores the view model if one is defined
   * @type {ViewModel}
   */
  this.viewModel = viewModel || null;

  /**
   * call setup
   */
  this.setup();

}

/**
 * override to do something at the end of the view's constructor
 * @method setup
 */
View.prototype.setup = function() {

};

/**
 * renders the view directly into a given element
 * @method render
 * @param $el
 */
View.prototype.render = function($el) {

  // check if rendered

  if (this.rendered) {
    return console.warn('View is already rendered');
  }

  // store reference to DOM

  this.$el = $el;

  // render the template

  var html = typeof this.template === 'function' ? this.template(this.viewModel || {}) : this.template;

  this.$el.html(html);

  this.rendered = true;

  // bind event handlers TODO: handle all propagating events

  this.$el.find('[ui-view]').on('click', function(e) {
    e.stopPropagation();
  });

  this.preprocess();

  this.bind();

  // bind view model refresh

  if (this.viewModel) {

    this.viewModel.on('refresh', $.proxy(this.refresh, this));

  }

};

View.prototype.refresh = function() {

  if (!this.rendered) {
    return console.warn('Cannot refreshed unrendered view');
  }

  var that = this;

  // unbind event handlers

  this.unbind();

  // remove preprocess handlers

  this.postprocess();

  // remove propagation stops

  this.$el.find('[ui-view]').off('click');

  // store references to subviews

  var $subviews = this.$el.find('[ui-view]');

  // remove views

  this.$el.empty();

  // rerender view

  var html = typeof this.template === 'function' ? this.template(this.viewModel || {}) : this.template;

  this.$el.html(html);

  // preprocess template

  this.preprocess();

  // bind events

  this.bind();

  // repopulate subviews

  $subviews.each(function() {

    var name = $(this).attr('ui-view');

    that.$el.find('[ui-view="' + name + '"]').replaceWith(this);

  });

  // bind prop stops

  this.$el.find('[ui-view]').on('click', function(e) {
    e.stopPropagation();
  });

};

View.prototype.sync = function() {

  var that = this;

  this.$el.find('[data-model]').each(function() {

    var model = $(this).attr('data-model');
    var tagName = $(this).prop('tagName').toLowerCase();

    if (tagName === 'input' || tagName === 'textarea' || tagName === 'select') {
      that.viewModel[model] = $(this).val();
    }

  });

};

View.prototype.preprocess = function() {

  var that = this;

  this.$el.find('[data-model]').each(function() {

    var model = $(this).attr('data-model');
    var tagName = $(this).prop('tagName').toLowerCase();

    if (tagName === 'input' || tagName === 'textarea' || tagName === 'select') {
      that.viewModel[model] = $(this).val();
    }

    if (tagName === 'input' || tagName === 'textarea') {
      $(this).on('keyup', function() {
        that.viewModel[model] = $(this).val();
      });
      $(this).on('blur', function() {
        that.viewModel[model] = $(this).val();
      });
    }

    if (tagName === 'select') {
      $(this).on('change', function() {
        that.viewModel[model] = $(this).val();
      });
      $(this).on('blur', function() {
        that.viewModel[model] = $(this).val();
      });
    }

  });

  this.$el.find('[data-bind]').each(function() {

    var bind = $(this).attr('data-bind');

    var parts = bind.match(/(.+):(.+)\((.*)\)/);
    var event = parts[1];
    var method = parts[2];

    var args = parts[3] ? parts[3].replace(/\s/g, '').split(',') : [];

    if (that.viewModel) {
      $(this).on(event, function (e) {
        e.preventDefault(); // TODO temporary
        that.sync();
        that.viewModel.execute(method, args);
      });

    }

  });

  this.$el.find('[data-link]').each(function() {

    $(this).on('click', function() {
      var link = $(this).attr('data-link');
      console.log('Redirect to: ' + link);
      location.hash = '#' + link;
    });

  });

};

View.prototype.postprocess = function() {

  this.$el.find('[data-link]').each(function() {
    $(this).off('click');
  });

  this.$el.find('[data-bind]').each(function() {

    var bind = $(this).attr('data-bind');

    var parts = bind.match(/(.+):(.+)\((.*)\)/);
    var event = parts[1];

    $(this).off(event);

  });

  this.$el.find('[data-model]').each(function() {

    var model = $(this).attr('data-model');
    var tagName = $(this).prop('tagName').toLowerCase();

    if (tagName === 'input' || tagName === 'textarea') {
      $(this).off('keyup');
      $(this).off('blur');
    }

    if (tagName === 'select') {
      $(this).off('change');
      $(this).off('blur');
    }

  });

};

/**
 * method called after rendering when events should be bound
 * @method bind
 */
View.prototype.bind = function() {

};

/**
 * method called prior to destroying all DOM references, when events should be unbound
 * @method unbind
 */
View.prototype.unbind = function() {

};

/**
 * destroys the currently rendered view and returns it to its unrendered state
 * @method destroy
 */
View.prototype.destroy = function() {

  if (!this.rendered) {
    return console.warn('Unrendered view cannot be destroyed');
  }

  this.$el.find('[ui-view]').off('click');

  this.unbind();

  this.$el.empty();

  this.$el = null;

  this.rendered = false;

};

/**
 * returns a view reference to a subview
 * @method getSubview
 * @param name
 * @returns {*}
 */
View.prototype.getSubview = function(name) {

  var subview = null;

  if (name) {
    subview = this.$el.find('[ui-view="' + name + '"]');
  } else {
    subview = this.$el.find('[ui-view]');
  }

  if (subview.length === 0) {
    console.error('Subview' + (name ? ' with name "' + name  + '"' : '')  + ' not found');
  }

  return subview;

};


View.prototype.renderSubview = function(name, view) {

  var $subview = this.getSubview(name);

  view.render($subview);

};

module.exports = View;
},{"jquery":"jquery"}],5:[function(require,module,exports){
module.exports = {
  info: function(message) {
    return console.log('[INFO] ' + message);
  },
  debug: function(message) {
    return console.debug('[DEBUG] ' + message);
  },
  warn: function(message) {
    return console.warn('[WARN] ' + message);
  },
  error: function(message) {
    return console.error('[ERROR] ' + message);
  }
};



},{}],6:[function(require,module,exports){
var Presenter, _;

_ = require('underscore');

Presenter = (function() {
  function Presenter() {}

  Presenter.prototype.load = function() {};

  Presenter.prototype.update = function() {};

  Presenter.prototype.setParams = function(params) {
    return _.each(params, (function(_this) {
      return function(value, name) {
        if (_this.hasOwnProperty(name)) {
          return _this[name] = value;
        }
      };
    })(this));
  };

  Presenter.prototype.bind = function() {};

  Presenter.prototype.unbind = function() {};

  Presenter.prototype.destroy = function() {};

  return Presenter;

})();

module.exports = Presenter;



},{"underscore":"underscore"}],7:[function(require,module,exports){
var $, Log, Router, View, ViewModel, _,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$ = require('jquery');

_ = require('underscore');

Log = require('./log.coffee');

View = require('./view.coffee');

ViewModel = require('./viewmodel.coffee');

Router = (function() {
  function Router($root) {
    this.$root = $root;
    this.render = bind(this.render, this);
    this.stack = [];
    this.config = {};
    this.defaultState = null;
    this.globals = {};
    this.state = null;
    this.params = {};
  }

  Router.prototype.register = function(name, conf) {
    var config, last, part, parts;
    parts = name.split('.');
    while (parts.length) {
      part = parts.shift();
      config = {};
      if (conf.template) {
        config.views = {
          'default': {
            primary: true,
            template: conf.template
          }
        };
        if (conf.hasOwnProperty('view')) {
          config.views['default'].view = conf.view;
        }
        if (conf.hasOwnProperty('viewmodel')) {
          config.views['default'].viewmodel = conf.viewmodel;
        }
        if (conf.hasOwnProperty('redirect')) {
          config.redirect = conf.redirect;
        }
        if (conf.hasOwnProperty('params')) {
          config.params = conf.params;
        }
      } else {
        config = conf;
      }
      if (!last) {
        last = this.config;
      }
      if (!parts.length) {
        if (last.hasOwnProperty(part)) {
          Log.warn('Overriding existing route "' + name + '"');
        }
        last[part] = {
          config: config,
          children: {}
        };
      } else {
        if (!last.hasOwnProperty(part)) {
          Log.warn('Parent route not defined "' + name + '"');
        }
        last = last[part].children;
      }
    }
    return Log.debug('Registering state "' + name + '"');
  };

  Router.prototype.getConfig = function(name) {
    var last, part, parts;
    parts = name.split('.');
    while (parts.length) {
      part = parts.shift();
      if (!last) {
        last = this.config;
      }
      if (!last.hasOwnProperty(part)) {
        return Log.error('State "' + name + '" not defined');
      }
      if (!parts.length) {
        return last[part].config;
      } else {
        last = last[part].children;
      }
    }
  };

  Router.prototype.replaceState = function(state) {};

  Router.prototype.goto = function(state) {
    return location.hash = '#' + state;
  };

  Router.prototype.listen = function() {
    $(window).on('hashchange', this.render);
    this.render();
    return Log.info('Listening for hash changes');
  };

  Router.prototype.render = function() {
    var config, depth, i, j, k, len, param, params, part, parts, redirect, ref, ref1, ref2, state;
    parts = location.hash.replace(/(^#\/?)|(\/$)/g, '').split('/');
    if (parts.length === 1 && parts[0] === '') {
      if (this.defaultState) {
        Log.info('Redirecting to default state');
        return location.hash = '#/' + this.defaultState;
      } else {
        return Log.error('No default state defined');
      }
    }
    depth = 0;
    params = {};
    _.each(this.globals, (function(_this) {
      return function(node, name) {
        if (node.$el) {
          return _this.destroyGlobal(name);
        }
      };
    })(this));
    while (parts.length) {
      part = parts.shift();
      state = state ? state + '.' + part : part;
      config = this.getConfig(state);
      if (!config) {
        return Log.error('State not found for invalid route "' + state + '"');
      }
      if (config.params) {
        if (config.params) {
          ref = config.params;
          for (j = 0, len = ref.length; j < len; j++) {
            param = ref[j];
            params[param] = parts.shift();
          }
        }
      }
      if (!this.stack[depth] || this.stack[depth].state !== state) {
        this.renderState(state, config, depth, params);
      } else if (this.stack[depth] && this.stack[depth].state === state) {
        _.each(this.stack[depth].views, function(node) {
          if (node.viewmodel) {
            return node.viewmodel.setParams(params);
          }
        });
        if (this.stack[depth].presenter) {
          this.stack[depth].presenter.setParams(params);
        }
        if (this.stack[depth].presenter) {
          this.stack[depth].presenter.update();
        }
      }
      depth++;
    }
    this.params = params;
    if (config.redirect) {
      redirect = config.redirect.replace(/(^#?\/?)|(\/$)/g, '');
      Log.info('Redirecting to path "' + redirect + '"');
      return location.hash = '#/' + redirect;
    }
    if (this.stack.length > depth) {
      for (i = k = ref1 = depth, ref2 = this.stack.length; k < ref2; i = k += 1) {
        this.destroyState(i);
      }
      return this.stack.splice(depth);
    }
  };

  Router.prototype.renderState = function(state, config, depth, params) {
    var node;
    if (this.stack[depth]) {
      this.destroyState(depth);
    }
    node = {
      state: state,
      views: {}
    };
    _.each(config.views, (function(_this) {
      return function(conf, name) {
        var $el, primary, prior, subnode;
        if (!name.match(/@/)) {
          subnode = {};
          if (conf.primary === true) {
            subnode.primary = true;
          }
          if (typeof conf.viewmodel === 'function') {
            subnode.viewmodel = new conf.viewmodel(params);
            subnode.viewmodel.router = _this;
          } else {
            subnode.viewmodel = new ViewModel(params);
            subnode.viewmodel.router = _this;
          }
          if (typeof conf.view === 'function') {
            subnode.view = new conf.view(conf.template, subnode.viewmodel || void 0);
          } else {
            subnode.view = new View(conf.template, subnode.viewmodel || void 0);
          }
          if (depth === 0) {
            $el = _this.$root.find(name && name !== 'default' ? '[ui-view="' + name + '"]' : '[ui-view]');
            subnode.view.render($el);
          } else {
            prior = _this.stack[depth - 1];
            primary = _.find(prior.views, function(view) {
              return view.hasOwnProperty('primary') && view.primary === true;
            });
            if (primary) {
              primary.view.renderSubview(name, subnode.view);
            } else {
              Log.warn('No main view found for partial state: ' + state + ' -> ' + name);
            }
          }
          node.views[name] = subnode;
          return Log.debug('Rendering relative state: ' + state + ' -> ' + name);
        }
      };
    })(this));
    this.stack[depth] = node;
    _.each(config.views, (function(_this) {
      return function(conf, name) {
        var context, current, parts, subnode, target;
        if (name.match(/@/)) {
          subnode = {};
          if (typeof conf.viewmodel === 'function') {
            subnode.viewmodel = new conf.viewmodel(params);
            subnode.viewmodel.router = _this;
          } else {
            subnode.viewmodel = new ViewModel(params);
            subnode.viewmodel.router = _this;
          }
          if (typeof conf.view === 'function') {
            subnode.view = new conf.view(conf.template, subnode.viewmodel || void 0);
          } else {
            subnode.view = new View(conf.template, subnode.viewmodel || void 0);
          }
          parts = name.split('@');
          target = parts[0];
          context = parts[1];
          current = _this.stack[depth];
          if (context !== 'global') {
            if (!current.views.hasOwnProperty(context)) {
              return Log.error('Absolute view context "' + context + '" not defined');
            }
            current.views[context].view.renderSubview(target, subnode.view);
            Log.debug('Rendering absolute state: ' + state + ' -> ' + name);
          } else if (config.presenter) {
            _this.globals[target] = subnode;
          }
          return node.views[target] = subnode;
        }
      };
    })(this));
    if (config.presenter) {
      node.presenter = new config.presenter(params);
      node.presenter.router = this;
      return node.presenter.load();
    }
  };

  Router.prototype.destroyState = function(depth) {
    var item, j, len, node, ref;
    node = this.stack[depth];
    ref = node.views;
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      item.destroy();
    }
    if (node.presenter) {
      node.presenter.destroy();
    }
    return Log.debug('Destroying state: ' + this.stack[depth].state);
  };

  Router.prototype.renderGlobal = function(name) {
    var $global, node;
    if (!this.globals.hasOwnProperty(name)) {
      return;
    }
    Log.debug('Rendering global state "' + name + '"');
    $global = $('<div data-global="' + name + '"></div>');
    this.$root.append($global);
    node = this.globals[name];
    node.view.render($global);
    return node.$el = $global;
  };

  Router.prototype.destroyGlobal = function(name) {
    var node;
    if (!this.globals.hasOwnProperty(name)) {
      return;
    }
    Log.debug('Destroying global state "' + name + '"');
    node = this.globals[name];
    node.view.destroy();
    node.$el.remove();
    return delete node.$el;
  };

  return Router;

})();

module.exports = Router;



},{"./log.coffee":5,"./view.coffee":8,"./viewmodel.coffee":9,"jquery":"jquery","underscore":"underscore"}],8:[function(require,module,exports){
var $, Log, View, _,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$ = require('jquery');

_ = require('underscore');

Log = require('./log.coffee');

View = (function() {
  function View(template, viewmodel) {
    this.refresh = bind(this.refresh, this);
    this.template = template;
    this.$el = null;
    this.rendered = false;
    this.viewmodel = viewmodel || null;
  }

  View.prototype.render = function($el) {
    var html;
    if (this.rendered) {
      return;
    }
    this.$el = $el;
    html = typeof this.template === 'function' ? this.template(this.viewmodel || {}) : this.template;
    this.$el.html(html);
    this.bind();
    if (this.viewmodel) {
      this.viewmodel.on('refresh', this.refresh);
    }
    return this.rendered = true;
  };

  View.prototype.getSubview = function(name) {
    var selector, subview;
    selector = name && name !== 'default' ? '[ui-view="' + name + '"]' : '[ui-view]';
    subview = this.$el.find(selector);
    if (!subview.length) {
      Log.warn('Subview' + (name ? ' with name "' + name + '"' : '') + ' not found');
    }
    return subview;
  };

  View.prototype.renderSubview = function(name, view) {
    var $subview;
    $subview = this.getSubview(name);
    if ($subview) {
      return view.render($subview);
    }
  };

  View.prototype.bind = function() {
    if (this.bindings) {
      _.each(this.bindings, (function(_this) {
        return function(events, selector) {
          return _.each(events, function(callback, event) {
            if (typeof _this[callback] === 'function') {
              return _this.$el.on(event, selector, _this[callback]);
            }
          });
        };
      })(this));
    }
    return this.$el.on('click', '[data-link]', (function(_this) {
      return function(e) {
        var link;
        link = $(e.currentTarget).attr('data-link');
        if (link) {
          return _this.viewmodel.goto(link);
        }
      };
    })(this));
  };

  View.prototype.unbind = function() {
    if (this.bindings) {
      _.each(this.bindings, (function(_this) {
        return function(events, selector) {
          return _.each(events, function(callback, event) {
            if (typeof _this[callback] === 'function') {
              return _this.$el.off(event, selector, _this[callback]);
            }
          });
        };
      })(this));
    }
    return this.$el.off('click', '[data-link]');
  };

  View.prototype.refresh = function() {
    var $subviews, html, that;
    if (!this.rendered) {
      return Log.warn('Cannot refresh unrendered view');
    }
    that = this;
    this.unbind();
    $subviews = this.$el.find('[ui-view]');
    this.$el.empty();
    html = typeof this.template === 'function' ? this.template(this.viewmodel || {}) : this.template;
    this.$el.html(html);
    this.bind();
    $subviews.each(function() {
      var name;
      name = $(this).attr('ui-view');
      if (name) {
        return that.$el.find('[ui-view="' + name + '"]').replaceWith(this);
      } else {
        return that.$el.find('[ui-view]').replaceWith(this);
      }
    });
    return Log.debug('Refreshing view');
  };

  View.prototype.destroy = function() {
    if (!this.rendered) {
      return;
    }
    if (this.viewmodel) {
      this.viewmodel.detach('refresh', this.refresh);
    }
    this.unbind();
    this.$el.empty();
    this.$el = null;
    return this.rendered = false;
  };

  return View;

})();

module.exports = View;



},{"./log.coffee":5,"jquery":"jquery","underscore":"underscore"}],9:[function(require,module,exports){
var ViewModel, _;

_ = require('underscore');

ViewModel = (function() {
  function ViewModel() {
    this.loading = false;
    this.events = {};
  }

  ViewModel.prototype.update = function() {};

  ViewModel.prototype.setParams = function(params) {
    return _.each(params, (function(_this) {
      return function(value, name) {
        if (_this.hasOwnProperty(name)) {
          return _this[name] = value;
        }
      };
    })(this));
  };

  ViewModel.prototype.startLoading = function() {
    return this.loading = true;
  };

  ViewModel.prototype.stopLoading = function() {
    return this.loading = false;
  };

  ViewModel.prototype.goto = function(path) {
    return this.router.goto(path);
  };

  ViewModel.prototype.on = function(event, callback) {
    if (!this.events.hasOwnProperty(event)) {
      this.events[event] = [];
    }
    return this.events[event].push(callback);
  };

  ViewModel.prototype.detach = function(event, callback) {
    var index;
    if (this.events.hasOwnProperty(event)) {
      index = this.events[event].indexOf(callback);
      if (index !== -1) {
        return this.events[event].splice(index, 1);
      }
    }
  };

  ViewModel.prototype.fire = function(event) {
    var args, i, j, ref, results;
    args = Array.prototype.slice.call(arguments);
    if (this.events.hasOwnProperty(event)) {
      results = [];
      for (i = j = 0, ref = this.events[event].length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push(this.events[event][i].apply(this, args));
      }
      return results;
    }
  };

  return ViewModel;

})();

module.exports = ViewModel;



},{"underscore":"underscore"}],10:[function(require,module,exports){
var AccountsPresenter, Presenter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Presenter = require('../../../common1/presenter.coffee');

AccountsPresenter = (function(superClass) {
  extend(AccountsPresenter, superClass);

  function AccountsPresenter(params, chartViewModel, transactionsViewModel, overlayViewModel) {
    this.chartViewModel = chartViewModel;
    this.transactionsViewModel = transactionsViewModel;
    this.overlayViewModel = overlayViewModel;
    this.accountId = params.accountId || null;
  }

  AccountsPresenter.prototype.load = function() {
    if (!this.accountId) {
      return this.showOverlay();
    }
  };

  AccountsPresenter.prototype.update = function() {
    if (!this.accountId) {
      return this.showOverlay();
    }
  };

  AccountsPresenter.prototype.bind = function() {
    this.chartViewModel.on('choose', this.showOverlay);
    this.overlayViewModel.on('close', this.hideOverlay);
    return this.overlayViewModel.on('select', this.selectAccount);
  };

  AccountsPresenter.prototype.setAccount = function(accountId) {
    this.chartViewModel.setAccount(accountId);
    this.transactionsViewModel.setAccount(accountId);
    return this.overlayViewModel.setAccount(accountId);
  };

  AccountsPresenter.prototype.selectAccount = function(accountId) {
    this.setAccount(accountId);
    this.hideOverlay();
    return this.router.replaceState('/app/accounts/' + accountId);
  };

  AccountsPresenter.prototype.showOverlay = function() {
    return this.router.renderGlobal('accounts');
  };

  AccountsPresenter.prototype.hideOverlay = function() {
    return this.router.destroyGlobal('accounts');
  };

  return AccountsPresenter;

})(Presenter);

module.exports = AccountsPresenter;



},{"../../../common1/presenter.coffee":6}],11:[function(require,module,exports){
var InvestmentsPresenter, Presenter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Presenter = require('../../../common1/presenter.coffee');

InvestmentsPresenter = (function(superClass) {
  extend(InvestmentsPresenter, superClass);

  function InvestmentsPresenter(params, portfoliosViewModel, overlayViewModel) {
    this.portfoliosViewModel = portfoliosViewModel;
    this.overlayViewModel = overlayViewModel;
    this.portfolioId = params.portfolioId || null;
  }

  InvestmentsPresenter.prototype.load = function() {
    if (!this.portfolioId) {
      return this.showOverlay();
    }
  };

  InvestmentsPresenter.prototype.update = function() {
    if (!this.portfolioId) {
      return this.showOverlay();
    }
  };

  InvestmentsPresenter.prototype.bind = function() {
    this.portfoliosViewModel.on('choose', this.showOverlay);
    this.overlayViewModel.on('close', this.hideOverlay);
    return this.overlayViewModel.on('select', this.selectPortfolio);
  };

  InvestmentsPresenter.prototype.setPortfolio = function(portfolioId) {
    return this.portfoliosViewModel.setPortfolio(portfolioId);
  };

  InvestmentsPresenter.prototype.selectPortfolio = function(portfolioId) {
    this.setPortfolio(portfolioId);
    this.hideOverlay();
    return this.router.replaceParam('portfolioId', portfolioId);
  };

  InvestmentsPresenter.prototype.showOverlay = function() {
    return this.router.renderGlobal('portfolios');
  };

  InvestmentsPresenter.prototype.hideOverlay = function() {
    return this.router.destroyGlobal('portfolios');
  };

  return InvestmentsPresenter;

})(Presenter);

module.exports = InvestmentsPresenter;



},{"../../../common1/presenter.coffee":6}],12:[function(require,module,exports){
module.exports = {
  BASE_URL: {
    PROD: 'https://fiscality-api.herokuapp.com',
    DEV: 'http://localhost:9000'
  },
  ENV: 'DEV',
  getBaseUrl: function() {
    return this.BASE_URL[this.ENV];
  }
};
},{}],13:[function(require,module,exports){
var $, InvestmentsService, Service, _, cache,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$ = require('jquery');

_ = require('underscore');

cache = require('../common/cache');

Service = require('../common/service');

InvestmentsService = (function(superClass) {
  extend(InvestmentsService, superClass);

  function InvestmentsService() {
    return InvestmentsService.__super__.constructor.apply(this, arguments);
  }

  InvestmentsService.prototype.headers = function() {
    var authToken;
    authToken = cache.getPersistentItem('authToken');
    if (!authToken) {
      cache.purge();
      location.hash = '#/home/login';
    }
    return {
      'X-Auth-Token': authToken
    };
  };

  InvestmentsService.prototype.portfolios = function() {
    return this.cacheGet('/api/portfolios');
  };

  InvestmentsService.prototype.portfolio = function(portfolioId) {
    return this.cacheGet('/api/portfolios/' + portfolioId);
  };

  InvestmentsService.prototype.balance = function(portfolioId) {
    return this.cacheGet('/api/portfolios/' + portfolioId + '/balance');
  };

  InvestmentsService.prototype.holdings = function(portfolioId) {
    return this.cacheGet('/api/portfolios/' + portfolioId + '/holdings');
  };

  InvestmentsService.prototype.onError = function(status) {
    if (status === 401) {
      cache.purge();
      return location.hash = '#/home/login';
    }
  };

  return InvestmentsService;

})(Service);

module.exports = new InvestmentsService({
  baseUrl: require('./config').getBaseUrl()
}, cache);



},{"../common/cache":2,"../common/service":3,"./config":12,"jquery":"jquery","underscore":"underscore"}],14:[function(require,module,exports){
var $, Service, TransactionsService, _, cache,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$ = require('jquery');

_ = require('underscore');

cache = require('../common/cache');

Service = require('../common/service');

TransactionsService = (function(superClass) {
  extend(TransactionsService, superClass);

  function TransactionsService() {
    return TransactionsService.__super__.constructor.apply(this, arguments);
  }

  TransactionsService.prototype.headers = function() {
    var authToken;
    authToken = cache.getPersistentItem('authToken');
    if (!authToken) {
      cache.purge();
      location.hash = '#/home/login';
    }
    return {
      'X-Auth-Token': authToken
    };
  };

  TransactionsService.prototype.transactions = function(accountId) {
    var deferred, success;
    deferred = $.Deferred();
    success = function(data) {
      _.each(data, function(item) {
        return item.accountNames = _.pluck(item.otherLines, 'accountName').join(', ');
      });
      cache.setItem('transactions:' + accountId, data);
      return deferred.resolve(data);
    };
    this.cacheGet('/api/accounts/' + accountId + '/transactions').then(success, function() {
      return deferred.reject();
    });
    return deferred;
  };

  TransactionsService.prototype.accounts = function() {
    return this.cacheGet('/api/accounts');
  };

  TransactionsService.prototype.account = function(accountId) {
    return this.cacheGet('/api/accounts/' + accountId);
  };

  TransactionsService.prototype.balance = function(accountId) {
    return this.cacheGet('/api/accounts/' + accountId + '/balance');
  };

  TransactionsService.prototype.onError = function(status) {
    if (status === 401) {
      cache.purge();
      return location.hash = '#/home/login';
    }
  };

  return TransactionsService;

})(Service);

module.exports = new TransactionsService({
  baseUrl: require('./config').getBaseUrl()
}, cache);



},{"../common/cache":2,"../common/service":3,"./config":12,"jquery":"jquery","underscore":"underscore"}],15:[function(require,module,exports){
var ChartViewModel, ViewModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewModel = require('../../../common1/viewmodel.coffee');

ChartViewModel = (function(superClass) {
  extend(ChartViewModel, superClass);

  function ChartViewModel(params) {
    ChartViewModel.__super__.constructor.apply(this, arguments);
    this.selectedAccountId = params.accountId || null;
    this.account = null;
    this.range = '1M';
    this.startDate = new Date(2015, 1, 1);
    this.endDate = new Date(2015, 3, 31);
  }

  ChartViewModel.prototype.update = function() {
    this.startLoading();
    this.stopLoading();
    return this.fire('refresh');
  };

  ChartViewModel.prototype.choose = function() {
    return this.fire('choose');
  };

  ChartViewModel.prototype.setAccount = function(accountId) {
    this.selectedAccountId = accountId;
    return this.update();
  };

  ChartViewModel.prototype.setRange = function(range) {
    this.range = range;
    return this.update();
  };

  ChartViewModel.prototype.setStartDate = function(startDate) {
    this.startDate = startDate;
    return this.update();
  };

  ChartViewModel.prototype.setEndDate = function(endDate) {
    this.endDate = endDate;
    return this.update();
  };

  return ChartViewModel;

})(ViewModel);

module.exports = ChartViewModel;



},{"../../../common1/viewmodel.coffee":9}],16:[function(require,module,exports){
var OverlayViewModel, ViewModel, transactionsService,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewModel = require('../../../common1/viewmodel.coffee');

transactionsService = require('../../../services/transactions.coffee');

OverlayViewModel = (function(superClass) {
  extend(OverlayViewModel, superClass);

  function OverlayViewModel(params) {
    OverlayViewModel.__super__.constructor.apply(this, arguments);
    this.accounts = [];
    this.selectedAccountId = params.accountId || null;
    transactionsService.accounts().then((function(_this) {
      return function(data) {
        _this.stopLoading();
        _this.accounts = data;
        return _this.update();
      };
    })(this), function() {
      this.stopLoading();
      return Log.error('Error fetching accounts');
    });
  }

  OverlayViewModel.prototype.update = function() {
    return this.fire('refresh');
  };

  OverlayViewModel.prototype.setAccount = function(accountId) {
    this.selectedAccountId = accountId;
    return this.fire('select', accountId);
  };

  OverlayViewModel.prototype.close = function() {
    return this.fire('close');
  };

  return OverlayViewModel;

})(ViewModel);

module.exports = OverlayViewModel;



},{"../../../common1/viewmodel.coffee":9,"../../../services/transactions.coffee":14}],17:[function(require,module,exports){
var TransactionsViewModel, ViewModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewModel = require('../../../common1/viewmodel.coffee');

TransactionsViewModel = (function(superClass) {
  extend(TransactionsViewModel, superClass);

  function TransactionsViewModel(params) {
    TransactionsViewModel.__super__.constructor.apply(this, arguments);
    this.selectedAccountId = params.accountId || null;
    this.transactions = [];
    this.keyword = null;
    this.sortColumn = 'date';
  }

  TransactionsViewModel.prototype.update = function() {
    this.startLoading();
    this.stopLoading();
    return this.fire('refresh');
  };

  TransactionsViewModel.prototype.sortBy = function(column) {
    this.sortColumn = column;
    return this.update();
  };

  TransactionsViewModel.prototype.setKeyword = function(keyword) {
    this.keyword = keyword;
    return this.update();
  };

  TransactionsViewModel.prototype.setAccount = function(accountId) {
    this.selectedAccountId = accountId;
    return this.update();
  };

  return TransactionsViewModel;

})(ViewModel);

module.exports = TransactionsViewModel;



},{"../../../common1/viewmodel.coffee":9}],18:[function(require,module,exports){
var InvestmentsViewModel, ViewModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewModel = require('../../../common1/viewmodel.coffee');

InvestmentsViewModel = (function(superClass) {
  extend(InvestmentsViewModel, superClass);

  function InvestmentsViewModel(params) {
    InvestmentsViewModel.__super__.constructor.apply(this, arguments);
    this.portfolioId = params.portfolioId || null;
    this.portfolio = null;
  }

  InvestmentsViewModel.prototype.update = function() {
    this.startLoading();
    this.stopLoading();
    return this.fire('refresh');
  };

  InvestmentsViewModel.prototype.setPortfolio = function(portfolioId) {
    this.portfolioId = portfolioId;
    return this.update();
  };

  InvestmentsViewModel.prototype.setState = function(state) {
    return this.router.goto('app.investments.' + state, {
      portfolioId: this.portfolioId
    });
  };

  return InvestmentsViewModel;

})(ViewModel);

module.exports = InvestmentsViewModel;



},{"../../../common1/viewmodel.coffee":9}],19:[function(require,module,exports){
var Log, OverlayViewModel, ViewModel, investmentsService,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewModel = require('../../../common1/viewmodel.coffee');

investmentsService = require('../../../services/investments.coffee');

Log = require('../../../common1/log.coffee');

OverlayViewModel = (function(superClass) {
  extend(OverlayViewModel, superClass);

  function OverlayViewModel(params) {
    OverlayViewModel.__super__.constructor.apply(this, arguments);
    this.portfolios = [];
    this.startLoading();
    investmentsService.portfolios().then((function(_this) {
      return function(data) {
        _this.stopLoading();
        _this.portfolios = data;
        return _this.update();
      };
    })(this), function() {
      this.stopLoading();
      return Log.error('Error fetching portfolios');
    });
  }

  OverlayViewModel.prototype.update = function() {
    return this.fire('refresh');
  };

  OverlayViewModel.prototype.setPortfolio = function(portfolioId) {
    this.portfolioId = portfolioId;
    return this.update();
  };

  OverlayViewModel.prototype.setState = function(state) {
    return this.router.goto('app.investments.' + state, {
      portfolioId: this.portfolioId
    });
  };

  return OverlayViewModel;

})(ViewModel);

module.exports = OverlayViewModel;



},{"../../../common1/log.coffee":5,"../../../common1/viewmodel.coffee":9,"../../../services/investments.coffee":13}],20:[function(require,module,exports){
module.exports = require('../../../../common1/viewmodel.coffee');



},{"../../../../common1/viewmodel.coffee":9}],21:[function(require,module,exports){
module.exports = require('../../../../common1/viewmodel.coffee');



},{"../../../../common1/viewmodel.coffee":9}],22:[function(require,module,exports){
var MenuViewModel, ViewModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewModel = require('../../common1/viewmodel.coffee');

MenuViewModel = (function(superClass) {
  extend(MenuViewModel, superClass);

  function MenuViewModel(params) {
    var hash;
    MenuViewModel.__super__.constructor.apply(this, arguments);
    hash = location.hash.replace(/(^#\/?)|(\/$)/g, '').split('/');
    this.state = hash[1];
  }

  MenuViewModel.prototype.setState = function(state) {
    this.state = state;
    return this.router.goto('/app/' + state);
  };

  MenuViewModel.prototype.logout = function() {
    return this.router.goto('/home/login');
  };

  return MenuViewModel;

})(ViewModel);

module.exports = MenuViewModel;



},{"../../common1/viewmodel.coffee":9}],23:[function(require,module,exports){
module.exports = require('../../common1/viewmodel.coffee');



},{"../../common1/viewmodel.coffee":9}],24:[function(require,module,exports){
module.exports = require('../../common1/viewmodel.coffee');



},{"../../common1/viewmodel.coffee":9}],25:[function(require,module,exports){
module.exports = require('../../common1/viewmodel.coffee');



},{"../../common1/viewmodel.coffee":9}],26:[function(require,module,exports){
module.exports = require('../../common1/viewmodel.coffee');



},{"../../common1/viewmodel.coffee":9}],27:[function(require,module,exports){
var $, OverlayView, View,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

View = require('../../../common/view');

$ = require('jquery');

OverlayView = (function(superClass) {
  extend(OverlayView, superClass);

  function OverlayView() {
    return OverlayView.__super__.constructor.apply(this, arguments);
  }

  OverlayView.prototype.bindings = {
    '.account-item': {
      'click': 'onSelect'
    }
  };

  OverlayView.prototype.onSelect = function(e) {
    var accountId;
    accountId = $(e.currentTarget).attr('data-key');
    return this.viewModel.setAccount(accountId);
  };

  return OverlayView;

})(View);

module.exports = OverlayView;



},{"../../../common/view":4,"jquery":"jquery"}],28:[function(require,module,exports){
var $, MenuView, View,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$ = require('jquery');

View = require('../../common1/view.coffee');

MenuView = (function(superClass) {
  extend(MenuView, superClass);

  function MenuView() {
    this.onLogout = bind(this.onLogout, this);
    this.onSettings = bind(this.onSettings, this);
    this.onSelect = bind(this.onSelect, this);
    return MenuView.__super__.constructor.apply(this, arguments);
  }

  MenuView.prototype.bindings = {
    '.nav-list-item': {
      'click': 'onSelect'
    },
    '.settings-button': {
      'click': 'onSettings'
    },
    '.logout-btn': {
      'click': 'onLogout'
    }
  };

  MenuView.prototype.render = function() {
    var state;
    MenuView.__super__.render.apply(this, arguments);
    state = this.viewmodel.state;
    return this.$el.find('.nav-list-item.' + state).addClass('active');
  };

  MenuView.prototype.onSelect = function(e) {
    var key;
    key = $(e.currentTarget).attr('data-key');
    if (key) {
      this.viewmodel.setState(key);
      this.$el.find('.nav-list-item').removeClass('active');
      return this.$el.find('[data-key="' + key + '"]').addClass('active');
    }
  };

  MenuView.prototype.onSettings = function() {
    return this.viewmodel.setState('settings');
  };

  MenuView.prototype.onLogout = function() {
    return this.viewmodel.logout();
  };

  return MenuView;

})(View);

module.exports = MenuView;



},{"../../common1/view.coffee":8,"jquery":"jquery"}],29:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div id=\"menu\" ui-view=\"menu\"></div>\n\n<div id=\"content\" ui-view=\"content\"></div>";
},"useData":true});

},{"hbsfy/runtime":56}],30:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div id=\"accounts-chart\" ui-view=\"chart\"></div>\n\n<div id=\"transactions\" ui-view=\"transactions\"></div>";
},"useData":true});

},{"hbsfy/runtime":56}],31:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div class=\"chart-container\">\n\n    <div class=\"chart-header\">\n\n        <div class=\"chart-header-info\">\n\n            <h2 class=\"account-title\"></h2>\n            <div class=\"account-subtitle\">Last Updated May 8, 2015</div>\n\n        </div>\n\n        <div class=\"options-btn\" data-link=\"/app/accounts\"></div>\n\n        <div class=\"chart-balance\">\n            <span class=\"currency-prefix\">$</span>\n            <span class=\"currency-value\">0.00</span>\n        </div>\n\n    </div>\n\n    <div class=\"chart-content\">\n\n        <div class=\"date-selectors\">\n            <div class=\"date-selector\">January 1, 2015</div>\n            <div class=\"date-separator\"></div>\n            <div class=\"date-selector\">March 31, 2015</div>\n        </div>\n\n        <ul class=\"range-picker\">\n            <li class=\"range-picker-item\">1W</li>\n            <li class=\"range-picker-item\">2W</li>\n            <li class=\"range-picker-item active\">1M</li>\n            <li class=\"range-picker-item\">3M</li>\n            <li class=\"range-picker-item\">1Y</li>\n            <li class=\"range-picker-item\">2Y</li>\n            <li class=\"range-picker-item\">5Y</li>\n            <li class=\"range-picker-item\">All</li>\n        </ul>\n\n    </div>\n\n    <div class=\"loading-indicator hidden\">Loading Chart...</div>\n\n    <div class=\"transaction-header\">\n        <div class=\"transaction-header-item column-left column-xsm\">\n            <div class=\"reconciled-header-button\"></div>\n        </div>\n        <div class=\"transaction-header-item column-left column-md active\">Date</div>\n        <div class=\"transaction-header-item column-left column-xlg\">Description</div>\n        <div class=\"transaction-header-item column-right column-sm\">Balance</div>\n        <div class=\"transaction-header-item column-right column-sm\">Amount</div>\n    </div>\n\n    <div class=\"progress\"></div>\n\n</div>";
},"useData":true});

},{"hbsfy/runtime":56}],32:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"1":function(depth0,helpers,partials,data) {
    var helper, alias1=helpers.helperMissing, alias2="function", alias3=this.escapeExpression;

  return "                <li data-link=\"/app/accounts/"
    + alias3(((helper = (helper = helpers.accountId || (depth0 != null ? depth0.accountId : depth0)) != null ? helper : alias1),(typeof helper === alias2 ? helper.call(depth0,{"name":"accountId","hash":{},"data":data}) : helper)))
    + "\" class=\"account-list-item\"><span class=\"label\">"
    + alias3(((helper = (helper = helpers.accountName || (depth0 != null ? depth0.accountName : depth0)) != null ? helper : alias1),(typeof helper === alias2 ? helper.call(depth0,{"name":"accountName","hash":{},"data":data}) : helper)))
    + "</span></li>\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return "<div id=\"accounts-overlay\">\n\n    <div class=\"account-selector-title\">Accounts</div>\n\n    <div class=\"accounts-close-btn\"></div>\n\n    <div class=\"account-lists\">\n\n        <ul class=\"account-list\">\n            <li class=\"account-list-header\">Banking</li>\n"
    + ((stack1 = helpers.each.call(depth0,(depth0 != null ? depth0.accounts : depth0),{"name":"each","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop,"data":data})) != null ? stack1 : "")
    + "        </ul>\n\n        <ul class=\"account-list\">\n            <li class=\"account-list-header\">Credit & Loan</li>\n            <li class=\"account-list-item\"><span data-link class=\"label\">American Express Blue Cash</span></li>\n            <li class=\"account-list-item\"><span class=\"label\">Citi Double Cash</span></li>\n            <li class=\"account-list-item\"><span class=\"labsel\">Citi AAdvantage Signature</span></li>\n            <li class=\"account-list-item\"><span class=\"label\">Chase Freedom Rewards</span></li>\n            <li class=\"account-list-item\"><span class=\"label\">Chase Ink Premier</span></li>\n            <li class=\"account-list-item\"><span class=\"label\">Bank of America World Points</span></li>\n        </ul>\n\n        <ul class=\"account-list\">\n            <li class=\"account-list-header\">Investment</li>\n            <li class=\"account-list-item\"><span class=\"label\">Bank of America Brokerage</span></li>\n            <li class=\"account-list-item\"><span class=\"label\">Bank of America Roth IRA</span></li>\n            <li class=\"account-list-item\"><span class=\"label\">Schwab One Brokerage</span></li>\n            <li class=\"account-list-item\"><span class=\"label\">Principal Financial</span></li>\n        </ul>\n\n    </div>\n\n</div>";
},"useData":true});

},{"hbsfy/runtime":56}],33:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"1":function(depth0,helpers,partials,data) {
    var stack1, helper, alias1=helpers.helperMissing, alias2="function", alias3=this.escapeExpression;

  return "\n    <div class=\"transaction-row\" data-id=\""
    + alias3(((helper = (helper = helpers.transactionLineId || (depth0 != null ? depth0.transactionLineId : depth0)) != null ? helper : alias1),(typeof helper === alias2 ? helper.call(depth0,{"name":"transactionLineId","hash":{},"data":data}) : helper)))
    + "\">\n\n        <div class=\"transaction-row-info\">\n\n            <div class=\"column-xsm column-left\">\n                <div class=\"reconciliation\"></div>\n            </div>\n\n            <div class=\"column-md column-left transaction-info\">\n                <div class=\"date\">"
    + alias3((helpers.dateFormat || (depth0 && depth0.dateFormat) || alias1).call(depth0,(depth0 != null ? depth0.transactionDate : depth0),"M/d/yyyy",{"name":"dateFormat","hash":{},"data":data}))
    + "</div>\n                <div class=\"transaction-type\">"
    + alias3(((helper = (helper = helpers.transactionType || (depth0 != null ? depth0.transactionType : depth0)) != null ? helper : alias1),(typeof helper === alias2 ? helper.call(depth0,{"name":"transactionType","hash":{},"data":data}) : helper)))
    + "</div>\n            </div>\n\n            <div class=\"column-lg column-left description\">\n                <div class=\"description-text\">"
    + alias3(((helper = (helper = helpers.description || (depth0 != null ? depth0.description : depth0)) != null ? helper : alias1),(typeof helper === alias2 ? helper.call(depth0,{"name":"description","hash":{},"data":data}) : helper)))
    + "</div>\n                <div class=\"account-text\">\n                    <span class=\"account-names\">"
    + alias3(((helper = (helper = helpers.accountNames || (depth0 != null ? depth0.accountNames : depth0)) != null ? helper : alias1),(typeof helper === alias2 ? helper.call(depth0,{"name":"accountNames","hash":{},"data":data}) : helper)))
    + "</span>\n                    <span class=\"collapse-btn\">Show Less</span>\n                </div>\n            </div>\n\n            <div class=\"column-sm column-right balance\">"
    + alias3((helpers.currency || (depth0 && depth0.currency) || alias1).call(depth0,(depth0 != null ? depth0.balance : depth0),{"name":"currency","hash":{},"data":data}))
    + "</div>\n\n            <div class=\"column-sm column-right amount\">"
    + alias3((helpers.currency || (depth0 && depth0.currency) || alias1).call(depth0,(depth0 != null ? depth0.amount : depth0),{"name":"currency","hash":{},"data":data}))
    + "</div>\n\n        </div>\n\n"
    + ((stack1 = helpers.each.call(depth0,(depth0 != null ? depth0.otherLines : depth0),{"name":"each","hash":{},"fn":this.program(2, data, 0),"inverse":this.noop,"data":data})) != null ? stack1 : "")
    + "\n    </div>\n\n";
},"2":function(depth0,helpers,partials,data) {
    var helper, alias1=helpers.helperMissing, alias2="function", alias3=this.escapeExpression;

  return "\n            <div class=\"transaction-row-details\">\n\n                <div class=\"column-xsm column-left\"></div>\n\n                <div class=\"column-md column-left\"></div>\n\n                <div class=\"column-xlg column-left line-description\" data-link=\"/app/accounts/"
    + alias3(((helper = (helper = helpers.accountId || (depth0 != null ? depth0.accountId : depth0)) != null ? helper : alias1),(typeof helper === alias2 ? helper.call(depth0,{"name":"accountId","hash":{},"data":data}) : helper)))
    + "\">"
    + alias3(((helper = (helper = helpers.accountName || (depth0 != null ? depth0.accountName : depth0)) != null ? helper : alias1),(typeof helper === alias2 ? helper.call(depth0,{"name":"accountName","hash":{},"data":data}) : helper)))
    + "</div>\n\n                <div class=\"column-sm column-right\"></div>\n\n                <div class=\"column-sm column-right line-amount\">"
    + alias3((helpers.currency || (depth0 && depth0.currency) || alias1).call(depth0,(depth0 != null ? depth0.amount : depth0),{"name":"currency","hash":{},"data":data}))
    + "</div>\n\n            </div>\n\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers.each.call(depth0,(depth0 != null ? depth0.transactions : depth0),{"name":"each","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop,"data":data})) != null ? stack1 : "");
},"useData":true});

},{"hbsfy/runtime":56}],34:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<header>\n\n    <h1>Portfolio Name</h1>\n\n    <ul>\n        <li onclick=\"location.hash='#/app/investments/12312321/positions'\">Positions</li>\n        <li onclick=\"location.hash='#/app/investments/12312321/activity'\">Activity</li>\n        <li onclick=\"location.hash='#/app/investments/12312321/performance'\">Performance</li>\n        <li onclick=\"location.hash='#/app/investments/12312321/allocation'\">Allocation</li>\n    </ul>\n\n</header>\n\n<div ui-view=\"investments\"></div>";
},"useData":true});

},{"hbsfy/runtime":56}],35:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h2>Activity</h2>";
},"useData":true});

},{"hbsfy/runtime":56}],36:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h2>Allocation</h2>";
},"useData":true});

},{"hbsfy/runtime":56}],37:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"1":function(depth0,helpers,partials,data) {
    var helper, alias1=helpers.helperMissing, alias2="function", alias3=this.escapeExpression;

  return "                <li data-link=\"/app/investments/"
    + alias3(((helper = (helper = helpers.portfolioId || (depth0 != null ? depth0.portfolioId : depth0)) != null ? helper : alias1),(typeof helper === alias2 ? helper.call(depth0,{"name":"portfolioId","hash":{},"data":data}) : helper)))
    + "/positions\" class=\"portfolio-list-item\"><span class=\"label\">"
    + alias3(((helper = (helper = helpers.portfolioName || (depth0 != null ? depth0.portfolioName : depth0)) != null ? helper : alias1),(typeof helper === alias2 ? helper.call(depth0,{"name":"portfolioName","hash":{},"data":data}) : helper)))
    + "</span></li>\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return "<div id=\"portfolios-overlay\">\n\n    <div class=\"portfolio-selector-title\">Portfolios</div>\n\n    <div class=\"portfolios-close-btn\"></div>\n\n    <div class=\"portfolio-lists\">\n\n        <ul class=\"portfolio-list\">\n            <li class=\"portfolio-list-header\">Traditional</li>\n"
    + ((stack1 = helpers.each.call(depth0,(depth0 != null ? depth0.portfolios : depth0),{"name":"each","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop,"data":data})) != null ? stack1 : "")
    + "        </ul>\n\n        <ul class=\"portfolio-list\">\n            <li class=\"portfolio-list-header\">Retirement</li>\n            <li class=\"portfolio-list-item\"><span data-link class=\"label\">Merrill Lynch Roth IRA</span></li>\n            <li class=\"portfolio-list-item\"><span class=\"label\">Principal ESOP</span></li>\n            <li class=\"portfolio-list-item\"><span class=\"label\">Principal Traditional 401k</span></li>\n            <li class=\"portfolio-list-item\"><span class=\"label\">Principal Roth 401k</span></li>\n        </ul>\n\n    </div>\n\n</div>";
},"useData":true});

},{"hbsfy/runtime":56}],38:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h2>Performance</h2>";
},"useData":true});

},{"hbsfy/runtime":56}],39:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h2>Positions</h2>\n\n<div ui-view=\"chart\"></div>\n\n<div ui-view=\"positions\"></div>";
},"useData":true});

},{"hbsfy/runtime":56}],40:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h3>Chart</h3>";
},"useData":true});

},{"hbsfy/runtime":56}],41:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h3>Positions List</h3>";
},"useData":true});

},{"hbsfy/runtime":56}],42:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div id=\"header\">\n    <h1 id=\"app-logo\" title=\"Fiscality\"></h1>\n    <div class=\"logout-btn\" data-bind=\"click:logout()\"></div>\n</div>\n\n<div id=\"statistics\">\n    <div class=\"balance\">\n        <div class=\"stat-value\">734,029.22</div>\n        <div class=\"stat-label\">Balance</div>\n    </div>\n\n    <div class=\"change\">\n        <div class=\"stat-value\"><div class=\"up-arrow\"></div>665.45</div>\n        <div class=\"stat-label\">0.75%</div>\n\n    </div>\n\n</div>\n\n<ul id=\"nav\">\n    <li class=\"nav-list-item accounts\" data-key=\"accounts\">Accounts</li>\n    <li class=\"nav-list-item investments\" data-key=\"investments\">Investments</li>\n    <li class=\"nav-list-item spending\">Spending</li>\n    <li class=\"nav-list-item taxes\">Taxes</li>\n</ul>\n\n<div id=\"account\" class=\"settings-btn\">\n    <div class=\"account-label\">My Account</div>\n    <div class=\"account-name\">Kevin Kinnebrew</div>\n</div>";
},"useData":true});

},{"hbsfy/runtime":56}],43:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h2>Settings</h2>";
},"useData":true});

},{"hbsfy/runtime":56}],44:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h1>Fiscality</h1>";
},"useData":true});

},{"hbsfy/runtime":56}],45:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "";
},"useData":true});

},{"hbsfy/runtime":56}],46:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"dup":45,"hbsfy/runtime":56}],47:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"dup":45,"hbsfy/runtime":56}],48:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"dup":45,"hbsfy/runtime":56}],49:[function(require,module,exports){
(function (global){
"use strict";
/*globals Handlebars: true */
var base = require("./handlebars/base");

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)
var SafeString = require("./handlebars/safe-string")["default"];
var Exception = require("./handlebars/exception")["default"];
var Utils = require("./handlebars/utils");
var runtime = require("./handlebars/runtime");

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
var create = function() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = SafeString;
  hb.Exception = Exception;
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function(spec) {
    return runtime.template(spec, hb);
  };

  return hb;
};

var Handlebars = create();
Handlebars.create = create;

/*jshint -W040 */
/* istanbul ignore next */
var root = typeof global !== 'undefined' ? global : window,
    $Handlebars = root.Handlebars;
/* istanbul ignore next */
Handlebars.noConflict = function() {
  if (root.Handlebars === Handlebars) {
    root.Handlebars = $Handlebars;
  }
};

Handlebars['default'] = Handlebars;

exports["default"] = Handlebars;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./handlebars/base":50,"./handlebars/exception":51,"./handlebars/runtime":52,"./handlebars/safe-string":53,"./handlebars/utils":54}],50:[function(require,module,exports){
"use strict";
var Utils = require("./utils");
var Exception = require("./exception")["default"];

var VERSION = "3.0.0";
exports.VERSION = VERSION;var COMPILER_REVISION = 6;
exports.COMPILER_REVISION = COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1'
};
exports.REVISION_CHANGES = REVISION_CHANGES;
var isArray = Utils.isArray,
    isFunction = Utils.isFunction,
    toString = Utils.toString,
    objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials) {
  this.helpers = helpers || {};
  this.partials = partials || {};

  registerDefaultHelpers(this);
}

exports.HandlebarsEnvironment = HandlebarsEnvironment;HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: logger,
  log: log,

  registerHelper: function(name, fn) {
    if (toString.call(name) === objectType) {
      if (fn) { throw new Exception('Arg not supported with multiple helpers'); }
      Utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function(name) {
    delete this.helpers[name];
  },

  registerPartial: function(name, partial) {
    if (toString.call(name) === objectType) {
      Utils.extend(this.partials,  name);
    } else {
      if (typeof partial === 'undefined') {
        throw new Exception('Attempting to register a partial as undefined');
      }
      this.partials[name] = partial;
    }
  },
  unregisterPartial: function(name) {
    delete this.partials[name];
  }
};

function registerDefaultHelpers(instance) {
  instance.registerHelper('helperMissing', function(/* [args, ]options */) {
    if(arguments.length === 1) {
      // A missing field in a {{foo}} constuct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new Exception("Missing helper: '" + arguments[arguments.length-1].name + "'");
    }
  });

  instance.registerHelper('blockHelperMissing', function(context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if(context === true) {
      return fn(this);
    } else if(context === false || context == null) {
      return inverse(this);
    } else if (isArray(context)) {
      if(context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = createFrame(options.data);
        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
        options = {data: data};
      }

      return fn(context, options);
    }
  });

  instance.registerHelper('each', function(context, options) {
    if (!options) {
      throw new Exception('Must pass iterator to #each');
    }

    var fn = options.fn, inverse = options.inverse;
    var i = 0, ret = "", data;

    var contextPath;
    if (options.data && options.ids) {
      contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (isFunction(context)) { context = context.call(this); }

    if (options.data) {
      data = createFrame(options.data);
    }

    function execIteration(key, i, last) {
      if (data) {
        data.key = key;
        data.index = i;
        data.first = i === 0;
        data.last  = !!last;

        if (contextPath) {
          data.contextPath = contextPath + key;
        }
      }

      ret = ret + fn(context[key], {
        data: data,
        blockParams: Utils.blockParams([context[key], key], [contextPath + key, null])
      });
    }

    if(context && typeof context === 'object') {
      if (isArray(context)) {
        for(var j = context.length; i<j; i++) {
          execIteration(i, i, i === context.length-1);
        }
      } else {
        var priorKey;

        for(var key in context) {
          if(context.hasOwnProperty(key)) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array. 
            if (priorKey) {
              execIteration(priorKey, i-1);
            }
            priorKey = key;
            i++;
          }
        }
        if (priorKey) {
          execIteration(priorKey, i-1, true);
        }
      }
    }

    if(i === 0){
      ret = inverse(this);
    }

    return ret;
  });

  instance.registerHelper('if', function(conditional, options) {
    if (isFunction(conditional)) { conditional = conditional.call(this); }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if ((!options.hash.includeZero && !conditional) || Utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function(conditional, options) {
    return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});
  });

  instance.registerHelper('with', function(context, options) {
    if (isFunction(context)) { context = context.call(this); }

    var fn = options.fn;

    if (!Utils.isEmpty(context)) {
      if (options.data && options.ids) {
        var data = createFrame(options.data);
        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
        options = {data:data};
      }

      return fn(context, options);
    } else {
      return options.inverse(this);
    }
  });

  instance.registerHelper('log', function(message, options) {
    var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
    instance.log(level, message);
  });

  instance.registerHelper('lookup', function(obj, field) {
    return obj && obj[field];
  });
}

var logger = {
  methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },

  // State enum
  DEBUG: 0,
  INFO: 1,
  WARN: 2,
  ERROR: 3,
  level: 1,

  // Can be overridden in the host environment
  log: function(level, message) {
    if (typeof console !== 'undefined' && logger.level <= level) {
      var method = logger.methodMap[level];
      (console[method] || console.log).call(console, message);
    }
  }
};
exports.logger = logger;
var log = logger.log;
exports.log = log;
var createFrame = function(object) {
  var frame = Utils.extend({}, object);
  frame._parent = object;
  return frame;
};
exports.createFrame = createFrame;
},{"./exception":51,"./utils":54}],51:[function(require,module,exports){
"use strict";

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var loc = node && node.loc,
      line,
      column;
  if (loc) {
    line = loc.start.line;
    column = loc.start.column;

    message += ' - ' + line + ':' + column;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  if (loc) {
    this.lineNumber = line;
    this.column = column;
  }
}

Exception.prototype = new Error();

exports["default"] = Exception;
},{}],52:[function(require,module,exports){
"use strict";
var Utils = require("./utils");
var Exception = require("./exception")["default"];
var COMPILER_REVISION = require("./base").COMPILER_REVISION;
var REVISION_CHANGES = require("./base").REVISION_CHANGES;
var createFrame = require("./base").createFrame;

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = COMPILER_REVISION;

  if (compilerRevision !== currentRevision) {
    if (compilerRevision < currentRevision) {
      var runtimeVersions = REVISION_CHANGES[currentRevision],
          compilerVersions = REVISION_CHANGES[compilerRevision];
      throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. "+
            "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").");
    } else {
      // Use the embedded version info since the runtime doesn't know about this revision yet
      throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. "+
            "Please update your runtime to a newer version ("+compilerInfo[1]+").");
    }
  }
}

exports.checkRevision = checkRevision;// TODO: Remove this line and break up compilePartial

function template(templateSpec, env) {
  /* istanbul ignore next */
  if (!env) {
    throw new Exception("No environment passed to template");
  }
  if (!templateSpec || !templateSpec.main) {
    throw new Exception('Unknown template object: ' + typeof templateSpec);
  }

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as psuedo-supported APIs.
  env.VM.checkRevision(templateSpec.compiler);

  var invokePartialWrapper = function(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);
    }

    partial = env.VM.resolvePartial.call(this, partial, context, options);
    var result = env.VM.invokePartial.call(this, partial, context, options);

    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, options);
    }
    if (result != null) {
      if (options.indent) {
        var lines = result.split('\n');
        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = options.indent + lines[i];
        }
        result = lines.join('\n');
      }
      return result;
    } else {
      throw new Exception("The partial " + options.name + " could not be compiled when running in runtime-only mode");
    }
  };

  // Just add water
  var container = {
    strict: function(obj, name) {
      if (!(name in obj)) {
        throw new Exception('"' + name + '" not defined in ' + obj);
      }
      return obj[name];
    },
    lookup: function(depths, name) {
      var len = depths.length;
      for (var i = 0; i < len; i++) {
        if (depths[i] && depths[i][name] != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },

    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,

    fn: function(i) {
      return templateSpec[i];
    },

    programs: [],
    program: function(i, data, declaredBlockParams, blockParams, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);
      if (data || depths || blockParams || declaredBlockParams) {
        programWrapper = program(this, i, fn, data, declaredBlockParams, blockParams, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = program(this, i, fn);
      }
      return programWrapper;
    },

    data: function(data, depth) {
      while (data && depth--) {
        data = data._parent;
      }
      return data;
    },
    merge: function(param, common) {
      var ret = param || common;

      if (param && common && (param !== common)) {
        ret = Utils.extend({}, common, param);
      }

      return ret;
    },

    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  var ret = function(context, options) {
    options = options || {};
    var data = options.data;

    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths,
        blockParams = templateSpec.useBlockParams ? [] : undefined;
    if (templateSpec.useDepths) {
      depths = options.depths ? [context].concat(options.depths) : [context];
    }

    return templateSpec.main.call(container, context, container.helpers, container.partials, data, blockParams, depths);
  };
  ret.isTop = true;

  ret._setup = function(options) {
    if (!options.partial) {
      container.helpers = container.merge(options.helpers, env.helpers);

      if (templateSpec.usePartial) {
        container.partials = container.merge(options.partials, env.partials);
      }
    } else {
      container.helpers = options.helpers;
      container.partials = options.partials;
    }
  };

  ret._child = function(i, data, blockParams, depths) {
    if (templateSpec.useBlockParams && !blockParams) {
      throw new Exception('must pass block params');
    }
    if (templateSpec.useDepths && !depths) {
      throw new Exception('must pass parent depths');
    }

    return program(container, i, templateSpec[i], data, 0, blockParams, depths);
  };
  return ret;
}

exports.template = template;function program(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  var prog = function(context, options) {
    options = options || {};

    return fn.call(container,
        context,
        container.helpers, container.partials,
        options.data || data,
        blockParams && [options.blockParams].concat(blockParams),
        depths && [context].concat(depths));
  };
  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}

exports.program = program;function resolvePartial(partial, context, options) {
  if (!partial) {
    partial = options.partials[options.name];
  } else if (!partial.call && !options.name) {
    // This is a dynamic partial that returned a string
    options.name = partial;
    partial = options.partials[partial];
  }
  return partial;
}

exports.resolvePartial = resolvePartial;function invokePartial(partial, context, options) {
  options.partial = true;

  if(partial === undefined) {
    throw new Exception("The partial " + options.name + " could not be found");
  } else if(partial instanceof Function) {
    return partial(context, options);
  }
}

exports.invokePartial = invokePartial;function noop() { return ""; }

exports.noop = noop;function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? createFrame(data) : {};
    data.root = context;
  }
  return data;
}
},{"./base":50,"./exception":51,"./utils":54}],53:[function(require,module,exports){
"use strict";
// Build out our basic SafeString type
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
  return "" + this.string;
};

exports["default"] = SafeString;
},{}],54:[function(require,module,exports){
"use strict";
/*jshint -W004 */
var escape = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#x27;",
  "`": "&#x60;"
};

var badChars = /[&<>"'`]/g;
var possible = /[&<>"'`]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj /* , ...source */) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

exports.extend = extend;var toString = Object.prototype.toString;
exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
var isFunction = function(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
/* istanbul ignore next */
if (isFunction(/x/)) {
  isFunction = function(value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
var isFunction;
exports.isFunction = isFunction;
/* istanbul ignore next */
var isArray = Array.isArray || function(value) {
  return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;
};
exports.isArray = isArray;
// Older IE versions do not directly support indexOf so we must implement our own, sadly.
function indexOf(array, value) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}

exports.indexOf = indexOf;
function escapeExpression(string) {
  // don't escape SafeStrings, since they're already safe
  if (string && string.toHTML) {
    return string.toHTML();
  } else if (string == null) {
    return "";
  } else if (!string) {
    return string + '';
  }

  // Force a string conversion as this will be done by the append regardless and
  // the regex test will do this transparently behind the scenes, causing issues if
  // an object's to string has escaped characters in it.
  string = "" + string;

  if(!possible.test(string)) { return string; }
  return string.replace(badChars, escapeChar);
}

exports.escapeExpression = escapeExpression;function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

exports.isEmpty = isEmpty;function blockParams(params, ids) {
  params.path = ids;
  return params;
}

exports.blockParams = blockParams;function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}

exports.appendContextPath = appendContextPath;
},{}],55:[function(require,module,exports){
// Create a simple path alias to allow browserify to resolve
// the runtime on a supported path.
module.exports = require('./dist/cjs/handlebars.runtime').default;

},{"./dist/cjs/handlebars.runtime":49}],56:[function(require,module,exports){
module.exports = require("handlebars/runtime")["default"];

},{"handlebars/runtime":55}]},{},[1])


//# sourceMappingURL=app.min.js.map