(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * @file app.js
 * @author kkinnebrew
 * @date 2.1.2015
 */

var $ = require('jquery');
var Router = require('./common/router1');

var router = new Router();

//router.registerDefault('/app/accounts');
//
//router.register404({
//  template: require('../templates/404.hbs')
//});

router.register('app', {
  template: require('../templates/app.hbs')
});

router.register('app.accounts', {
  views: {
    'subnav': {
      template: require('../templates/app/accounts/subnav.hbs')
    },
    'content': {
      template: require('../templates/app/accounts/content.hbs')
    }
    //'chart@content': {
    //  template: require('../templates/app/accounts/chart.hbs'),
    //  view: require('./views/app/accounts/chart')
    //},
    //'transactions@content': {
    //  template: require('../templates/app/accounts/transactions.hbs'),
    //  view: require('./views/app/accounts/transactions')
    //}
  }
});


router.register('home', {
  template: require('../templates/home.hbs')
});

router.register('home.login', {
  template: require('../templates/home/login.html')
});

//router.register('app', {
//  abstract: true,
//  url: '/app',
//  redirect: 'app/accounts',
//  template: require('../templates/app.hbs'),
//  view: require('./views/app')
//});
//
//router.register('app.accounts', {
//  url: '/app/accounts/:accountId',
//  views: {
//    'subnav': {
//      template: require('../templates/app/accounts/subnav.hbs')
//    },
//    'content': {
//      template: require('../templates/app/accounts/content.hbs')
//    },
//    'chart@content': {
//      template: require('../templates/app/accounts/chart.hbs'),
//      view: require('./views/app/accounts/chart')
//      //viewModel: function(accountId) {
//      //  var ViewModel = require('viewmodels/app/accounts/chart');
//      //  return new ViewModel(accountId);
//      //}
//    },
//    'transactions@content': {
//      template: require('../templates/app/accounts/transactions.hbs'),
//      view: require('./views/app/accounts/transactions')
//      //viewModel: function(accountId) {
//      //  var ViewModel = require('viewmodels/app/accounts/transactions');
//      //  return new ViewModel(accountId);
//      //}
//    }
//  }
//});
//
//router.register('app.investments', {
//  url: '/app/investments',
//  views: {
//    'subnav': {
//      template: require('../templates/app/investments/subnav.hbs')
//    },
//    'content': {
//      template: require('../templates/app/investments/content.hbs')
//    }
//  }
//});


$(document).ready(function() {
  router.listen();
});

//var View = require('./common/view');
//var ViewModel = require('./common/clementine').ViewModel;
//var Controller = require('./common/clementine').Controller;
//
//(function(window) {
//
//  // exit if the browser implements that event
//  if ( "onhashchange" in window.document.body ) { return; }
//
//  var location = window.location,
//    oldURL = location.href,
//    oldHash = location.hash;
//
//  // check the location hash on a 100ms interval
//  setInterval(function() {
//    var newURL = location.href,
//      newHash = location.hash;
//
//    // if the hash has changed and a handler has been bound...
//    if ( newHash != oldHash && typeof window.onhashchange === "function" ) {
//      // execute the handler
//      window.onhashchange({
//        type: "hashchange",
//        oldURL: oldURL,
//        newURL: newURL
//      });
//
//      oldURL = newURL;
//      oldHash = newHash;
//    }
//  }, 100);
//
//})(window);
//
//(function(window) {
//
//  var states = {
//    'home': {
//      abstract: true,
//      redirect: 'home/login',
//      template: require('../templates/home.html'),
//      view: require('./views/home')
//    },
//    'home.login': {
//      template: require('../templates/home/login.html'),
//      viewModel: require('./viewmodels/home/login')
//    },
//    'home.register': {
//      template: require('../templates/home/register.html'),
//      viewModel: require('./viewmodels/home/register')
//    },
//    'home.forgot': {
//      template: require('../templates/home/forgot.html'),
//      viewModel: require('./viewmodels/home/forgot')
//    },
//    'home.reset': {
//      template: require('../templates/home/reset.html'),
//      viewModel: require('./viewmodels/home/reset')
//    },
//    'app': {
//      abstract: true,
//      redirect: 'app/accounts',
//      template: require('../templates/app.hbs')
//    },
//    'app.accounts': {
//      views: {
//        subnav: {
//          template: require('../templates/app.hbs')
//        }
//      }
//    }
//  };
//
//  function redirectToDefault() {
//    location.hash = '#/home/login';
//  }
//
//  function renderPage(route) {
//
//    var parts = route.replace('#/', '').split('/');
//
//    if (parts[0].length === 0) parts.shift();
//
//    console.log('URL', parts);
//
//    var rootView, parent = null, vm = null, vw = null, key;
//
//    for (var i = 0; i < parts.length; i++) {
//      if (parts[i] === "") continue;
//      if (!key) {
//        key = parts[i];
//      } else {
//        key += '.' + parts[i];
//      }
//      if (!states.hasOwnProperty(key)) {
//        redirectToDefault();
//      } else {
//        var template = states[key].template;
//        var view = states[key].view || View;
//        var viewModel = states[key].viewModel;
//        if (!parent) {
//          if (viewModel) {
//            vm = new viewModel();
//          }
//          rootView = parent = new view(template, vm);
//          if (viewModel) {
//            new Controller(vm, parent);
//          }
//        } else {
//          if (viewModel) {
//            vm = new viewModel();
//          }
//          vw = new view(template, vm);
//          if (viewModel) {
//            new Controller(vm, vw);
//          }
//          parent.registerSubview(vw);
//          parent = vw;
//        }
//      }
//    }
//
//
//    if (states.hasOwnProperty(key) && states[key].abstract) {
//      if (states[key].redirect) {
//        location.hash = '#/' + states[key].redirect;
//      } else {
//        redirectToDefault();
//      }
//    }
//    $('#app').empty();
//    rootView.render($('#app'));
//
//  }
//
//  var route;
//
//  $(window).on('hashchange', function() {
//
//    route = location.hash;
//
//    renderPage(route);
//
//  });
//
//  if (!location.hash) {
//    redirectToDefault();
//  } else {
//    route = location.hash;
//    renderPage(route);
//  }
//
//})(window);
},{"../templates/app.hbs":3,"../templates/app/accounts/content.hbs":4,"../templates/app/accounts/subnav.hbs":5,"../templates/home.hbs":6,"../templates/home/login.html":7,"./common/router1":2,"jquery":"jquery"}],2:[function(require,module,exports){
var $ = require('jquery');

function View(template) {

  this.template = template;

  this.$el = null;

}

View.prototype.render = function($el) {

  this.$el = $el;

  var html = typeof this.template === 'function' ? this.template() : this.template;

  this.$el.html(html);

};

View.prototype.destroy = function() {

  this.$el.empty();

  this.$el = null;

};

View.prototype.getSubview = function(name) {

  if (name) {
    return this.$el.find('[ui-view="' + name + '"]');
  } else {
    return this.$el.find('[ui-view]');
  }

};

function Router() {

  this.config = {};

  this.queue = [];

}

Router.prototype.register = function(state, config) {

  this.config[state] = config;

};

Router.prototype.listen = function() {

  $(window).on('hashchange', $.proxy(this.render, this));

  this.render();

};

Router.prototype.render = function() {

  // split into parts

  var parts = location.hash.replace(/(^#\/?)|(\/$)/g, '').split('/');
  var state = '';

  for (var i = 0; i < parts.length; i++) {

    state = state + (state !== '' ? '.' : '') + parts[i];

    if (!this.queue[i] || (this.queue[i] && this.queue[i].state !== state)) {

      this.renderState(state, i);

    }

  }

  if (this.queue.length > i) {

    for (var j = i; j < this.queue.length; j++) {

      console.log('Purging remaining state: ' + this.queue[j].state);

      // destroy existing view

      if (this.queue[j].views) {

        for (var viewNew in this.queue[j].views) {

          this.queue[j].views[viewNew].view.destroy();

        }

      } else {

        this.queue[j].view.destroy();

      }

    }

    this.queue.splice(i);

  }

};

Router.prototype.renderState = function(state, cacheIndex) {

  if (!this.config.hasOwnProperty(state)) return console.error('Invalid: State ' + state + ' not defined');

  var config = this.config[state];

  if (config.views) {

    var views = {};

    for (var viewName in config.views) {

      var conf = config.views[viewName];

      var view = new View(conf.template);

      if (cacheIndex === 0) {

        var $el = $('body').find('[ui-view="' + viewName + '"]');

      } else {

        var prior = this.queue[cacheIndex-1];

        var $el = prior.view.getSubview(viewName);

      }

      if (this.queue[cacheIndex]) {

        console.log('Destroying state: ' + this.queue[cacheIndex].state);

        // destroy existing view

        if (this.queue[cacheIndex].views) {

          for (var viewNew in this.queue[cacheIndex].views) {

            this.queue[cacheIndex].views[viewNew].view.destroy();

          }

        } else {

          this.queue[cacheIndex].view.destroy();

        }

      }

      console.log('Rendering partial state: ' + state + ':' + viewName);

      view.render($el);

      views[viewName] = {
        view: view
      };

    }

    this.queue[cacheIndex] = {
      state: state,
      views: views
    };

  } else {

    var view = new View(config.template);

    if (cacheIndex === 0) {

      var $el = $('body').find('[ui-view]');

    } else {

      var prior = this.queue[cacheIndex-1];

      var $el = prior.view.getSubview();

    }

    if (this.queue[cacheIndex]) {

      console.log('Destroying state: ' + this.queue[cacheIndex].state);

      // destroy existing view

      if (this.queue[cacheIndex].views) {

        for (var viewNew in this.queue[cacheIndex].views) {

          this.queue[cacheIndex].views[viewNew].view.destroy();

        }

      } else {

        this.queue[cacheIndex].view.destroy();

      }

    }

    console.log('Rendering state: ' + state);

    view.render($el);

    this.queue[cacheIndex] = {
      state: state,
      view: view
    };

  }

};

module.exports = Router;
},{"jquery":"jquery"}],3:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div id=\"menu\">\n\n    <div id=\"header\">\n        <h1 id=\"app-logo\" title=\"Fiscality\"></h1>\n        <div class=\"logout-button\"></div>\n    </div>\n\n    <ul id=\"nav\">\n        <li class=\"nav-list-item active\" title=\"Accounts\" onclick=\"location.hash = '#/app/accounts'\"></li>\n        <li class=\"nav-list-item\" title=\"Investments\" onclick=\"location.hash = '#/app/investments'\"></li>\n        <li class=\"nav-list-item\" title=\"Spending\"></li>\n        <li class=\"nav-list-item\" title=\"Taxes\"></li>\n        <li class=\"nav-list-item\" title=\"Settings\"></li>\n\n        <a href=\"#/app\">App</a>\n        <a href=\"#/app/accounts\">Accounts</a>\n        <a href=\"#/home\">Home</a>\n    </ul>\n\n    <div id=\"subnav\" ui-view=\"subnav\"></div>\n\n</div>\n\n\n\n\n<div id=\"content\" ui-view=\"content\"></div>\n";
},"useData":true});

},{"hbsfy/runtime":15}],4:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div id=\"accounts-chart\" ui-view=\"chart\"></div>\n\n<div id=\"transactions\" ui-view=\"transactions\"></div>";
},"useData":true});

},{"hbsfy/runtime":15}],5:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<ul class=\"sub-nav\">\n\n    <li class=\"sub-nav-header\">\n        <div class=\"sub-nav-title\">Accounts</div>\n        <div class=\"sub-nav-button\"></div>\n    </li>\n\n    <li class=\"sub-nav-item\">\n        <div class=\"sub-nav-title\">Bank of America Checking</div>\n        <div class=\"sub-nav-subtitle\">1 Minute Ago</div>\n    </li>\n\n    <li class=\"sub-nav-item\">\n        <div class=\"sub-nav-title\">Bank of America Savings</div>\n        <div class=\"sub-nav-subtitle\">30 Minutes Ago</div>\n    </li>\n\n    <li class=\"sub-nav-item\">\n        <div class=\"sub-nav-title\">Capital One 360 Savings</div>\n        <div class=\"sub-nav-subtitle\">1 Hour Ago</div>\n    </li>\n\n    <li class=\"sub-nav-item\">\n        <div class=\"sub-nav-title\">Chase Online Checking</div>\n        <div class=\"sub-nav-subtitle\">2 Hours Ago</div>\n    </li>\n\n    <li class=\"sub-nav-item\">\n        <div class=\"sub-nav-title\">Chase Online Savings</div>\n        <div class=\"sub-nav-subtitle\">1 Day Ago</div>\n    </li>\n\n</ul>";
},"useData":true});

},{"hbsfy/runtime":15}],6:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div id=\"home-layout\">\n\n    <div id=\"home-content\">\n\n        <div id=\"logo-group\">\n            <div class=\"logo\"></div>\n            <span class=\"title\">Fiscality</span>\n        </div>\n\n        <div id=\"home-form\" ui-view></div>\n\n        <a href=\"#/app\">App</a>\n        <a href=\"#/home\">Home</a>\n        <a href=\"#/home/login\">Login</a>\n\n\n    </div>\n\n    <footer id=\"footer\">\n\n        <nav id=\"footer-nav\">\n            <ul>\n                <li class=\"footer-nav-title\">SiteMap</li>\n                <li class=\"footer-nav-item\"><a>Home</a></li>\n                <li class=\"footer-nav-item\"><a>About Fiscality</a></li>\n                <li class=\"footer-nav-item\"><a>Terms of Service</a></li>\n                <li class=\"footer-nav-item\"><a>Privacy Policy</a></li>\n                <li class=\"footer-nav-item\"><a>Contact Us</a></li>\n            </ul>\n        </nav>\n\n        <div id=\"footer-brand\">\n            <div class=\"logo-group\">\n                <span class=\"title\">Fiscality</span>\n                <div class=\"logo\"></div>\n            </div>\n            <div class=\"copyright\">Copyright &copy; 2015 Stack Trace LLC. All Rights Reserved.</div>\n        </div>\n\n    </footer>\n\n</div>";
},"useData":true});

},{"hbsfy/runtime":15}],7:[function(require,module,exports){
module.exports = "<div class=\"form-title\">\n    <h2 class=\"title\">Sign In</h2>\n    <div class=\"description\">Welcome back. Login to start managing your finances.</div>\n</div>\n\n<form data-bind=\"submit:login()\">\n\n    <div class=\"form-group\">\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Enter your email</label>\n            <input class=\"text-field\" type=\"email\" placeholder=\"you@example.com\" data-model=\"email\" spellcheck=\"false\" />\n        </div>\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Enter your password</label>\n            <input class=\"text-field\" type=\"password\" placeholder=\"Password\" data-model=\"password\" />\n            <a id=\"forgot-password-link\" class=\"field-subtitle\" href=\"#/home/forgot\">Forgot your password?</a>\n        </div>\n\n        <input class=\"field-btn submit-btn\" type=\"submit\" value=\"Login\" />\n\n    </div>\n\n</form>\n\n<hr />\n\n<div id=\"register-splash\">\n    <span class=\"message\">Don’t have an account yet?</span>\n    <button class=\"field-btn btn-dark\" onclick=\"location.hash='#/home/register'\">Register</button>\n</div>\n\n<div class=\"shadow\"></div>\n";

},{}],8:[function(require,module,exports){
(function (global){
"use strict";
/*globals Handlebars: true */
var base = require("./handlebars/base");

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)
var SafeString = require("./handlebars/safe-string")["default"];
var Exception = require("./handlebars/exception")["default"];
var Utils = require("./handlebars/utils");
var runtime = require("./handlebars/runtime");

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
var create = function() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = SafeString;
  hb.Exception = Exception;
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function(spec) {
    return runtime.template(spec, hb);
  };

  return hb;
};

var Handlebars = create();
Handlebars.create = create;

/*jshint -W040 */
/* istanbul ignore next */
var root = typeof global !== 'undefined' ? global : window,
    $Handlebars = root.Handlebars;
/* istanbul ignore next */
Handlebars.noConflict = function() {
  if (root.Handlebars === Handlebars) {
    root.Handlebars = $Handlebars;
  }
};

Handlebars['default'] = Handlebars;

exports["default"] = Handlebars;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./handlebars/base":9,"./handlebars/exception":10,"./handlebars/runtime":11,"./handlebars/safe-string":12,"./handlebars/utils":13}],9:[function(require,module,exports){
"use strict";
var Utils = require("./utils");
var Exception = require("./exception")["default"];

var VERSION = "3.0.0";
exports.VERSION = VERSION;var COMPILER_REVISION = 6;
exports.COMPILER_REVISION = COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1'
};
exports.REVISION_CHANGES = REVISION_CHANGES;
var isArray = Utils.isArray,
    isFunction = Utils.isFunction,
    toString = Utils.toString,
    objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials) {
  this.helpers = helpers || {};
  this.partials = partials || {};

  registerDefaultHelpers(this);
}

exports.HandlebarsEnvironment = HandlebarsEnvironment;HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: logger,
  log: log,

  registerHelper: function(name, fn) {
    if (toString.call(name) === objectType) {
      if (fn) { throw new Exception('Arg not supported with multiple helpers'); }
      Utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function(name) {
    delete this.helpers[name];
  },

  registerPartial: function(name, partial) {
    if (toString.call(name) === objectType) {
      Utils.extend(this.partials,  name);
    } else {
      if (typeof partial === 'undefined') {
        throw new Exception('Attempting to register a partial as undefined');
      }
      this.partials[name] = partial;
    }
  },
  unregisterPartial: function(name) {
    delete this.partials[name];
  }
};

function registerDefaultHelpers(instance) {
  instance.registerHelper('helperMissing', function(/* [args, ]options */) {
    if(arguments.length === 1) {
      // A missing field in a {{foo}} constuct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new Exception("Missing helper: '" + arguments[arguments.length-1].name + "'");
    }
  });

  instance.registerHelper('blockHelperMissing', function(context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if(context === true) {
      return fn(this);
    } else if(context === false || context == null) {
      return inverse(this);
    } else if (isArray(context)) {
      if(context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = createFrame(options.data);
        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
        options = {data: data};
      }

      return fn(context, options);
    }
  });

  instance.registerHelper('each', function(context, options) {
    if (!options) {
      throw new Exception('Must pass iterator to #each');
    }

    var fn = options.fn, inverse = options.inverse;
    var i = 0, ret = "", data;

    var contextPath;
    if (options.data && options.ids) {
      contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (isFunction(context)) { context = context.call(this); }

    if (options.data) {
      data = createFrame(options.data);
    }

    function execIteration(key, i, last) {
      if (data) {
        data.key = key;
        data.index = i;
        data.first = i === 0;
        data.last  = !!last;

        if (contextPath) {
          data.contextPath = contextPath + key;
        }
      }

      ret = ret + fn(context[key], {
        data: data,
        blockParams: Utils.blockParams([context[key], key], [contextPath + key, null])
      });
    }

    if(context && typeof context === 'object') {
      if (isArray(context)) {
        for(var j = context.length; i<j; i++) {
          execIteration(i, i, i === context.length-1);
        }
      } else {
        var priorKey;

        for(var key in context) {
          if(context.hasOwnProperty(key)) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array. 
            if (priorKey) {
              execIteration(priorKey, i-1);
            }
            priorKey = key;
            i++;
          }
        }
        if (priorKey) {
          execIteration(priorKey, i-1, true);
        }
      }
    }

    if(i === 0){
      ret = inverse(this);
    }

    return ret;
  });

  instance.registerHelper('if', function(conditional, options) {
    if (isFunction(conditional)) { conditional = conditional.call(this); }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if ((!options.hash.includeZero && !conditional) || Utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function(conditional, options) {
    return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});
  });

  instance.registerHelper('with', function(context, options) {
    if (isFunction(context)) { context = context.call(this); }

    var fn = options.fn;

    if (!Utils.isEmpty(context)) {
      if (options.data && options.ids) {
        var data = createFrame(options.data);
        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
        options = {data:data};
      }

      return fn(context, options);
    } else {
      return options.inverse(this);
    }
  });

  instance.registerHelper('log', function(message, options) {
    var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
    instance.log(level, message);
  });

  instance.registerHelper('lookup', function(obj, field) {
    return obj && obj[field];
  });
}

var logger = {
  methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },

  // State enum
  DEBUG: 0,
  INFO: 1,
  WARN: 2,
  ERROR: 3,
  level: 1,

  // Can be overridden in the host environment
  log: function(level, message) {
    if (typeof console !== 'undefined' && logger.level <= level) {
      var method = logger.methodMap[level];
      (console[method] || console.log).call(console, message);
    }
  }
};
exports.logger = logger;
var log = logger.log;
exports.log = log;
var createFrame = function(object) {
  var frame = Utils.extend({}, object);
  frame._parent = object;
  return frame;
};
exports.createFrame = createFrame;
},{"./exception":10,"./utils":13}],10:[function(require,module,exports){
"use strict";

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var loc = node && node.loc,
      line,
      column;
  if (loc) {
    line = loc.start.line;
    column = loc.start.column;

    message += ' - ' + line + ':' + column;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  if (loc) {
    this.lineNumber = line;
    this.column = column;
  }
}

Exception.prototype = new Error();

exports["default"] = Exception;
},{}],11:[function(require,module,exports){
"use strict";
var Utils = require("./utils");
var Exception = require("./exception")["default"];
var COMPILER_REVISION = require("./base").COMPILER_REVISION;
var REVISION_CHANGES = require("./base").REVISION_CHANGES;
var createFrame = require("./base").createFrame;

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = COMPILER_REVISION;

  if (compilerRevision !== currentRevision) {
    if (compilerRevision < currentRevision) {
      var runtimeVersions = REVISION_CHANGES[currentRevision],
          compilerVersions = REVISION_CHANGES[compilerRevision];
      throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. "+
            "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").");
    } else {
      // Use the embedded version info since the runtime doesn't know about this revision yet
      throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. "+
            "Please update your runtime to a newer version ("+compilerInfo[1]+").");
    }
  }
}

exports.checkRevision = checkRevision;// TODO: Remove this line and break up compilePartial

function template(templateSpec, env) {
  /* istanbul ignore next */
  if (!env) {
    throw new Exception("No environment passed to template");
  }
  if (!templateSpec || !templateSpec.main) {
    throw new Exception('Unknown template object: ' + typeof templateSpec);
  }

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as psuedo-supported APIs.
  env.VM.checkRevision(templateSpec.compiler);

  var invokePartialWrapper = function(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);
    }

    partial = env.VM.resolvePartial.call(this, partial, context, options);
    var result = env.VM.invokePartial.call(this, partial, context, options);

    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, options);
    }
    if (result != null) {
      if (options.indent) {
        var lines = result.split('\n');
        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = options.indent + lines[i];
        }
        result = lines.join('\n');
      }
      return result;
    } else {
      throw new Exception("The partial " + options.name + " could not be compiled when running in runtime-only mode");
    }
  };

  // Just add water
  var container = {
    strict: function(obj, name) {
      if (!(name in obj)) {
        throw new Exception('"' + name + '" not defined in ' + obj);
      }
      return obj[name];
    },
    lookup: function(depths, name) {
      var len = depths.length;
      for (var i = 0; i < len; i++) {
        if (depths[i] && depths[i][name] != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },

    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,

    fn: function(i) {
      return templateSpec[i];
    },

    programs: [],
    program: function(i, data, declaredBlockParams, blockParams, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);
      if (data || depths || blockParams || declaredBlockParams) {
        programWrapper = program(this, i, fn, data, declaredBlockParams, blockParams, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = program(this, i, fn);
      }
      return programWrapper;
    },

    data: function(data, depth) {
      while (data && depth--) {
        data = data._parent;
      }
      return data;
    },
    merge: function(param, common) {
      var ret = param || common;

      if (param && common && (param !== common)) {
        ret = Utils.extend({}, common, param);
      }

      return ret;
    },

    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  var ret = function(context, options) {
    options = options || {};
    var data = options.data;

    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths,
        blockParams = templateSpec.useBlockParams ? [] : undefined;
    if (templateSpec.useDepths) {
      depths = options.depths ? [context].concat(options.depths) : [context];
    }

    return templateSpec.main.call(container, context, container.helpers, container.partials, data, blockParams, depths);
  };
  ret.isTop = true;

  ret._setup = function(options) {
    if (!options.partial) {
      container.helpers = container.merge(options.helpers, env.helpers);

      if (templateSpec.usePartial) {
        container.partials = container.merge(options.partials, env.partials);
      }
    } else {
      container.helpers = options.helpers;
      container.partials = options.partials;
    }
  };

  ret._child = function(i, data, blockParams, depths) {
    if (templateSpec.useBlockParams && !blockParams) {
      throw new Exception('must pass block params');
    }
    if (templateSpec.useDepths && !depths) {
      throw new Exception('must pass parent depths');
    }

    return program(container, i, templateSpec[i], data, 0, blockParams, depths);
  };
  return ret;
}

exports.template = template;function program(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  var prog = function(context, options) {
    options = options || {};

    return fn.call(container,
        context,
        container.helpers, container.partials,
        options.data || data,
        blockParams && [options.blockParams].concat(blockParams),
        depths && [context].concat(depths));
  };
  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}

exports.program = program;function resolvePartial(partial, context, options) {
  if (!partial) {
    partial = options.partials[options.name];
  } else if (!partial.call && !options.name) {
    // This is a dynamic partial that returned a string
    options.name = partial;
    partial = options.partials[partial];
  }
  return partial;
}

exports.resolvePartial = resolvePartial;function invokePartial(partial, context, options) {
  options.partial = true;

  if(partial === undefined) {
    throw new Exception("The partial " + options.name + " could not be found");
  } else if(partial instanceof Function) {
    return partial(context, options);
  }
}

exports.invokePartial = invokePartial;function noop() { return ""; }

exports.noop = noop;function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? createFrame(data) : {};
    data.root = context;
  }
  return data;
}
},{"./base":9,"./exception":10,"./utils":13}],12:[function(require,module,exports){
"use strict";
// Build out our basic SafeString type
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
  return "" + this.string;
};

exports["default"] = SafeString;
},{}],13:[function(require,module,exports){
"use strict";
/*jshint -W004 */
var escape = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#x27;",
  "`": "&#x60;"
};

var badChars = /[&<>"'`]/g;
var possible = /[&<>"'`]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj /* , ...source */) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

exports.extend = extend;var toString = Object.prototype.toString;
exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
var isFunction = function(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
/* istanbul ignore next */
if (isFunction(/x/)) {
  isFunction = function(value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
var isFunction;
exports.isFunction = isFunction;
/* istanbul ignore next */
var isArray = Array.isArray || function(value) {
  return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;
};
exports.isArray = isArray;
// Older IE versions do not directly support indexOf so we must implement our own, sadly.
function indexOf(array, value) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}

exports.indexOf = indexOf;
function escapeExpression(string) {
  // don't escape SafeStrings, since they're already safe
  if (string && string.toHTML) {
    return string.toHTML();
  } else if (string == null) {
    return "";
  } else if (!string) {
    return string + '';
  }

  // Force a string conversion as this will be done by the append regardless and
  // the regex test will do this transparently behind the scenes, causing issues if
  // an object's to string has escaped characters in it.
  string = "" + string;

  if(!possible.test(string)) { return string; }
  return string.replace(badChars, escapeChar);
}

exports.escapeExpression = escapeExpression;function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

exports.isEmpty = isEmpty;function blockParams(params, ids) {
  params.path = ids;
  return params;
}

exports.blockParams = blockParams;function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}

exports.appendContextPath = appendContextPath;
},{}],14:[function(require,module,exports){
// Create a simple path alias to allow browserify to resolve
// the runtime on a supported path.
module.exports = require('./dist/cjs/handlebars.runtime').default;

},{"./dist/cjs/handlebars.runtime":8}],15:[function(require,module,exports){
module.exports = require("handlebars/runtime")["default"];

},{"handlebars/runtime":14}]},{},[1])


//# sourceMappingURL=app.min.js.map