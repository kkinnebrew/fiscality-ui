(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * @file app.js
 * @author kkinnebrew
 * @date 2.1.2015
 */

var $ = require('jquery');
var Router = require('./common/router');
var HandlebarsCompiler = require('hbsfy/runtime');
window.jQuery = $;
require('jquery-circle-progress');
require('datejs');

function numberWithCommas(x) {
  var parts = x.toString().split(".");
  parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  return parts.join(".");
}

HandlebarsCompiler.registerHelper('currency', function(d, sign) {
  sign = typeof sign === 'string' ? sign : '';
  if (d === undefined || d === null) return '';
  return d >= 0 ? (sign + numberWithCommas(d.toFixed(2))) : ('-' + sign + numberWithCommas(Math.abs(d).toFixed(2)));
});

HandlebarsCompiler.registerHelper('dateFormat', function(d, f) {
  if (d === undefined || d === null) return '';
  return Date.parse(d).toString(f);
});


var router = new Router($('body'));

router.otherwise('/home/login');

router.register('home', {
  redirect: '/home/login',
  template: require('../templates/home.hbs')
});

router.register('home.login', {
  template: require('../templates/home/login.html'),
  viewModel: require('./viewmodels/home/login')
});

router.register('home.register', {
  template: require('../templates/home/register.html'),
  viewModel: require('./viewmodels/home/register')
});

router.register('home.forgot', {
  template: require('../templates/home/forgot.html'),
  viewModel: require('./viewmodels/home/forgot')
});

router.register('home.reset', {
  template: require('../templates/home/reset.html'),
  viewModel: require('./viewmodels/home/reset')
});

router.register('app', {
  redirect: '/app/accounts',
  template: require('../templates/app.hbs'),
  view: require('./views/app.js'),
  viewModel: require('./viewmodels/app')
});

router.register('app.accounts', {
  url: '/app/accounts/:accountId',
  views: {
    'subnav': {
      template: require('../templates/app/accounts/subnav.hbs'),
      view: require('./views/app/accounts/subnav'),
      viewModel: require('./viewmodels/app/accounts/subnav')
    },
    'content': {
      template: require('../templates/app/accounts/content.hbs')
    },
    'chart@content': {
      template: require('../templates/app/accounts/chart.hbs'),
      view: require('./views/app/accounts/chart'),
      viewModel: require('./viewmodels/app/accounts/chart')
    },
    'transactions@content': {
      template: require('../templates/app/accounts/transactions.hbs'),
      view: require('./views/app/accounts/transactions'),
      viewModel: require('./viewmodels/app/accounts/transactions')
    }
  }
});

router.register('app.investments', {
  views: {
    'subnav': {
      template: require('../templates/app/investments/subnav.hbs'),
      view: require('./views/app/investments/subnav')
    },
    'content': {
      template: require('../templates/app/investments/content.hbs')
    }
  }
});

$(document).ready(function() {
  router.listen();
});

window.App = router;
},{"../templates/app.hbs":22,"../templates/app/accounts/chart.hbs":23,"../templates/app/accounts/content.hbs":24,"../templates/app/accounts/subnav.hbs":25,"../templates/app/accounts/transactions.hbs":26,"../templates/app/investments/content.hbs":27,"../templates/app/investments/subnav.hbs":28,"../templates/home.hbs":29,"../templates/home/forgot.html":30,"../templates/home/login.html":31,"../templates/home/register.html":32,"../templates/home/reset.html":33,"./common/router":3,"./viewmodels/app":9,"./viewmodels/app/accounts/chart":10,"./viewmodels/app/accounts/subnav":11,"./viewmodels/app/accounts/transactions":12,"./viewmodels/home/forgot":13,"./viewmodels/home/login":14,"./viewmodels/home/register":15,"./viewmodels/home/reset":16,"./views/app.js":17,"./views/app/accounts/chart":18,"./views/app/accounts/subnav":19,"./views/app/accounts/transactions":20,"./views/app/investments/subnav":21,"datejs":"datejs","hbsfy/runtime":41,"jquery":"jquery","jquery-circle-progress":"jquery-circle-progress"}],2:[function(require,module,exports){
var $ = require('jquery');
var _ = require('underscore');


// ------------------------------------------------------------------------------------------------
// Class Object
// ------------------------------------------------------------------------------------------------

var Class = (function() {

  var initializing = false;
  var fnTest = /\b_super\b/;

  function ObjectClass() {}

  ObjectClass.extend = function(def) {

    var prototype;
    var name;
    var _super = this.prototype;

    initializing = true;
    prototype = new this();
    initializing = false;

    for (name in def) {
      prototype[name] = typeof def[name] === "function" && typeof _super[name] === "function" && fnTest.test(def[name]) ? (function(name, fn) {
        return function() {
          var tmp = this._super;
          this._super = _super[name];
          var ret = fn.apply(this, arguments);
          this._super = tmp;
          return ret;
        };
      }(name, def[name])) : def[name];
    }

    function Class() {
      if (!initializing && this.initialize) {
        this.initialize.apply(this, arguments);
      }
    }

    Class.prototype = prototype;
    Class.prototype.constructor = Class;

    Class.extend = ObjectClass.extend;
    Class.mixin = ObjectClass.mixin;

    return Class;

  };

  ObjectClass.mixin = function(def) {

    var key;
    var value;
    var ref;

    if (!def) {
      throw 'Missing definition';
    }

    for (key in def) {
      value = def[key];
      if (Array.prototype.indexOf.call(['extend', 'include'], key) < 0) {
        this.prototype[key] = value;
      }
    }

    return this;

  };

  return ObjectClass;

}());

// ------------------------------------------------------------------------------------------------
// EventTarget Object
// ------------------------------------------------------------------------------------------------

EventTarget = (function() {

  function EventTarget(type, currentTarget, target, data) {

    this.bubbles         = true;
    this.currentTarget   = currentTarget;
    this.data            = data;
    this.target          = target;
    this.type            = type;

  }

  EventTarget.prototype.stopPropagation = function() {
    this.bubbles = false;
  };

  return EventTarget;

}());


// ------------------------------------------------------------------------------------------------
// EventHandle Object
// ------------------------------------------------------------------------------------------------

EventHandle = (function() {

  function EventHandle(target, ev, call) {

    this.call      = call;
    this.ev        = ev;
    this.target    = target;

  }

  EventHandle.prototype.detach = function() {

    this.target.detach(this.ev, this.call);

    delete this.target;
    delete this.ev;
    delete this.call;

  };

  return EventHandle;

}());


// ------------------------------------------------------------------------------------------------
// EventTarget Object
// ------------------------------------------------------------------------------------------------

EventTarget = (function() {

  function EventTarget(type, currentTarget, target, data) {

    this.bubbles         = true;
    this.currentTarget   = currentTarget;
    this.data            = data;
    this.target          = target;
    this.type            = type;

  }

  EventTarget.prototype.stopPropagation = function() {
    this.bubbles = false;
  };

  return EventTarget;

}());


// ------------------------------------------------------------------------------------------------
// EventHandle Object
// ------------------------------------------------------------------------------------------------

EventHandle = (function() {

  function EventHandle(target, ev, call) {

    this.call      = call;
    this.ev        = ev;
    this.target    = target;

  }

  EventHandle.prototype.detach = function() {

    this.target.detach(this.ev, this.call);

    delete this.target;
    delete this.ev;
    delete this.call;

  };

  return EventHandle;

}());


// ------------------------------------------------------------------------------------------------
// Events Mixin
// ------------------------------------------------------------------------------------------------

Events = {

  on: function(ev, call, context) {

    var fn = typeof context !== 'undefined' ? proxy(call, context) : call;

    if (!this._listeners) { this._listeners = {}; }
    if (!this._listeners.hasOwnProperty(ev)) { this._listeners[ev] = []; }
    this._listeners[ev].push(fn);

    return new EventHandle(this, ev, fn);

  },

  once: function(ev, call, context) {

    var fn = typeof context !== 'undefined' ? proxy(call, context) : call;

    var wrap = function() {
      call.apply(this, arguments);
      this.detach(ev, fn);
    };

    this.on(ev, wrap);

  },

  fire: function(ev, data) {

    var parent = this._parent || null;
    var evName = ev;

    if (typeof ev === 'string') {
      ev = new EventTarget(ev, this, this, data);
    }

    if (typeof ev.type !== 'string') {
      throw "Error: Invalid 'type' when firing event";
    }

    if (!this._listeners) { this._listeners = {}; }
    if (this._listeners[ev.type] instanceof Array) {
      var listeners = this._listeners[ev.type];
      for (var i = 0, len = listeners.length; i < len; i++) {
        listeners[i].call(this, ev, data);
      }
    }

    if (parent != null && ev.bubbles && evName[0] !== '_') {
      ev.currentTarget = this._parent;
      parent.fire.call(parent, ev, data);
    }

  },

  detach: function(ev, fn) {

    var listeners = [];

    if (!this._listeners) {
      this._listeners = {};
    }

    if (typeof ev === 'undefined') {
      this._listeners = {};
    } else if (this._listeners[ev] instanceof Array) {
      if (typeof fn !== 'undefined') {
        listeners = this._listeners[ev];
        for (var i = 0, len = listeners.length; i < len; i++) {
          if (listeners[i] === fn) {
            listeners.splice(i, 1);
            break;
          }
        }
      } else {
        this._listeners[ev] = [];
      }
    }

  }

};

Class.mixin(Events);

$.fn.childrenTo = function(selector) {
  var childList = [];
  var that = this;
  this.find(selector).each(function() {
    var include = false, parent = $(this).parent();
    while (parent.length !== 0 && !include) {
      if ($(parent).not($(that)).length === 0) {
        include = true; break;
      } else if ($(parent).not('[data-control]').length === 0) {
        include = false; break;
      } parent = $(parent).parent();
    }
    if (include) { childList.push($(this)); }
  });
  return childList;
};

module.exports.Class = Class;
},{"jquery":"jquery","underscore":"underscore"}],3:[function(require,module,exports){
var $ = require('jquery');
var View = require('./view');

function Router($root) {

  /**
   * stores reference to root element of document
   * @type {jQuery}
   */
  this.$root = $root;

  /**
   * stores route registrations
   * @type {Object}
   */
  this.config = {};

  /**
   * caches rendered nodes in the view hierarchy for reuse
   * @type {Array}
   */
  this.queue = [];

  /**
   * stores the state to render if the hash is empty
   * @type {string}
   */
  this.defaultState = null;

}

Router.prototype.goto = function(state, params) {

  var config = this.getConfig(state);

  if (config) {
    if (config.url) {
      var replacedUrl = config.url;
      if (params && Object.keys(params).length > 0) {
        for (var param in params) {
          replacedUrl = replacedUrl.replace(':' + param, params[param]);
          console.log(replacedUrl);
        }
      }
      location.hash = '#' + replacedUrl;
    } else {
      location.hash = '#' + state.replace('.', '/');
    }
  } else {
    console.error('Invalid state specified: ' + state);
  }

};

/**
 * register the state to render if an empty hash is passed
 * @method otherwise
 * @param state
 */
Router.prototype.otherwise = function(state) {

  this.defaultState = state.replace(/(^\/?)|(\/$)/g, '');

};

/**
 * registers a state along with it's configuration values
 * @method register
 * @param state
 * @param config
 */
Router.prototype.register = function(state, config) {

  var parts = state.split('.');
  var last = null;
  var part = null;

  while (parts.length) {

    part = parts.shift();

    if (!last) {
      last = this.config;
    }

    if (parts.length == 0) {

      if (last.hasOwnProperty(part)) {
        console.warn('Overriding existing route ' + state);
      }

      config.params = [];

      if (config.url) {

        config.params = config.url.match(/:(\w+)/g) || [];

      }

      last[part] = {
        config: config,
        children: {}
      };

    } else {

      if (!last.hasOwnProperty(part)) {
        return console.error('Parent route not defined');
      }

      last = last[part].children;

    }

  }

};

/**
 * activates the router to begin listening for hash changes
 * @method listen
 */
Router.prototype.listen = function() {

  $(window).on('hashchange', $.proxy(this.render, this));

  this.render();

};

/**
 * REturns the configuration option for a given state, or null
 * @param state
 * @returns {*}
 */
Router.prototype.getConfig = function(state) {

  var parts = state.split('.');

  var part = null;
  var last = null;

  while (parts.length) {

    part = parts.shift();

    if (!last) {
      last = this.config;
    }

    if (!last.hasOwnProperty(part)) {
      return console.error('State ' + state + ' not defined');
    }

    if (parts.length == 0) {
      return last[part].config;
    } else {
      last = last[part].children;
    }

  }

};


/**
 * renders the overall hash path using cached views when available
 * @method render
 */
Router.prototype.render = function() {

  var parts = location.hash.replace(/(^#\/?)|(\/$)/g, '').split('/');

  if (parts.length === 1 && parts[0] === '' && this.defaultState) {

    // redirect to default state

    console.log('Redirecting to path: ' + this.defaultState);
    return location.hash = '#/' + this.defaultState;

  }

  var part = null;
  var state = null;
  var config = null;
  var params = null;
  var depth = 0;

  while (parts.length) {

    part = parts.shift();

    state = state ? state + '.' + part : part;

    config = this.getConfig(state);

    if (!config) {
      return console.error('Invalid route ' + state);
    }

    if (config.params) {
      params = {};
      for (var i = 0; i < config.params.length; i++) {
        params[config.params[i].replace(':', '')] = parts.shift();
      }
    }

    if (!this.queue[depth] || this.queue[depth].state !== state) {
      this.renderState(state, config, depth, params);
    } else if (this.queue[depth] && this.queue[depth].viewModel) {
      this.queue[depth].viewModel.setValues(params);
    } else if (this.queue[depth] && this.queue[depth].views) {
      var views = this.queue[depth].views;
      for (var view in views) {
        if (views[view].viewModel) {
          views[view].viewModel.setValues(params);
        }
      }
    }

    depth++;

  }

  if (config.redirect) {

    var redirect = config.redirect.replace(/(^#?\/?)|(\/$)/g, '');

    console.log('Redirecting to path: ' + redirect);

    return location.hash = '#/' + redirect;

  }

  if (this.queue.length > depth) {

    for (var j = depth; j < this.queue.length; j++) {

      // destroy existing view

      this._destroyState(j);

    }

    this.queue.splice(depth);

  }


};

/**
 * renders a given state based on it's configuration
 * @param state
 * @param config
 * @param depth
 * @param [params]
 */
Router.prototype.renderState = function(state, config, depth, params) {

  if (config.views) {

    var views = {};

    if (this.queue[depth]) {
      this._destroyState(depth);
    }

    for (var name in config.views) {
      if (!name.match(/@/)) {
        views[name] = this._renderView(config.views[name], depth, name, params);
        console.log('Rendering partial state: ' + state + ':' + name);
      }
    }

    this.queue[depth] = {
      state: state,
      views: views
    };

    for (var name in config.views) {
      if (name.match(/@/)) {
        views[name] = this._renderAbsoluteView(config.views[name], depth, name, params);
        console.log('Rendering absolute state: ' + state + ':' + name);
      }
    }

  } else {

    if (this.queue[depth]) {
      this._destroyState(depth);
    }

    this.queue[depth] = this._renderView(config, depth, undefined, params);
    this.queue[depth].state = state;

    console.log('Rendering state: ' + state);

  }

};


/**
 * @private
 * @param config
 * @param depth
 * @param [name]
 * @param params
 * @returns {{view: View}}
 */
Router.prototype._renderView = function(config, depth, name, params) {

  var view = null;
  var viewModel = null;

  if (config.viewModel) {
    viewModel = new config.viewModel(params);
  }

  if (config.view) {
    view = new config.view(config.template, viewModel || undefined);
  } else {
    view = new View(config.template, viewModel || undefined);
  }

  var $el = null;

  if (depth === 0) {

    $el = this.$root.find(name ? '[ui-view="' + name + '"]' : '[ui-view]');

    view.render($el);

  } else {

    var prior = this.queue[depth-1];

    prior.view.renderSubview(name || undefined, view);

  }

  var node = {
    view: view
  };

  if (viewModel) {
    node.viewModel = viewModel;
  }

  return node;

};

/**
 * renders an absolute view in the router hierarchy
 * @param config
 * @param depth
 * @param name
 * @param params
 * @returns {{view: View}}
 * @private
 */
Router.prototype._renderAbsoluteView = function(config, depth, name, params) {

  var view = null;
  var viewModel = null;

  if (config.viewModel) {
    viewModel = new config.viewModel(params);
  }

  if (config.view) {
    view = new config.view(config.template, viewModel || undefined);
  } else {
    view = new View(config.template, viewModel || undefined);
  }

  var parts = name.split('@');
  var target = parts[0];
  var context = parts[1];

  var queueItem = this.queue[depth];

  if (!queueItem.views.hasOwnProperty(context)) {
    return console.error('Absolute view context "' + context + '" not defined');
  }

  queueItem.views[context].view.renderSubview(target, view);

  var node = {
    view: view
  };

  if (viewModel) {
    node.viewModel = viewModel;
  }

  return node;

};

/**
 * @private
 * @param cacheIndex
 */
Router.prototype._destroyState = function(depth) {

  console.log('Destroying state: ' + this.queue[depth].state);

  // store reference

  var item = this.queue[depth];

  // destroy existing view

  if (item.views) {

    for (var name in item.views) {

      item.views[name].view.destroy();

    }

  } else {

    item.view.destroy();

  }

};

module.exports = Router;
},{"./view":4,"jquery":"jquery"}],4:[function(require,module,exports){
var $ = require('jquery');

function View(template, viewModel) {

  /**
   * stores a copy of the template provided to the view
   * @param {Function|string}
   */
  this.template = template;

  /**
   * holds a reference to where the view is rendered into the DOM
   * @type {jQuery}
   */
  this.$el = null;

  /**
   * whether or not the view has been rendered
   * @type {boolean}
   */
  this.rendered = false;

  /**
   * stores the view model if one is defined
   * @type {ViewModel}
   */
  this.viewModel = viewModel || null;

}

/**
 * renders the view directly into a given element
 * @method render
 * @param $el
 */
View.prototype.render = function($el) {

  // check if rendered

  if (this.rendered) {
    return console.warn('View is already rendered');
  }

  // store reference to DOM

  this.$el = $el;

  // render the template

  var html = typeof this.template === 'function' ? this.template(this.viewModel || {}) : this.template;

  this.$el.html(html);

  this.rendered = true;

  // bind event handlers TODO: handle all propagating events

  this.$el.find('[ui-view]').on('click', function(e) {
    e.stopPropagation();
  });

  this.preprocess();

  this.bind();

  // bind view model refresh

  if (this.viewModel) {

    this.viewModel.on('refresh', $.proxy(this.refresh, this));

  }

};

View.prototype.refresh = function() {

  if (!this.rendered) {
    return console.warn('Cannot refreshed unrendered view');
  }

  var that = this;

  // unbind event handlers

  this.unbind();

  // remove preprocess handlers

  this.postprocess();

  // remove propagation stops

  this.$el.find('[ui-view]').off('click');

  // store references to subviews

  var $subviews = this.$el.find('[ui-view]');

  // remove views

  this.$el.empty();

  // rerender view

  var html = typeof this.template === 'function' ? this.template(this.viewModel || {}) : this.template;

  this.$el.html(html);

  // preprocess template

  this.preprocess();

  // bind events

  this.bind();

  // repopulate subviews

  $subviews.each(function() {

    var name = $(this).attr('ui-view');

    that.$el.find('[ui-view="' + name + '"]').replaceWith(this);

  });

  // bind prop stops

  this.$el.find('[ui-view]').on('click', function(e) {
    e.stopPropagation();
  });

};

View.prototype.sync = function() {

  var that = this;

  this.$el.find('[data-model]').each(function() {

    var model = $(this).attr('data-model');
    var tagName = $(this).prop('tagName').toLowerCase();

    if (tagName === 'input' || tagName === 'textarea' || tagName === 'select') {
      that.viewModel[model] = $(this).val();
    }

  });

};

View.prototype.preprocess = function() {

  var that = this;

  this.$el.find('[data-model]').each(function() {

    var model = $(this).attr('data-model');
    var tagName = $(this).prop('tagName').toLowerCase();

    if (tagName === 'input' || tagName === 'textarea' || tagName === 'select') {
      that.viewModel[model] = $(this).val();
    }

    if (tagName === 'input' || tagName === 'textarea') {
      $(this).on('keyup', function() {
        that.viewModel[model] = $(this).val();
      });
      $(this).on('blur', function() {
        that.viewModel[model] = $(this).val();
      });
    }

    if (tagName === 'select') {
      $(this).on('change', function() {
        that.viewModel[model] = $(this).val();
      });
      $(this).on('blur', function() {
        that.viewModel[model] = $(this).val();
      });
    }

  });

  this.$el.find('[data-bind]').each(function() {

    var bind = $(this).attr('data-bind');

    var parts = bind.match(/(.+):(.+)\((.*)\)/);
    var event = parts[1];
    var method = parts[2];

    var args = parts[3] ? parts[3].replace(/\s/g, '').split(',') : [];

    if (that.viewModel) {
      $(this).on(event, function (e) {
        e.preventDefault(); // TODO temporary
        that.sync();
        that.viewModel.execute(method, args);
      });

    }

  });

  this.$el.find('[data-link]').each(function() {

    $(this).on('click', function() {
      var link = $(this).attr('data-link');
      console.log('Redirect to: ' + link);
      location.hash = '#' + link;
      //window.App.goto(link);
    });

  });

};

View.prototype.postprocess = function() {

  this.$el.find('[data-link]').each(function() {
    $(this).off('click');
  });

  this.$el.find('[data-bind]').each(function() {

    var bind = $(this).attr('data-bind');

    var parts = bind.match(/(.+):(.+)\((.*)\)/);
    var event = parts[1];

    $(this).off(event);

  });

  this.$el.find('[data-model]').each(function() {

    var model = $(this).attr('data-model');
    var tagName = $(this).prop('tagName').toLowerCase();

    if (tagName === 'input' || tagName === 'textarea') {
      $(this).off('keyup');
      $(this).off('blur');
    }

    if (tagName === 'select') {
      $(this).off('change');
      $(this).off('blur');
    }

  });

};

/**
 * method called after rendering when events should be bound
 * @method bind
 */
View.prototype.bind = function() {

};

/**
 * method called prior to destroying all DOM references, when events should be unbound
 * @method unbind
 */
View.prototype.unbind = function() {

};

/**
 * destroys the currently rendered view and returns it to its unrendered state
 * @method destroy
 */
View.prototype.destroy = function() {

  if (!this.rendered) {
    return console.warn('Unrendered view cannot be destroyed');
  }

  this.$el.find('[ui-view]').off('click');

  this.unbind();

  this.$el.empty();

  this.$el = null;

  this.rendered = false;

};

/**
 * returns a view reference to a subview
 * @method getSubview
 * @param name
 * @returns {*}
 */
View.prototype.getSubview = function(name) {

  var subview = null;

  if (name) {
    subview = this.$el.find('[ui-view="' + name + '"]');
  } else {
    subview = this.$el.find('[ui-view]');
  }

  if (subview.length === 0) {
    console.error('Subview' + (name ? ' with name "' + name  + '"' : '')  + ' not found');
  }

  return subview;

};


View.prototype.renderSubview = function(name, view) {

  var $subview = this.getSubview(name);

  view.render($subview);

};

module.exports = View;
},{"jquery":"jquery"}],5:[function(require,module,exports){
var Class = require('./clementine').Class;

var ViewModel = Class.extend({

  initialize: function() {

    this.refresh();

  },

  /**
   * sets an individual value on the view model and refresh if necessary
   * @param name
   * @param value
   */
  setValue: function(name, value) {

    if (this.hasOwnProperty(name) && this[name] !== value) {

      this[name] = value;

      this.refresh();

    }

  },

  /**
   * sets multiple values on the view model refreshing if necessary after all are set
   * @param values
   */
  setValues: function(values) {

    var changed = false;

    for (var name in values) {

      if (this.hasOwnProperty(name) && this[name] !== values[name]) {

        this[name] = values[name];

        changed = true;

      }

    }

    if (changed) {
      this.refresh();
    }


  },

  refresh: function() {
    this.fire('refresh');
  },

  execute: function(method, args) {

    if (typeof this[method] !== 'function') {
      console.error('Unknown method on viewmodel: ' + method);
    }

    var values = [];

    for (var i = 0; i < args.length; i++) {
      if (!this.hasOwnProperty(args[i])) {
        console.error('Unknown property on viewmodel: ' + args[i]);
      } else {
        values.push(this[args[i]]);
      }
    }

    this[method].apply(this, values);

  }

});

module.exports = ViewModel;
},{"./clementine":2}],6:[function(require,module,exports){
var $ = require('jquery');

var baseUrl = require('./config').getBaseUrl();

function getAuthToken() {

  var authToken = localStorage.getItem('authToken');

  if (!authToken) {
    alert('unauthorized');
    location.hash = '#/home/login';
  }

  return authToken;

}

module.exports = {

  login: function(email, password) {
    return $.ajax({
      type: 'POST',
      url: baseUrl + '/api/login',
      data: JSON.stringify({
        email: email,
        password: password
      }),
      contentType: 'application/json;charset=UTF-8',
      success: function(user) {
        console.log('setting token: ', user.sessionId);
        localStorage.setItem('authToken', user.sessionId);
      }
    });
  },

  register: function(firstName, lastName, email, password) {
    return $.ajax({
      type: 'POST',
      url: baseUrl + '/api/register',
      data: JSON.stringify({
        firstName: firstName,
        lastName: lastName,
        email: email,
        password: password
      }),
      contentType: 'application/json;charset=UTF-8'
    });
  },

  forgotPassword: function(email) {
    return $.ajax({
      type: 'POST',
      url: baseUrl + '/api/forgotpassword',
      data: JSON.stringify({
        email: email
      }),
      contentType: 'application/json;charset=UTF-8'
    });
  },

  resetPassword: function(password, confirm) {
    return $.ajax({
      type: 'POST',
      url: baseUrl + '/api/changepassword',
      data: JSON.stringify({
        resetCode: '',
        password: password,
        confirm: confirm
      }),
      contentType: 'application/json;charset=UTF-8'
    });
  },

  logout: function() {
    return $.ajax({
      type: 'GET',
      url: baseUrl + '/api/logout',
      headers: {
        'X-Auth-Token': getAuthToken()
      },
      contentType: 'application/json;charset=UTF-8',
      success: function(user) {
        localStorage.removeItem('authToken');
        window.cache = {
          transactions: {},
          balances: {},
          accounts: null
        };
      }
    });
  }

};
},{"./config":7,"jquery":"jquery"}],7:[function(require,module,exports){
module.exports = {
  BASE_URL: {
    PROD: 'https://fiscality-api.herokuapp.com',
    DEV: 'http://localhost:9000'
  },
  ENV: 'PROD',
  getBaseUrl: function() {
    return this.BASE_URL[this.ENV];
  }
};
},{}],8:[function(require,module,exports){
var $ = require('jquery');
var _ = require('underscore');

var baseUrl = require('./config').getBaseUrl();

window.cache = {
  transactions: {},
  balances: {},
  accounts: null
};

function getAuthToken() {

  var authToken = localStorage.getItem('authToken');

  if (!authToken) {
    alert('unauthorized');
    location.hash = '#/home/login';
  }

  return authToken;

}

function handleError(xhr) {

  if (xhr.status == 401) {
    alert('unauthorized');
    location.hash = '#/home/login';
    window.cache = {
      transactions: {},
      balances: {},
      accounts: null
    };

  }

}

module.exports = {

  transactions: function(accountId) {

    if (!accountId) {
      var deferred = $.Deferred();
      deferred.reject();
      return deferred;
    }

    if (cache.transactions[accountId]) {
      var deferred = $.Deferred();
      //console.log('cache load');
      deferred.resolve(cache.transactions[accountId]);
      return deferred;
    } else {
      return $.ajax({
        type: 'GET',
        url: baseUrl + '/api/accounts/' + accountId + '/transactions',
        contentType: 'application/json;charset=UTF-8',
        headers: {
          'X-Auth-Token': getAuthToken()
        },
        success: function(data) {
          //console.log('ajax load');
          cache.transactions[accountId] = data;
        },
        error: handleError
      });
    }
  },

  //types: function() {
  //  return $.ajax({
  //    type: 'GET',
  //    url: baseUrl + '/api/transactions/types',
  //    contentType: 'application/json;charset=UTF-8'
  //  });
  //},

  accounts: function() {
    if (cache.accounts) {
      var deferred = $.Deferred();
      //console.log('cache load');
      deferred.resolve(cache.accounts);
      return deferred;
    } else {
      return $.ajax({
        type: 'GET',
        url: baseUrl + '/api/accounts',
        contentType: 'application/json;charset=UTF-8',
        headers: {
          'X-Auth-Token': getAuthToken()
        },
        success: function(data) {
          //console.log('ajax load');
          cache.accounts = data;
        },
        error: handleError
      });
    }

  },

  account: function(accountId) {
    if (!accountId) {
      var deferred = $.Deferred();
      deferred.reject();
      return deferred;
    }

    if (cache.accounts) {
      var deferred = $.Deferred();
      //console.log('cache load');
      var account = _.find(cache.accounts, function(account) {
        return account.accountId === accountId;
      });
      deferred.resolve(account);
      return deferred;
    } else {
      return $.ajax({
        type: 'GET',
        url: baseUrl + '/api/accounts/' + accountId,
        contentType: 'application/json;charset=UTF-8',
        headers: {
          'X-Auth-Token': getAuthToken()
        },
        success: function(data) {
          //console.log('ajax load');
          //cache.accounts = data;
        },
        error: handleError
      });
    }

  },

  balance: function(accountId) {
    if (!accountId) {
      var deferred = $.Deferred();
      deferred.reject();
      return deferred;
    }

    if (cache.balances.hasOwnProperty(accountId)) {
      var deferred = $.Deferred();
      //console.log('cache load');
      deferred.resolve(cache.balances[accountId]);
      return deferred;
    } else {
      return $.ajax({
        type: 'GET',
        url: baseUrl + '/api/accounts/' + accountId + '/balance',
        contentType: 'application/json;charset=UTF-8',
        headers: {
          'X-Auth-Token': getAuthToken()
        },
        success: function(data) {
          //console.log('ajax load', data);
          cache.balances[accountId] = data;
        },
        error: handleError
      });
    }

  }

};
},{"./config":7,"jquery":"jquery","underscore":"underscore"}],9:[function(require,module,exports){
var ViewModel = require('../common/viewmodel');
var auth = require('../services/auth');

var AppViewModel = ViewModel.extend({

  initialize: function() {

    this.name = 'AppViewModel';

    this._super();

  },

  logout: function() {

    auth.logout().then(function() {
      window.App.goto('home.login');
    }, function() {
      console.error('Error logging out');
    })

  }

});

module.exports = AppViewModel;
},{"../common/viewmodel":5,"../services/auth":6}],10:[function(require,module,exports){
var transactionsAPI = require('../../../services/transactions');

var ViewModel = require('../../../common/viewmodel');
var _ = require('underscore');

var ChartViewModel = ViewModel.extend({

  initialize: function(params) {

    this.accountId = params.accountId || null;
    this.account = null;
    this.balance = null;

    this._super();

  },

  refresh: function() {

    this.fire('prefresh');

    var that = this;

    if (this.accountId) {

      transactionsAPI.account(this.accountId).then(function(account) {

        transactionsAPI.balance(that.accountId).then(function(balance) {

          that.account = account;
          that.balance = balance || 0;

          ViewModel.prototype.refresh.call(that);

        }, function() {
          console.log('Error');
        });

      }, function () {
        console.log('Error');
      });

    } else {

      setTimeout(function() {

        that.account = null;
        that.balance = null;

        ViewModel.prototype.refresh.call(that);

      }, 0);

    }

  }

});

module.exports = ChartViewModel;
},{"../../../common/viewmodel":5,"../../../services/transactions":8,"underscore":"underscore"}],11:[function(require,module,exports){
var transactionsAPI = require('../../../services/transactions');
var ViewModel = require('../../../common/viewmodel');
var _ = require('underscore');

var SubNavViewModel = ViewModel.extend({

  initialize: function(params) {

    var that = this;

    console.log('initialize subnav');

    this.accounts = [];
    this.accountId = params.accountId || null;

    transactionsAPI.accounts().then(function(data) {
      that.accounts = data.reverse();
      that.refresh();
    }, function() {
      console.log('Error');
    });

  },

  refresh: function() {

    if (!this.accountId && this.accounts.length > 0) {
      window.App.goto('app.accounts', { accountId: this.accounts[0].accountId });
    }

    this._super();

  }

});

module.exports = SubNavViewModel;
},{"../../../common/viewmodel":5,"../../../services/transactions":8,"underscore":"underscore"}],12:[function(require,module,exports){
var transactionsAPI = require('../../../services/transactions');
var ViewModel = require('../../../common/viewmodel');
var _ = require('underscore');

var TransactionsViewModel = ViewModel.extend({

  initialize: function(params) {

    this.accountId = params.accountId || null;
    this.transactions = [];

    this._super();

  },

  refresh: function() {

    this.fire('prefresh');

    var that = this;

    if (this.accountId) {

      transactionsAPI.transactions(this.accountId).then(function (data) {

        var balance = 0;

        that.transactions = _.sortBy(data, 'transactionDate');
        that.transactions = _.map(that.transactions, function(item) {
          item.amount = item.debitAmount - item.creditAmount;
          item.balance = balance = balance + item.debitAmount - item.creditAmount;
          return item;
        });

        that.transactions.reverse();

        ViewModel.prototype.refresh.call(that);

      }, function () {
        console.log('Error');
      });

    } else {

      this.transactions = [];

      ViewModel.prototype.refresh.call(that);

    }

  }

});

module.exports = TransactionsViewModel;
},{"../../../common/viewmodel":5,"../../../services/transactions":8,"underscore":"underscore"}],13:[function(require,module,exports){
var ViewModel = require('../../common/viewmodel');
var auth = require('../../services/auth');

var ForgotViewModel = ViewModel.extend({

  forgotPassword: function(email) {

    console.log('forgot', email);

    if (!email) {
      return console.warn('Invalid email');
    }

    auth.forgotPassword(email).then(function() {
      window.App.goto('home.login');
    }, function() {
      console.log('Error');
    });

  }

});

module.exports = ForgotViewModel;

},{"../../common/viewmodel":5,"../../services/auth":6}],14:[function(require,module,exports){
var ViewModel = require('../../common/viewmodel');
var auth = require('../../services/auth');

var LoginViewModel = ViewModel.extend({

  login: function(email, password) {

    console.log('logging in', email, password);

    if (!email || !password) {
      return console.warn('Invalid credentials');
    }

    auth.login(email, password).then(function() {
      location.hash = '#/app'
    }, function() {
      console.log('Error');
    });

  }

});

module.exports = LoginViewModel;
},{"../../common/viewmodel":5,"../../services/auth":6}],15:[function(require,module,exports){
var ViewModel = require('../../common/viewmodel');
var auth = require('../../services/auth');

var RegisterViewModel = ViewModel.extend({

  register: function(firstName, lastName, email, password) {

    console.log('register in', firstName, lastName, email, password);

    if (!firstName || !lastName || !email || !password) {
      return console.warn('Invalid form');
    }

    auth.register(firstName, lastName, email, password).then(function() {
      window.App.goto('home.login');
    }, function() {
      console.log('Error');
    });

  }

});

module.exports = RegisterViewModel;
},{"../../common/viewmodel":5,"../../services/auth":6}],16:[function(require,module,exports){
var ViewModel = require('../../common/viewmodel');
var auth = require('../../services/auth');

var ResetViewModel = ViewModel.extend({

  resetPassword: function(password, confirm) {

    console.log('forgot', password, confirm);

    if (!password || !confirm || password !== confirm) {
      return console.warn('Invalid password');
    }

    auth.resetPassword(password, confirm).then(function() {
      window.App.goto('home.login');
    }, function() {
      console.log('Error');
    });

  }

});

module.exports = ResetViewModel;
},{"../../common/viewmodel":5,"../../services/auth":6}],17:[function(require,module,exports){
var View = require('../common/view');
var $ = require('jquery');

function AppView() {

  View.prototype.constructor.apply(this, arguments);

}

AppView.prototype = new View();

AppView.prototype.constructor = AppView;

AppView.prototype.bind = function() {

  var that = this;

  this.$el.on('click', '[data-link]', function() {

    var link = $(this).attr('data-link');
    location.hash = link;

  });

};

AppView.prototype.renderSubview = function(name, view) {

  View.prototype.renderSubview.call(this, name, view);

  if (view.code) {

    this.$el.find('[data-link]').removeClass('active');

    if (view.code === 'investments') {
      this.$el.addClass('investments').removeClass('accounts');
      this.$el.find('.investments').addClass('active');
    } else if (view.code === 'accounts') {
      this.$el.addClass('accounts').removeClass('investments');
      this.$el.find('.accounts').addClass('active');
    }

  }

};

module.exports = AppView;


},{"../common/view":4,"jquery":"jquery"}],18:[function(require,module,exports){
var View = require('../../../common/view');
var $ = require('jquery');

function ChartView() {

  View.prototype.constructor.apply(this, arguments);

  this.viewModel.on('prefresh', $.proxy(this.startLoading, this));

  this.viewModel.on('refresh', $.proxy(this.stopLoading, this));

}

ChartView.prototype = new View();

ChartView.prototype.constructor = ChartView;

ChartView.prototype.bind = function() {

  var that = this;

  this.$el.on('click', '.range-picker-item', function() {
    that.$el.find('.range-picker-item').removeClass('active');
    $(this).addClass('active');
  });


};

ChartView.prototype.render = function() {

  View.prototype.render.apply(this, arguments);

  this.startLoading();

};

ChartView.prototype.startLoading = function() {

  if (this.loading) return;

  this.loading = true;

  this.$el.find('.account-info').css('opacity', 0.5);

  this.$el.find('.progress').show().circleProgress({
    value: 1,
    size: 24,
    thickness: 3,
    fill: {
      color: 'rgba(255, 255, 255, 0.5)'
    }
  });

};

ChartView.prototype.stopLoading = function() {

  if (!this.loading) return;

  this.$el.find('.account-info').css('opacity', 1);

  this.$el.find('.progress').hide();

  this.loading = false;

};


module.exports = ChartView;


},{"../../../common/view":4,"jquery":"jquery"}],19:[function(require,module,exports){
var View = require('../../../common/view');
var $ = require('jquery');

function AccountsView() {

  View.prototype.constructor.apply(this, arguments);

  this.code = 'accounts';

}

AccountsView.prototype = new View();

AccountsView.prototype.constructor = AccountsView;

module.exports = AccountsView;


},{"../../../common/view":4,"jquery":"jquery"}],20:[function(require,module,exports){
var View = require('../../../common/view');
var $ = require('jquery');

function TransactionsView() {

  View.prototype.constructor.apply(this, arguments);

  this.viewModel.on('prefresh', $.proxy(this.startLoading, this));

  this.viewModel.on('refresh', $.proxy(this.stopLoading, this));

}

TransactionsView.prototype = new View();

TransactionsView.prototype.constructor = TransactionsView;


TransactionsView.prototype.render = function() {

  View.prototype.render.apply(this, arguments);

  this.startLoading();

};

TransactionsView.prototype.startLoading = function() {

  if (this.loading) return;

  this.loading = true;

  this.$el.css('opacity', 0.5);

};

TransactionsView.prototype.stopLoading = function() {

  if (!this.loading) return;

  this.$el.css('opacity', 1);

  this.loading = false;

};


module.exports = TransactionsView;


},{"../../../common/view":4,"jquery":"jquery"}],21:[function(require,module,exports){
var View = require('../../../common/view');
var $ = require('jquery');

function InvestmentsView() {

  View.prototype.constructor.apply(this, arguments);

  this.code = 'investments';

}

InvestmentsView.prototype = new View();

InvestmentsView.prototype.constructor = InvestmentsView;

module.exports = InvestmentsView;


},{"../../../common/view":4,"jquery":"jquery"}],22:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div id=\"menu\">\n\n    <div id=\"header\">\n        <h1 id=\"app-logo\" title=\"Fiscality\"></h1>\n        <div class=\"logout-button\" data-bind=\"click:logout()\"></div>\n    </div>\n\n    <ul id=\"nav\">\n        <li class=\"nav-list-item accounts active\" title=\"Accounts\" data-link=\"/app/accounts\"></li>\n        <li class=\"nav-list-item investments\" title=\"Investments\" data-link=\"/app/investments\"></li>\n        <li class=\"nav-list-item\" title=\"Spending\"></li>\n        <li class=\"nav-list-item\" title=\"Taxes\"></li>\n        <li class=\"nav-list-item\" title=\"Settings\"></li>\n    </ul>\n\n\n    <div id=\"subnav\" ui-view=\"subnav\"></div>\n\n</div>\n\n<div id=\"content\" ui-view=\"content\"></div>\n";
},"useData":true});

},{"hbsfy/runtime":41}],23:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"1":function(depth0,helpers,partials,data) {
    var stack1, alias1=this.escapeExpression;

  return "\n<div class=\"account-info\">\n    <h2>"
    + alias1(this.lambda(((stack1 = (depth0 != null ? depth0.account : depth0)) != null ? stack1.accountName : stack1), depth0))
    + "</h2>\n    <div class=\"balance\">"
    + alias1((helpers.currency || (depth0 && depth0.currency) || helpers.helperMissing).call(depth0,(depth0 != null ? depth0.balance : depth0),"$",{"name":"currency","hash":{},"data":data}))
    + "</div>\n</div>\n\n<ul class=\"range-picker\">\n    <li class=\"range-picker-item\">1W</li>\n    <li class=\"range-picker-item\">2W</li>\n    <li class=\"range-picker-item active\">1M</li>\n    <li class=\"range-picker-item\">3M</li>\n    <li class=\"range-picker-item\">1Y</li>\n    <li class=\"range-picker-item\">2Y</li>\n    <li class=\"range-picker-item\">5Y</li>\n    <li class=\"range-picker-item\">All</li>\n</ul>\n\n<div class=\"chart-settings-button\"></div>\n\n<div class=\"transaction-header\">\n    <div class=\"transaction-header-item column-left column-sm\">\n        <div class=\"reconciled-header-button\"></div>\n    </div>\n    <div class=\"transaction-header-item column-left column-md active\">Date</div>\n    <div class=\"transaction-header-item column-left column-lg\">Description</div>\n    <div class=\"transaction-header-item column-right column-md\">Balance</div>\n    <div class=\"transaction-header-item column-right column-md\">Amount</div>\n</div>\n\n<div class=\"progress\"></div>\n\n";
},"3":function(depth0,helpers,partials,data) {
    return "\n    <div class=\"no-account-label\">No Accounts</div>\n\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.accountId : depth0),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop,"data":data})) != null ? stack1 : "")
    + "\n"
    + ((stack1 = helpers.unless.call(depth0,(depth0 != null ? depth0.accountId : depth0),{"name":"unless","hash":{},"fn":this.program(3, data, 0),"inverse":this.noop,"data":data})) != null ? stack1 : "");
},"useData":true});

},{"hbsfy/runtime":41}],24:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div id=\"accounts-chart\" ui-view=\"chart\"></div>\n\n<div id=\"transactions\" ui-view=\"transactions\"></div>";
},"useData":true});

},{"hbsfy/runtime":41}],25:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"1":function(depth0,helpers,partials,data) {
    var helper, alias1=helpers.helperMissing, alias2="function", alias3=this.escapeExpression;

  return "\n    <li class=\"sub-nav-item\" data-link=\"/app/accounts/"
    + alias3(((helper = (helper = helpers.accountId || (depth0 != null ? depth0.accountId : depth0)) != null ? helper : alias1),(typeof helper === alias2 ? helper.call(depth0,{"name":"accountId","hash":{},"data":data}) : helper)))
    + "\">\n        <div class=\"sub-nav-title\">"
    + alias3(((helper = (helper = helpers.accountName || (depth0 != null ? depth0.accountName : depth0)) != null ? helper : alias1),(typeof helper === alias2 ? helper.call(depth0,{"name":"accountName","hash":{},"data":data}) : helper)))
    + "</div>\n        <div class=\"sub-nav-subtitle\">1 Minute Ago</div>\n    </li>\n\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return "<ul class=\"sub-nav\">\n\n    <li class=\"sub-nav-header\">\n        <div class=\"sub-nav-title\">Accounts</div>\n        <div class=\"sub-nav-button\"></div>\n    </li>\n\n"
    + ((stack1 = helpers.each.call(depth0,(depth0 != null ? depth0.accounts : depth0),{"name":"each","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop,"data":data})) != null ? stack1 : "")
    + "\n</ul>";
},"useData":true});

},{"hbsfy/runtime":41}],26:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"1":function(depth0,helpers,partials,data) {
    var helper, alias1=helpers.helperMissing, alias2="function", alias3=this.escapeExpression;

  return "\n<div class=\"transaction-row\" data-id=\""
    + alias3(((helper = (helper = helpers.transactionLineId || (depth0 != null ? depth0.transactionLineId : depth0)) != null ? helper : alias1),(typeof helper === alias2 ? helper.call(depth0,{"name":"transactionLineId","hash":{},"data":data}) : helper)))
    + "\">\n\n    <div class=\"column-sm column-left\">\n        <div class=\"reconciliation\"></div>\n    </div>\n\n    <div class=\"column-md column-left transaction-info\">\n        <div class=\"date\">"
    + alias3((helpers.dateFormat || (depth0 && depth0.dateFormat) || alias1).call(depth0,(depth0 != null ? depth0.transactionDate : depth0),"M/d/yyyy",{"name":"dateFormat","hash":{},"data":data}))
    + "</div>\n        <div class=\"transaction-type\">Deposit</div>\n    </div>\n\n    <div class=\"column-lg column-left description\">\n        <div class=\"description-text\">"
    + alias3(((helper = (helper = helpers.description || (depth0 != null ? depth0.description : depth0)) != null ? helper : alias1),(typeof helper === alias2 ? helper.call(depth0,{"name":"description","hash":{},"data":data}) : helper)))
    + "</div>\n        <div class=\"account-text\">"
    + alias3(((helper = (helper = helpers.accountName || (depth0 != null ? depth0.accountName : depth0)) != null ? helper : alias1),(typeof helper === alias2 ? helper.call(depth0,{"name":"accountName","hash":{},"data":data}) : helper)))
    + "</div>\n    </div>\n\n    <div class=\"column-md column-right balance\">"
    + alias3((helpers.currency || (depth0 && depth0.currency) || alias1).call(depth0,(depth0 != null ? depth0.balance : depth0),{"name":"currency","hash":{},"data":data}))
    + "</div>\n\n    <div class=\"column-md column-right amount\">"
    + alias3((helpers.currency || (depth0 && depth0.currency) || alias1).call(depth0,(depth0 != null ? depth0.amount : depth0),{"name":"currency","hash":{},"data":data}))
    + "</div>\n\n</div>\n\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers.each.call(depth0,(depth0 != null ? depth0.transactions : depth0),{"name":"each","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop,"data":data})) != null ? stack1 : "");
},"useData":true});

},{"hbsfy/runtime":41}],27:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h2 style=\"color: #F00\">My Portfolio</h2>";
},"useData":true});

},{"hbsfy/runtime":41}],28:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "";
},"useData":true});

},{"hbsfy/runtime":41}],29:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div id=\"home-layout\">\n\n    <div id=\"home-content\">\n\n        <div id=\"logo-group\">\n            <div class=\"logo\"></div>\n            <span class=\"title\">Fiscality</span>\n        </div>\n\n        <div id=\"home-form\" ui-view></div>\n\n    </div>\n\n    <footer id=\"footer\">\n\n        <nav id=\"footer-nav\">\n            <ul>\n                <li class=\"footer-nav-title\">SiteMap</li>\n                <li class=\"footer-nav-item\"><a data-link=\"/home\">Home</a></li>\n                <li class=\"footer-nav-item\"><a>About Fiscality</a></li>\n                <li class=\"footer-nav-item\"><a>Terms of Service</a></li>\n                <li class=\"footer-nav-item\"><a>Privacy Policy</a></li>\n                <li class=\"footer-nav-item\"><a>Contact Us</a></li>\n            </ul>\n        </nav>\n\n        <div id=\"footer-brand\">\n            <div class=\"logo-group\">\n                <span class=\"title\">Fiscality</span>\n                <div class=\"logo\"></div>\n            </div>\n            <div class=\"copyright\">Copyright &copy; 2015 Stack Trace LLC. All Rights Reserved.</div>\n        </div>\n\n    </footer>\n\n</div>";
},"useData":true});

},{"hbsfy/runtime":41}],30:[function(require,module,exports){
module.exports = "<div class=\"form-title\">\n    <h2 class=\"title\">Forgot Password</h2>\n    <div class=\"description\">Need help logging in? Request to reset your password here.</div>\n</div>\n\n<form data-bind=\"submit:forgotPassword(email)\">\n\n    <div class=\"form-group\">\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Enter your email</label>\n            <input class=\"text-field\" type=\"text\" placeholder=\"you@example.com\" data-model=\"email\" spellcheck=\"false\" />\n        </div>\n\n        <input class=\"field-btn submit-btn\" type=\"submit\" value=\"Reset Password\" />\n\n    </div>\n\n</form>";

},{}],31:[function(require,module,exports){
module.exports = "<div class=\"form-title\">\n    <h2 class=\"title\">Sign In</h2>\n    <div class=\"description\">Welcome back. Login to start managing your finances.</div>\n</div>\n\n<form data-bind=\"submit:login(email, password)\">\n\n    <div class=\"form-group\">\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Enter your email</label>\n            <input class=\"text-field\" type=\"email\" placeholder=\"you@example.com\" data-model=\"email\" spellcheck=\"false\" />\n        </div>\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Enter your password</label>\n            <input class=\"text-field\" type=\"password\" placeholder=\"Password\" data-model=\"password\" />\n            <a id=\"forgot-password-link\" class=\"field-subtitle\" data-link=\"/home/forgot\">Forgot your password?</a>\n        </div>\n\n        <input class=\"field-btn submit-btn\" type=\"submit\" value=\"Login\" />\n\n    </div>\n\n</form>\n\n<hr />\n\n<div id=\"register-splash\">\n    <span class=\"message\">Don’t have an account yet?</span>\n    <button class=\"field-btn btn-dark\" data-link=\"/home/register\">Register</button>\n</div>\n\n<div class=\"shadow\"></div>\n";

},{}],32:[function(require,module,exports){
module.exports = "<div class=\"form-title\">\n    <h2 class=\"title\">Join Us</h2>\n    <div class=\"description\">Start managing your finances with Fiscality</div>\n</div>\n\n<form data-bind=\"submit:register(firstName, lastName, email, password)\">\n\n    <div class=\"form-group\">\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Tell us your name</label>\n            <input class=\"text-field field-left\" type=\"text\" placeholder=\"ex. John\" data-model=\"firstName\" spellcheck=\"false\" />\n            <input class=\"text-field field-right\" type=\"text\" placeholder=\"ex. Smith\" data-model=\"lastName\" spellcheck=\"false\" />\n        </div>\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Enter your email</label>\n            <input class=\"text-field\" type=\"text\" placeholder=\"you@example.com\" data-model=\"email\" spellcheck=\"false\" />\n        </div>\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Choose a password</label>\n            <input class=\"text-field\" type=\"password\" placeholder=\"Password\" data-model=\"password\" />\n        </div>\n\n        <input class=\"field-btn submit-btn\" type=\"submit\" value=\"Get Started\" />\n\n    </div>\n\n</form>\n\n<hr />\n\n<div id=\"login-splash\">\n    <span class=\"message\">Already have an account?</span>\n    <button class=\"field-btn btn-dark\" data-link=\"/home/login\">Login Here</button>\n</div>\n\n<div class=\"shadow\"></div>";

},{}],33:[function(require,module,exports){
module.exports = "<div class=\"form-title\">\n    <h2 class=\"title\">Reset Password</h2>\n    <div class=\"description\">Reset your Fiscality password now.</div>\n</div>\n\n<form data-bind=\"submit:resetPassword(password, confirm)\">\n\n    <div class=\"form-group\">\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Enter a new password</label>\n            <input class=\"text-field\" type=\"password\" placeholder=\"Password\" data-model=\"password\" spellcheck=\"false\" />\n        </div>\n\n        <div class=\"field-group\">\n            <label class=\"field-label\">Confirm your password</label>\n            <input class=\"text-field\" type=\"password\" placeholder=\"Confirm Password\" data-model=\"confirm\" spellcheck=\"false\" />\n        </div>\n\n        <input class=\"field-btn submit-btn\" type=\"submit\" value=\"Reset Password\" />\n\n    </div>\n\n</form>";

},{}],34:[function(require,module,exports){
(function (global){
"use strict";
/*globals Handlebars: true */
var base = require("./handlebars/base");

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)
var SafeString = require("./handlebars/safe-string")["default"];
var Exception = require("./handlebars/exception")["default"];
var Utils = require("./handlebars/utils");
var runtime = require("./handlebars/runtime");

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
var create = function() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = SafeString;
  hb.Exception = Exception;
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function(spec) {
    return runtime.template(spec, hb);
  };

  return hb;
};

var Handlebars = create();
Handlebars.create = create;

/*jshint -W040 */
/* istanbul ignore next */
var root = typeof global !== 'undefined' ? global : window,
    $Handlebars = root.Handlebars;
/* istanbul ignore next */
Handlebars.noConflict = function() {
  if (root.Handlebars === Handlebars) {
    root.Handlebars = $Handlebars;
  }
};

Handlebars['default'] = Handlebars;

exports["default"] = Handlebars;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./handlebars/base":35,"./handlebars/exception":36,"./handlebars/runtime":37,"./handlebars/safe-string":38,"./handlebars/utils":39}],35:[function(require,module,exports){
"use strict";
var Utils = require("./utils");
var Exception = require("./exception")["default"];

var VERSION = "3.0.0";
exports.VERSION = VERSION;var COMPILER_REVISION = 6;
exports.COMPILER_REVISION = COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1'
};
exports.REVISION_CHANGES = REVISION_CHANGES;
var isArray = Utils.isArray,
    isFunction = Utils.isFunction,
    toString = Utils.toString,
    objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials) {
  this.helpers = helpers || {};
  this.partials = partials || {};

  registerDefaultHelpers(this);
}

exports.HandlebarsEnvironment = HandlebarsEnvironment;HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: logger,
  log: log,

  registerHelper: function(name, fn) {
    if (toString.call(name) === objectType) {
      if (fn) { throw new Exception('Arg not supported with multiple helpers'); }
      Utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function(name) {
    delete this.helpers[name];
  },

  registerPartial: function(name, partial) {
    if (toString.call(name) === objectType) {
      Utils.extend(this.partials,  name);
    } else {
      if (typeof partial === 'undefined') {
        throw new Exception('Attempting to register a partial as undefined');
      }
      this.partials[name] = partial;
    }
  },
  unregisterPartial: function(name) {
    delete this.partials[name];
  }
};

function registerDefaultHelpers(instance) {
  instance.registerHelper('helperMissing', function(/* [args, ]options */) {
    if(arguments.length === 1) {
      // A missing field in a {{foo}} constuct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new Exception("Missing helper: '" + arguments[arguments.length-1].name + "'");
    }
  });

  instance.registerHelper('blockHelperMissing', function(context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if(context === true) {
      return fn(this);
    } else if(context === false || context == null) {
      return inverse(this);
    } else if (isArray(context)) {
      if(context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = createFrame(options.data);
        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
        options = {data: data};
      }

      return fn(context, options);
    }
  });

  instance.registerHelper('each', function(context, options) {
    if (!options) {
      throw new Exception('Must pass iterator to #each');
    }

    var fn = options.fn, inverse = options.inverse;
    var i = 0, ret = "", data;

    var contextPath;
    if (options.data && options.ids) {
      contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (isFunction(context)) { context = context.call(this); }

    if (options.data) {
      data = createFrame(options.data);
    }

    function execIteration(key, i, last) {
      if (data) {
        data.key = key;
        data.index = i;
        data.first = i === 0;
        data.last  = !!last;

        if (contextPath) {
          data.contextPath = contextPath + key;
        }
      }

      ret = ret + fn(context[key], {
        data: data,
        blockParams: Utils.blockParams([context[key], key], [contextPath + key, null])
      });
    }

    if(context && typeof context === 'object') {
      if (isArray(context)) {
        for(var j = context.length; i<j; i++) {
          execIteration(i, i, i === context.length-1);
        }
      } else {
        var priorKey;

        for(var key in context) {
          if(context.hasOwnProperty(key)) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array. 
            if (priorKey) {
              execIteration(priorKey, i-1);
            }
            priorKey = key;
            i++;
          }
        }
        if (priorKey) {
          execIteration(priorKey, i-1, true);
        }
      }
    }

    if(i === 0){
      ret = inverse(this);
    }

    return ret;
  });

  instance.registerHelper('if', function(conditional, options) {
    if (isFunction(conditional)) { conditional = conditional.call(this); }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if ((!options.hash.includeZero && !conditional) || Utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function(conditional, options) {
    return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});
  });

  instance.registerHelper('with', function(context, options) {
    if (isFunction(context)) { context = context.call(this); }

    var fn = options.fn;

    if (!Utils.isEmpty(context)) {
      if (options.data && options.ids) {
        var data = createFrame(options.data);
        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
        options = {data:data};
      }

      return fn(context, options);
    } else {
      return options.inverse(this);
    }
  });

  instance.registerHelper('log', function(message, options) {
    var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
    instance.log(level, message);
  });

  instance.registerHelper('lookup', function(obj, field) {
    return obj && obj[field];
  });
}

var logger = {
  methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },

  // State enum
  DEBUG: 0,
  INFO: 1,
  WARN: 2,
  ERROR: 3,
  level: 1,

  // Can be overridden in the host environment
  log: function(level, message) {
    if (typeof console !== 'undefined' && logger.level <= level) {
      var method = logger.methodMap[level];
      (console[method] || console.log).call(console, message);
    }
  }
};
exports.logger = logger;
var log = logger.log;
exports.log = log;
var createFrame = function(object) {
  var frame = Utils.extend({}, object);
  frame._parent = object;
  return frame;
};
exports.createFrame = createFrame;
},{"./exception":36,"./utils":39}],36:[function(require,module,exports){
"use strict";

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var loc = node && node.loc,
      line,
      column;
  if (loc) {
    line = loc.start.line;
    column = loc.start.column;

    message += ' - ' + line + ':' + column;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  if (loc) {
    this.lineNumber = line;
    this.column = column;
  }
}

Exception.prototype = new Error();

exports["default"] = Exception;
},{}],37:[function(require,module,exports){
"use strict";
var Utils = require("./utils");
var Exception = require("./exception")["default"];
var COMPILER_REVISION = require("./base").COMPILER_REVISION;
var REVISION_CHANGES = require("./base").REVISION_CHANGES;
var createFrame = require("./base").createFrame;

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = COMPILER_REVISION;

  if (compilerRevision !== currentRevision) {
    if (compilerRevision < currentRevision) {
      var runtimeVersions = REVISION_CHANGES[currentRevision],
          compilerVersions = REVISION_CHANGES[compilerRevision];
      throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. "+
            "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").");
    } else {
      // Use the embedded version info since the runtime doesn't know about this revision yet
      throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. "+
            "Please update your runtime to a newer version ("+compilerInfo[1]+").");
    }
  }
}

exports.checkRevision = checkRevision;// TODO: Remove this line and break up compilePartial

function template(templateSpec, env) {
  /* istanbul ignore next */
  if (!env) {
    throw new Exception("No environment passed to template");
  }
  if (!templateSpec || !templateSpec.main) {
    throw new Exception('Unknown template object: ' + typeof templateSpec);
  }

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as psuedo-supported APIs.
  env.VM.checkRevision(templateSpec.compiler);

  var invokePartialWrapper = function(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);
    }

    partial = env.VM.resolvePartial.call(this, partial, context, options);
    var result = env.VM.invokePartial.call(this, partial, context, options);

    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, options);
    }
    if (result != null) {
      if (options.indent) {
        var lines = result.split('\n');
        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = options.indent + lines[i];
        }
        result = lines.join('\n');
      }
      return result;
    } else {
      throw new Exception("The partial " + options.name + " could not be compiled when running in runtime-only mode");
    }
  };

  // Just add water
  var container = {
    strict: function(obj, name) {
      if (!(name in obj)) {
        throw new Exception('"' + name + '" not defined in ' + obj);
      }
      return obj[name];
    },
    lookup: function(depths, name) {
      var len = depths.length;
      for (var i = 0; i < len; i++) {
        if (depths[i] && depths[i][name] != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },

    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,

    fn: function(i) {
      return templateSpec[i];
    },

    programs: [],
    program: function(i, data, declaredBlockParams, blockParams, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);
      if (data || depths || blockParams || declaredBlockParams) {
        programWrapper = program(this, i, fn, data, declaredBlockParams, blockParams, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = program(this, i, fn);
      }
      return programWrapper;
    },

    data: function(data, depth) {
      while (data && depth--) {
        data = data._parent;
      }
      return data;
    },
    merge: function(param, common) {
      var ret = param || common;

      if (param && common && (param !== common)) {
        ret = Utils.extend({}, common, param);
      }

      return ret;
    },

    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  var ret = function(context, options) {
    options = options || {};
    var data = options.data;

    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths,
        blockParams = templateSpec.useBlockParams ? [] : undefined;
    if (templateSpec.useDepths) {
      depths = options.depths ? [context].concat(options.depths) : [context];
    }

    return templateSpec.main.call(container, context, container.helpers, container.partials, data, blockParams, depths);
  };
  ret.isTop = true;

  ret._setup = function(options) {
    if (!options.partial) {
      container.helpers = container.merge(options.helpers, env.helpers);

      if (templateSpec.usePartial) {
        container.partials = container.merge(options.partials, env.partials);
      }
    } else {
      container.helpers = options.helpers;
      container.partials = options.partials;
    }
  };

  ret._child = function(i, data, blockParams, depths) {
    if (templateSpec.useBlockParams && !blockParams) {
      throw new Exception('must pass block params');
    }
    if (templateSpec.useDepths && !depths) {
      throw new Exception('must pass parent depths');
    }

    return program(container, i, templateSpec[i], data, 0, blockParams, depths);
  };
  return ret;
}

exports.template = template;function program(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  var prog = function(context, options) {
    options = options || {};

    return fn.call(container,
        context,
        container.helpers, container.partials,
        options.data || data,
        blockParams && [options.blockParams].concat(blockParams),
        depths && [context].concat(depths));
  };
  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}

exports.program = program;function resolvePartial(partial, context, options) {
  if (!partial) {
    partial = options.partials[options.name];
  } else if (!partial.call && !options.name) {
    // This is a dynamic partial that returned a string
    options.name = partial;
    partial = options.partials[partial];
  }
  return partial;
}

exports.resolvePartial = resolvePartial;function invokePartial(partial, context, options) {
  options.partial = true;

  if(partial === undefined) {
    throw new Exception("The partial " + options.name + " could not be found");
  } else if(partial instanceof Function) {
    return partial(context, options);
  }
}

exports.invokePartial = invokePartial;function noop() { return ""; }

exports.noop = noop;function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? createFrame(data) : {};
    data.root = context;
  }
  return data;
}
},{"./base":35,"./exception":36,"./utils":39}],38:[function(require,module,exports){
"use strict";
// Build out our basic SafeString type
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
  return "" + this.string;
};

exports["default"] = SafeString;
},{}],39:[function(require,module,exports){
"use strict";
/*jshint -W004 */
var escape = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#x27;",
  "`": "&#x60;"
};

var badChars = /[&<>"'`]/g;
var possible = /[&<>"'`]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj /* , ...source */) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

exports.extend = extend;var toString = Object.prototype.toString;
exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
var isFunction = function(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
/* istanbul ignore next */
if (isFunction(/x/)) {
  isFunction = function(value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
var isFunction;
exports.isFunction = isFunction;
/* istanbul ignore next */
var isArray = Array.isArray || function(value) {
  return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;
};
exports.isArray = isArray;
// Older IE versions do not directly support indexOf so we must implement our own, sadly.
function indexOf(array, value) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}

exports.indexOf = indexOf;
function escapeExpression(string) {
  // don't escape SafeStrings, since they're already safe
  if (string && string.toHTML) {
    return string.toHTML();
  } else if (string == null) {
    return "";
  } else if (!string) {
    return string + '';
  }

  // Force a string conversion as this will be done by the append regardless and
  // the regex test will do this transparently behind the scenes, causing issues if
  // an object's to string has escaped characters in it.
  string = "" + string;

  if(!possible.test(string)) { return string; }
  return string.replace(badChars, escapeChar);
}

exports.escapeExpression = escapeExpression;function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

exports.isEmpty = isEmpty;function blockParams(params, ids) {
  params.path = ids;
  return params;
}

exports.blockParams = blockParams;function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}

exports.appendContextPath = appendContextPath;
},{}],40:[function(require,module,exports){
// Create a simple path alias to allow browserify to resolve
// the runtime on a supported path.
module.exports = require('./dist/cjs/handlebars.runtime').default;

},{"./dist/cjs/handlebars.runtime":34}],41:[function(require,module,exports){
module.exports = require("handlebars/runtime")["default"];

},{"handlebars/runtime":40}]},{},[1])


//# sourceMappingURL=app.min.js.map