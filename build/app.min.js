(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var $, HandlebarsCompiler, Router, cache, router;

$ = window.jQuery = require('jquery');

require('jquery-circle-progress');

require('datejs');

Router = require('./common1/router.coffee');

cache = require('./common/cache');

HandlebarsCompiler = require('hbsfy/runtime');

router = new Router($('body'));

window.App = router;

router.register('home', {
  redirect: 'home.login',
  template: require('../templates1/home.hbs')
});

router.register('home.login', {
  template: require('../templates1/home/login.hbs'),
  viewmodel: require('./viewmodels1/home/login.coffee')
});

router.register('home.register', {
  template: require('../templates1/home/register.hbs'),
  viewmodel: require('./viewmodels1/home/register.coffee')
});

router.register('home.forgot', {
  template: require('../templates1/home/forgot.hbs'),
  viewmodel: require('./viewmodels1/home/forgot.coffee')
});

router.register('home.reset', {
  template: require('../templates1/home/reset.hbs'),
  viewmodel: require('./viewmodels1/home/reset.coffee')
});

router.register('app', {
  redirect: 'app.accounts',
  views: {
    'default': {
      template: require('../templates1/app.hbs')
    },
    'menu@default': {
      template: require('../templates1/app/menu.hbs'),
      view: require('./views1/app/menu.coffee'),
      viewmodel: require('./viewmodels1/app/menu.coffee')
    }
  }
});

router.register('app.accounts', {
  presenter: require('./presenters1/app/accounts/accounts.coffee'),
  params: ['accountId'],
  views: {
    'content': {
      template: require('../templates1/app/accounts/accounts.hbs')
    },
    'chart@content': {
      present: 'chart',
      template: require('../templates1/app/accounts/chart.hbs'),
      viewmodel: require('./viewmodels1/app/accounts/chart.coffee')
    },
    'transactions@content': {
      present: 'transactions',
      template: require('../templates1/app/accounts/transactions.hbs'),
      viewmodel: require('./viewmodels1/app/accounts/transactions.coffee')
    },
    'overlay@global': {
      present: 'overlay',
      template: require('../templates1/app/accounts/overlay.hbs'),
      view: require('./views1/app/accounts/overlay.coffee'),
      viewmodel: require('./viewmodels1/app/accounts/overlay.coffee')
    }
  }
});

router.register('app.investments', {
  redirect: 'app.investments.positions',
  presenter: require('./presenters1/app/investments/investments.coffee'),
  params: ['portfolioId'],
  views: {
    'content': {
      present: 'investments',
      template: require('../templates1/app/investments/investments.hbs'),
      viewmodel: require('./viewmodels1/app/investments/investments.coffee')
    },
    'overlay@global': {
      present: 'overlay',
      template: require('../templates1/app/investments/overlay.hbs'),
      viewmodel: require('./viewmodels1/app/investments/overlay.coffee')
    }
  }
});

router.register('app.investments.positions', {
  views: {
    'default': {
      template: require('../templates1/app/investments/positions.hbs')
    },
    'chart@default': {
      template: require('../templates1/app/investments/positions/chart.hbs'),
      viewmodel: require('./viewmodels1/app/investments/positions/chart.coffee')
    },
    'positions@default': {
      template: require('../templates1/app/investments/positions/positions.hbs'),
      viewmodel: require('./viewmodels1/app/investments/positions/positions.coffee')
    }
  }
});

console.log(router.getConfig('home'));

$(document).ready(function() {
  return router.listen();
});



},{"../templates1/app.hbs":24,"../templates1/app/accounts/accounts.hbs":25,"../templates1/app/accounts/chart.hbs":26,"../templates1/app/accounts/overlay.hbs":27,"../templates1/app/accounts/transactions.hbs":28,"../templates1/app/investments/investments.hbs":29,"../templates1/app/investments/overlay.hbs":30,"../templates1/app/investments/positions.hbs":31,"../templates1/app/investments/positions/chart.hbs":32,"../templates1/app/investments/positions/positions.hbs":33,"../templates1/app/menu.hbs":34,"../templates1/home.hbs":35,"../templates1/home/forgot.hbs":36,"../templates1/home/login.hbs":37,"../templates1/home/register.hbs":38,"../templates1/home/reset.hbs":39,"./common/cache":2,"./common1/router.coffee":5,"./presenters1/app/accounts/accounts.coffee":8,"./presenters1/app/investments/investments.coffee":9,"./viewmodels1/app/accounts/chart.coffee":10,"./viewmodels1/app/accounts/overlay.coffee":11,"./viewmodels1/app/accounts/transactions.coffee":12,"./viewmodels1/app/investments/investments.coffee":13,"./viewmodels1/app/investments/overlay.coffee":14,"./viewmodels1/app/investments/positions/chart.coffee":15,"./viewmodels1/app/investments/positions/positions.coffee":16,"./viewmodels1/app/menu.coffee":17,"./viewmodels1/home/forgot.coffee":18,"./viewmodels1/home/login.coffee":19,"./viewmodels1/home/register.coffee":20,"./viewmodels1/home/reset.coffee":21,"./views1/app/accounts/overlay.coffee":22,"./views1/app/menu.coffee":23,"datejs":"datejs","hbsfy/runtime":47,"jquery":"jquery","jquery-circle-progress":"jquery-circle-progress"}],2:[function(require,module,exports){
var cache = {};

module.exports = {

  hasPersistentItem: function(key) {

    var original = localStorage.getItem('cache:' + key);

    return !(original === null || original === undefined);

  },

  setPersistentItem: function(key, value) {

    if (value === null || value === undefined) {
      return this.clearPersistentItem(key);
    }

    var original = localStorage.getItem('cache:' + key);

    if (!original) {

      var keys = localStorage.getItem('persistentKeys');

      if (keys) {
        keys += ',' + key;
      } else {
        keys = key;
      }

      localStorage.setItem('persistentKeys', keys);

    }

    localStorage.setItem('cache:' + key, value);

  },

  getPersistentItem: function(key) {

    return localStorage.getItem('cache:' + key) || null;

  },

  clearPersistentItem: function(key) {

    var keys = localStorage.getItem('persistentKeys');

    if (keys) {

      var keysArray = keys.replace(/\s/g, '').split(',') || [];
      var finalArray = [];

      for (var i = 0; i < keysArray.length; i++) {
        if (keysArray[i] !== key) {
          finalArray.push(keysArray[i]);
        }
      }

      localStorage.setItem('persistentKeys', finalArray);

    }

    localStorage.removeItem('cache:' + key);

  },

  clearPersistentItems: function() {

    var keys = localStorage.getItem('persistentKeys');

    if (keys) {

      var keysArray = keys.replace(/\s/g, '').split(',') || [];

      for (var i = 0; i < keysArray.length; i++) {
        localStorage.removeItem('cache:' + keysArray[i]);
      }

      localStorage.removeItem('persistentKeys');

    }

  },

  hasItem: function(key) {
    return cache.hasOwnProperty(key);
  },

  setItem: function(key, value) {

    if (value === null || value === undefined) {
      return this.clearItem(key);
    }

    cache[key] = value;

  },

  getItem: function(key) {
    return cache.hasOwnProperty(key) ? cache[key] : null;
  },

  clearItem: function(key) {
    cache.hasOwnProperty(key) ? delete cache[key] : null;
  },

  clear: function() {
    cache = {};
  },

  purge: function() {
    this.clear();
    this.clearPersistentItems();
  }

};
},{}],3:[function(require,module,exports){
module.exports = {
  info: function(message) {
    return console.log('[INFO] ' + message);
  },
  debug: function(message) {
    return console.debug('[DEBUG] ' + message);
  },
  warn: function(message) {
    return console.warn('[WARN] ' + message);
  },
  error: function(message) {
    return console.error('[ERROR] ' + message);
  }
};



},{}],4:[function(require,module,exports){
var Presenter;

Presenter = (function() {
  function Presenter() {}

  Presenter.prototype.bind = function() {};

  Presenter.prototype.unbind = function() {};

  return Presenter;

})();

module.exports = Presenter;



},{}],5:[function(require,module,exports){
var Log, Router;

Log = require('./log.coffee');

Router = (function() {
  function Router($root) {
    this.$root = $root;
    this.stack = [];
    this.config = {};
    this.defaultState = null;
  }

  Router.prototype.register = function(name, conf) {
    var config, last, part, parts;
    parts = name.split('.');
    while (parts.length) {
      part = parts.shift();
      config = {};
      if (conf.template) {
        config.views = {
          'default': {
            template: conf.template
          }
        };
        if (conf.hasOwnProperty('view')) {
          config.views['default'].view = conf.view;
        }
        if (conf.hasOwnProperty('viewmodel')) {
          config.views['default'].viewmodel = conf.viewmodel;
        }
        if (conf.hasOwnProperty('redirect')) {
          config.redirect = conf.redirect;
        }
        if (conf.hasOwnProperty('params')) {
          config.params = conf.params;
        }
      } else {
        config = conf;
      }
      if (!last) {
        last = this.config;
      }
      if (!parts.length) {
        if (last.hasOwnProperty(part)) {
          Log.warn('Overriding existing route "' + name + '"');
        }
        last[part] = {
          config: config,
          children: {}
        };
      } else {
        if (!last.hasOwnProperty(part)) {
          Log.warn('Parent route not defined "' + name + '"');
        }
        last = last[part].children;
      }
    }
    return Log.info('Registering state "' + name + '"');
  };

  Router.prototype.getConfig = function(name) {
    var last, part, parts;
    parts = name.split('.');
    while (parts.length) {
      part = parts.shift();
      if (!last) {
        last = this.config;
      }
      if (!last.hasOwnProperty(part)) {
        return Log.error('State "' + name + '" not defined');
      }
      if (!parts.length) {
        return last[part].config;
      } else {
        last = last[part].children;
      }
    }
  };

  Router.prototype.replaceState = function(state) {};

  Router.prototype.goto = function(state) {};

  Router.prototype.listen = function() {
    return Log.info('Listening for hash changes');
  };

  Router.prototype.renderState = function(state) {};

  Router.prototype.destroyState = function(state) {};

  Router.prototype.renderGlobal = function(name, viewmodel) {};

  Router.prototype.destroyGlobal = function(name) {};

  return Router;

})();

module.exports = Router;



},{"./log.coffee":3}],6:[function(require,module,exports){
var $, View;

$ = require('jquery');

View = (function() {
  function View(template, viewmodel) {}

  return View;

})();

module.exports = View;



},{"jquery":"jquery"}],7:[function(require,module,exports){
var ViewModel;

ViewModel = (function() {
  function ViewModel() {
    this.loading = false;
  }

  ViewModel.prototype.update = function() {};

  ViewModel.prototype.startLoading = function() {
    return this.loading = true;
  };

  ViewModel.prototype.stopLoading = function() {
    return this.loading = false;
  };

  ViewModel.prototype.on = function(event, callback) {};

  ViewModel.prototype.detach = function(event, callback) {};

  ViewModel.prototype.fire = function(event) {};

  return ViewModel;

})();

module.exports = ViewModel;



},{}],8:[function(require,module,exports){
var AccountsPresenter, Presenter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Presenter = require('../../../common1/presenter.coffee');

AccountsPresenter = (function(superClass) {
  extend(AccountsPresenter, superClass);

  function AccountsPresenter(params, chartViewModel, transactionsViewModel, overlayViewModel) {
    this.chartViewModel = chartViewModel;
    this.transactionsViewModel = transactionsViewModel;
    this.overlayViewModel = overlayViewModel;
    this.accountId = params.accountId || null;
    if (!this.accountId) {
      this.showOverlay;
    }
  }

  AccountsPresenter.prototype.bind = function() {
    this.chartViewModel.on('choose', this.showOverlay);
    this.overlayViewModel.on('close', this.hideOverlay);
    return this.overlayViewModel.on('select', this.selectAccount);
  };

  AccountsPresenter.prototype.setAccount = function(accountId) {
    this.chartViewModel.setAccount(accountId);
    this.transactionsViewModel.setAccount(accountId);
    return this.overlayViewModel.setAccount(accountId);
  };

  AccountsPresenter.prototype.selectAccount = function(accountId) {
    this.setAccount(accountId);
    this.hideOverlay();
    return this.router.replaceState('/app/accounts/' + accountId);
  };

  AccountsPresenter.prototype.showOverlay = function() {
    return this.router.renderGlobal('accounts', this.overlayViewModel);
  };

  AccountsPresenter.prototype.hideOverlay = function() {
    return this.router.destroyGlobal('accounts');
  };

  return AccountsPresenter;

})(Presenter);



},{"../../../common1/presenter.coffee":4}],9:[function(require,module,exports){
var InvestmentsPresenter, Presenter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Presenter = require('../../../common1/presenter.coffee');

InvestmentsPresenter = (function(superClass) {
  extend(InvestmentsPresenter, superClass);

  function InvestmentsPresenter(params, investmentsViewModel, overlayViewModel) {
    this.investmentsViewModel = investmentsViewModel;
    this.overlayViewModel = overlayViewModel;
    this.portfolioId = params.portfolioId || null;
    if (!this.portfolioId) {
      this.showOverlay;
    }
  }

  InvestmentsPresenter.prototype.bind = function() {
    this.investmentsViewModel.on('choose', this.showOverlay);
    this.overlayViewModel.on('close', this.hideOverlay);
    return this.overlayViewModel.on('select', this.selectPortfolio);
  };

  InvestmentsPresenter.prototype.setPortfolio = function(portfolioId) {
    return this.investmentsViewModel.setPortfolio(portfolioId);
  };

  InvestmentsPresenter.prototype.selectPortfolio = function(portfolioId) {
    this.setPortfolio(portfolioId);
    this.hideOverlay();
    return this.router.replaceParam('portfolioId', portfolioId);
  };

  InvestmentsPresenter.prototype.showOverlay = function() {
    return this.router.renderGlobal('portfolios', this.overlayViewModel);
  };

  InvestmentsPresenter.prototype.hideOverlay = function() {
    return this.router.destroyGlobal('portfolios');
  };

  return InvestmentsPresenter;

})(Presenter);

module.exports = InvestmentsPresenter;



},{"../../../common1/presenter.coffee":4}],10:[function(require,module,exports){
var ChartViewModel;

ChartViewModel = (function() {
  function ChartViewModel(params) {
    this.selectedAccountId = params.accountId || null;
    this.account = null;
    this.range = '1M';
    this.startDate = new Date(2015, 1, 1);
    this.endDate = new Date(2015, 3, 31);
  }

  ChartViewModel.prototype.update = function() {
    this.startLoading();
    this.stopLoading();
    return this.fire('refresh');
  };

  ChartViewModel.prototype.choose = function() {
    return this.fire('choose');
  };

  ChartViewModel.prototype.setAccount = function(accountId) {
    this.selectedAccountId = accountId;
    return this.update();
  };

  ChartViewModel.prototype.setRange = function(range) {
    this.range = range;
    return this.update();
  };

  ChartViewModel.prototype.setStartDate = function(startDate) {
    this.startDate = startDate;
    return this.update();
  };

  ChartViewModel.prototype.setEndDate = function(endDate) {
    this.endDate = endDate;
    return this.update();
  };

  return ChartViewModel;

})();

module.exports = ChartViewModel;



},{}],11:[function(require,module,exports){
var OverlayViewModel;

OverlayViewModel = (function() {
  function OverlayViewModel(params) {
    this.accounts = [];
    this.selectedAccountId = params.accountId || null;
    this.update();
  }

  OverlayViewModel.prototype.update = function() {
    this.startLoading();
    this.stopLoading();
    return this.fire('refresh');
  };

  OverlayViewModel.prototype.setAccount = function(accountId) {
    this.selectedAccountId = accountId;
    return this.fire('select', accountId);
  };

  OverlayViewModel.prototype.close = function() {
    return this.fire('close');
  };

  return OverlayViewModel;

})();

module.exports = OverlayViewModel;



},{}],12:[function(require,module,exports){
var TransactionsViewModel;

TransactionsViewModel = (function() {
  function TransactionsViewModel(params) {
    this.selectedAccountId = params.accountId || null;
    this.transactions = [];
    this.keyword = null;
    this.sortColumn = 'date';
  }

  TransactionsViewModel.prototype.update = function() {
    this.startLoading();
    this.stopLoading();
    return this.fire('refresh');
  };

  TransactionsViewModel.prototype.sortBy = function(column) {
    this.sortColumn = column;
    return this.update();
  };

  TransactionsViewModel.prototype.setKeyword = function(keyword) {
    this.keyword = keyword;
    return this.update();
  };

  TransactionsViewModel.prototype.setAccount = function(accountId) {
    this.selectedAccountId = accountId;
    return this.update();
  };

  return TransactionsViewModel;

})();

module.exports = TransactionsViewModel;



},{}],13:[function(require,module,exports){
var InvestmentsViewModel, ViewModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewModel = require('../../../common1/viewmodel.coffee');

InvestmentsViewModel = (function(superClass) {
  extend(InvestmentsViewModel, superClass);

  function InvestmentsViewModel(params) {
    this.portfolioId = params.portfolioId || null;
    this.portfolio = null;
  }

  InvestmentsViewModel.prototype.update = function() {
    this.startLoading();
    this.stopLoading();
    return this.fire('refresh');
  };

  InvestmentsViewModel.prototype.setPortfolio = function(portfolioId) {
    this.portfolioId = portfolioId;
    return this.update();
  };

  InvestmentsViewModel.prototype.setState = function(state) {
    return this.router.goto('app.investments.' + state, {
      portfolioId: this.portfolioId
    });
  };

  return InvestmentsViewModel;

})(ViewModel);

module.exports = InvestmentsViewModel;



},{"../../../common1/viewmodel.coffee":7}],14:[function(require,module,exports){




},{}],15:[function(require,module,exports){




},{}],16:[function(require,module,exports){




},{}],17:[function(require,module,exports){
var MenuViewModel;

MenuViewModel = (function() {
  function MenuViewModel(params) {
    this.state = params.state || 'accounts';
    this.fire('refresh');
  }

  MenuViewModel.prototype.setState = function(state) {
    if (this.state === state) {
      return;
    }
    this.state = state;
    this.router.goto('/' + state);
    return this.fire('refresh');
  };

  MenuViewModel.prototype.logout = function() {
    return this.router.goto('/home/login');
  };

  return MenuViewModel;

})();

module.exports = MenuViewModel;



},{}],18:[function(require,module,exports){




},{}],19:[function(require,module,exports){




},{}],20:[function(require,module,exports){




},{}],21:[function(require,module,exports){




},{}],22:[function(require,module,exports){
var $, OverlayView, View,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

View = require('../../../common1/view.coffee');

$ = require('jquery');

OverlayView = (function(superClass) {
  extend(OverlayView, superClass);

  function OverlayView() {
    return OverlayView.__super__.constructor.apply(this, arguments);
  }

  OverlayView.prototype.bindings = {
    '.account-item': {
      'click': 'onSelect'
    }
  };

  OverlayView.prototype.onSelect = function(e) {
    var accountId;
    accountId = $(e.currentTarget).attr('data-key');
    return this.viewModel.setAccount(accountId);
  };

  return OverlayView;

})(View);

module.exports = OverlayView;



},{"../../../common1/view.coffee":6,"jquery":"jquery"}],23:[function(require,module,exports){
var $, MenuView;

$ = require('jquery');

MenuView = (function() {
  function MenuView() {}

  MenuView.prototype.bindings = {
    '.menu-item': {
      'click': 'onSelect'
    },
    '.settings-button': {
      'click': 'onSettings'
    },
    '.logout-btn': {
      'click': 'onLogout'
    }
  };

  MenuView.prototype.onSelect = function(e) {
    var key;
    key = $(e.currentTarget).attr('data-key');
    return this.viewModel.setState(key);
  };

  MenuView.prototype.onSettings = function() {
    return this.viewModel.setState('settings');
  };

  MenuView.prototype.onLogout = function() {
    return this.viewModel.logout();
  };

  return MenuView;

})();

module.exports = MenuView;



},{"jquery":"jquery"}],24:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div id=\"menu\" ui-view=\"menu\"></div>\n\n<div id=\"content\" ui-view=\"content\"></div>";
},"useData":true});

},{"hbsfy/runtime":47}],25:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div id=\"chart\" ui-view=\"chart\"></div>\n\n<div id=\"transactions\" ui-view=\"transactions\"></div>";
},"useData":true});

},{"hbsfy/runtime":47}],26:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h1>Chart</h1>";
},"useData":true});

},{"hbsfy/runtime":47}],27:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div id=\"accounts-overlay\"></div>";
},"useData":true});

},{"hbsfy/runtime":47}],28:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h1>Transactions</h1>";
},"useData":true});

},{"hbsfy/runtime":47}],29:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<header>\n\n    <h1>Portfolio Name</h1>\n\n    <ul>\n        <li>Positions</li>\n        <li>Activity</li>\n        <li>Realized</li>\n        <li>Allocation</li>\n    </ul>\n\n</header>\n\n<div ui-view=\"investments\"></div>";
},"useData":true});

},{"hbsfy/runtime":47}],30:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h1>Accounts</h1>";
},"useData":true});

},{"hbsfy/runtime":47}],31:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h2>Positions</h2>\n\n<div ui-view=\"chart\"></div>\n\n<div ui-view=\"positions\"></div>";
},"useData":true});

},{"hbsfy/runtime":47}],32:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h3>Chart</h3>";
},"useData":true});

},{"hbsfy/runtime":47}],33:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h3>Positions List</h3>";
},"useData":true});

},{"hbsfy/runtime":47}],34:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<h1>Fiscality</h1>";
},"useData":true});

},{"hbsfy/runtime":47}],35:[function(require,module,exports){
arguments[4][34][0].apply(exports,arguments)
},{"dup":34,"hbsfy/runtime":47}],36:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "";
},"useData":true});

},{"hbsfy/runtime":47}],37:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"dup":36,"hbsfy/runtime":47}],38:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"dup":36,"hbsfy/runtime":47}],39:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"dup":36,"hbsfy/runtime":47}],40:[function(require,module,exports){
(function (global){
"use strict";
/*globals Handlebars: true */
var base = require("./handlebars/base");

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)
var SafeString = require("./handlebars/safe-string")["default"];
var Exception = require("./handlebars/exception")["default"];
var Utils = require("./handlebars/utils");
var runtime = require("./handlebars/runtime");

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
var create = function() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = SafeString;
  hb.Exception = Exception;
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function(spec) {
    return runtime.template(spec, hb);
  };

  return hb;
};

var Handlebars = create();
Handlebars.create = create;

/*jshint -W040 */
/* istanbul ignore next */
var root = typeof global !== 'undefined' ? global : window,
    $Handlebars = root.Handlebars;
/* istanbul ignore next */
Handlebars.noConflict = function() {
  if (root.Handlebars === Handlebars) {
    root.Handlebars = $Handlebars;
  }
};

Handlebars['default'] = Handlebars;

exports["default"] = Handlebars;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./handlebars/base":41,"./handlebars/exception":42,"./handlebars/runtime":43,"./handlebars/safe-string":44,"./handlebars/utils":45}],41:[function(require,module,exports){
"use strict";
var Utils = require("./utils");
var Exception = require("./exception")["default"];

var VERSION = "3.0.0";
exports.VERSION = VERSION;var COMPILER_REVISION = 6;
exports.COMPILER_REVISION = COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1'
};
exports.REVISION_CHANGES = REVISION_CHANGES;
var isArray = Utils.isArray,
    isFunction = Utils.isFunction,
    toString = Utils.toString,
    objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials) {
  this.helpers = helpers || {};
  this.partials = partials || {};

  registerDefaultHelpers(this);
}

exports.HandlebarsEnvironment = HandlebarsEnvironment;HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: logger,
  log: log,

  registerHelper: function(name, fn) {
    if (toString.call(name) === objectType) {
      if (fn) { throw new Exception('Arg not supported with multiple helpers'); }
      Utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function(name) {
    delete this.helpers[name];
  },

  registerPartial: function(name, partial) {
    if (toString.call(name) === objectType) {
      Utils.extend(this.partials,  name);
    } else {
      if (typeof partial === 'undefined') {
        throw new Exception('Attempting to register a partial as undefined');
      }
      this.partials[name] = partial;
    }
  },
  unregisterPartial: function(name) {
    delete this.partials[name];
  }
};

function registerDefaultHelpers(instance) {
  instance.registerHelper('helperMissing', function(/* [args, ]options */) {
    if(arguments.length === 1) {
      // A missing field in a {{foo}} constuct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new Exception("Missing helper: '" + arguments[arguments.length-1].name + "'");
    }
  });

  instance.registerHelper('blockHelperMissing', function(context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if(context === true) {
      return fn(this);
    } else if(context === false || context == null) {
      return inverse(this);
    } else if (isArray(context)) {
      if(context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = createFrame(options.data);
        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
        options = {data: data};
      }

      return fn(context, options);
    }
  });

  instance.registerHelper('each', function(context, options) {
    if (!options) {
      throw new Exception('Must pass iterator to #each');
    }

    var fn = options.fn, inverse = options.inverse;
    var i = 0, ret = "", data;

    var contextPath;
    if (options.data && options.ids) {
      contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (isFunction(context)) { context = context.call(this); }

    if (options.data) {
      data = createFrame(options.data);
    }

    function execIteration(key, i, last) {
      if (data) {
        data.key = key;
        data.index = i;
        data.first = i === 0;
        data.last  = !!last;

        if (contextPath) {
          data.contextPath = contextPath + key;
        }
      }

      ret = ret + fn(context[key], {
        data: data,
        blockParams: Utils.blockParams([context[key], key], [contextPath + key, null])
      });
    }

    if(context && typeof context === 'object') {
      if (isArray(context)) {
        for(var j = context.length; i<j; i++) {
          execIteration(i, i, i === context.length-1);
        }
      } else {
        var priorKey;

        for(var key in context) {
          if(context.hasOwnProperty(key)) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array. 
            if (priorKey) {
              execIteration(priorKey, i-1);
            }
            priorKey = key;
            i++;
          }
        }
        if (priorKey) {
          execIteration(priorKey, i-1, true);
        }
      }
    }

    if(i === 0){
      ret = inverse(this);
    }

    return ret;
  });

  instance.registerHelper('if', function(conditional, options) {
    if (isFunction(conditional)) { conditional = conditional.call(this); }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if ((!options.hash.includeZero && !conditional) || Utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function(conditional, options) {
    return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});
  });

  instance.registerHelper('with', function(context, options) {
    if (isFunction(context)) { context = context.call(this); }

    var fn = options.fn;

    if (!Utils.isEmpty(context)) {
      if (options.data && options.ids) {
        var data = createFrame(options.data);
        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
        options = {data:data};
      }

      return fn(context, options);
    } else {
      return options.inverse(this);
    }
  });

  instance.registerHelper('log', function(message, options) {
    var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
    instance.log(level, message);
  });

  instance.registerHelper('lookup', function(obj, field) {
    return obj && obj[field];
  });
}

var logger = {
  methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },

  // State enum
  DEBUG: 0,
  INFO: 1,
  WARN: 2,
  ERROR: 3,
  level: 1,

  // Can be overridden in the host environment
  log: function(level, message) {
    if (typeof console !== 'undefined' && logger.level <= level) {
      var method = logger.methodMap[level];
      (console[method] || console.log).call(console, message);
    }
  }
};
exports.logger = logger;
var log = logger.log;
exports.log = log;
var createFrame = function(object) {
  var frame = Utils.extend({}, object);
  frame._parent = object;
  return frame;
};
exports.createFrame = createFrame;
},{"./exception":42,"./utils":45}],42:[function(require,module,exports){
"use strict";

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var loc = node && node.loc,
      line,
      column;
  if (loc) {
    line = loc.start.line;
    column = loc.start.column;

    message += ' - ' + line + ':' + column;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  if (loc) {
    this.lineNumber = line;
    this.column = column;
  }
}

Exception.prototype = new Error();

exports["default"] = Exception;
},{}],43:[function(require,module,exports){
"use strict";
var Utils = require("./utils");
var Exception = require("./exception")["default"];
var COMPILER_REVISION = require("./base").COMPILER_REVISION;
var REVISION_CHANGES = require("./base").REVISION_CHANGES;
var createFrame = require("./base").createFrame;

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = COMPILER_REVISION;

  if (compilerRevision !== currentRevision) {
    if (compilerRevision < currentRevision) {
      var runtimeVersions = REVISION_CHANGES[currentRevision],
          compilerVersions = REVISION_CHANGES[compilerRevision];
      throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. "+
            "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").");
    } else {
      // Use the embedded version info since the runtime doesn't know about this revision yet
      throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. "+
            "Please update your runtime to a newer version ("+compilerInfo[1]+").");
    }
  }
}

exports.checkRevision = checkRevision;// TODO: Remove this line and break up compilePartial

function template(templateSpec, env) {
  /* istanbul ignore next */
  if (!env) {
    throw new Exception("No environment passed to template");
  }
  if (!templateSpec || !templateSpec.main) {
    throw new Exception('Unknown template object: ' + typeof templateSpec);
  }

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as psuedo-supported APIs.
  env.VM.checkRevision(templateSpec.compiler);

  var invokePartialWrapper = function(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);
    }

    partial = env.VM.resolvePartial.call(this, partial, context, options);
    var result = env.VM.invokePartial.call(this, partial, context, options);

    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, options);
    }
    if (result != null) {
      if (options.indent) {
        var lines = result.split('\n');
        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = options.indent + lines[i];
        }
        result = lines.join('\n');
      }
      return result;
    } else {
      throw new Exception("The partial " + options.name + " could not be compiled when running in runtime-only mode");
    }
  };

  // Just add water
  var container = {
    strict: function(obj, name) {
      if (!(name in obj)) {
        throw new Exception('"' + name + '" not defined in ' + obj);
      }
      return obj[name];
    },
    lookup: function(depths, name) {
      var len = depths.length;
      for (var i = 0; i < len; i++) {
        if (depths[i] && depths[i][name] != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },

    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,

    fn: function(i) {
      return templateSpec[i];
    },

    programs: [],
    program: function(i, data, declaredBlockParams, blockParams, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);
      if (data || depths || blockParams || declaredBlockParams) {
        programWrapper = program(this, i, fn, data, declaredBlockParams, blockParams, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = program(this, i, fn);
      }
      return programWrapper;
    },

    data: function(data, depth) {
      while (data && depth--) {
        data = data._parent;
      }
      return data;
    },
    merge: function(param, common) {
      var ret = param || common;

      if (param && common && (param !== common)) {
        ret = Utils.extend({}, common, param);
      }

      return ret;
    },

    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  var ret = function(context, options) {
    options = options || {};
    var data = options.data;

    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths,
        blockParams = templateSpec.useBlockParams ? [] : undefined;
    if (templateSpec.useDepths) {
      depths = options.depths ? [context].concat(options.depths) : [context];
    }

    return templateSpec.main.call(container, context, container.helpers, container.partials, data, blockParams, depths);
  };
  ret.isTop = true;

  ret._setup = function(options) {
    if (!options.partial) {
      container.helpers = container.merge(options.helpers, env.helpers);

      if (templateSpec.usePartial) {
        container.partials = container.merge(options.partials, env.partials);
      }
    } else {
      container.helpers = options.helpers;
      container.partials = options.partials;
    }
  };

  ret._child = function(i, data, blockParams, depths) {
    if (templateSpec.useBlockParams && !blockParams) {
      throw new Exception('must pass block params');
    }
    if (templateSpec.useDepths && !depths) {
      throw new Exception('must pass parent depths');
    }

    return program(container, i, templateSpec[i], data, 0, blockParams, depths);
  };
  return ret;
}

exports.template = template;function program(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  var prog = function(context, options) {
    options = options || {};

    return fn.call(container,
        context,
        container.helpers, container.partials,
        options.data || data,
        blockParams && [options.blockParams].concat(blockParams),
        depths && [context].concat(depths));
  };
  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}

exports.program = program;function resolvePartial(partial, context, options) {
  if (!partial) {
    partial = options.partials[options.name];
  } else if (!partial.call && !options.name) {
    // This is a dynamic partial that returned a string
    options.name = partial;
    partial = options.partials[partial];
  }
  return partial;
}

exports.resolvePartial = resolvePartial;function invokePartial(partial, context, options) {
  options.partial = true;

  if(partial === undefined) {
    throw new Exception("The partial " + options.name + " could not be found");
  } else if(partial instanceof Function) {
    return partial(context, options);
  }
}

exports.invokePartial = invokePartial;function noop() { return ""; }

exports.noop = noop;function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? createFrame(data) : {};
    data.root = context;
  }
  return data;
}
},{"./base":41,"./exception":42,"./utils":45}],44:[function(require,module,exports){
"use strict";
// Build out our basic SafeString type
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
  return "" + this.string;
};

exports["default"] = SafeString;
},{}],45:[function(require,module,exports){
"use strict";
/*jshint -W004 */
var escape = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#x27;",
  "`": "&#x60;"
};

var badChars = /[&<>"'`]/g;
var possible = /[&<>"'`]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj /* , ...source */) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

exports.extend = extend;var toString = Object.prototype.toString;
exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
var isFunction = function(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
/* istanbul ignore next */
if (isFunction(/x/)) {
  isFunction = function(value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
var isFunction;
exports.isFunction = isFunction;
/* istanbul ignore next */
var isArray = Array.isArray || function(value) {
  return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;
};
exports.isArray = isArray;
// Older IE versions do not directly support indexOf so we must implement our own, sadly.
function indexOf(array, value) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}

exports.indexOf = indexOf;
function escapeExpression(string) {
  // don't escape SafeStrings, since they're already safe
  if (string && string.toHTML) {
    return string.toHTML();
  } else if (string == null) {
    return "";
  } else if (!string) {
    return string + '';
  }

  // Force a string conversion as this will be done by the append regardless and
  // the regex test will do this transparently behind the scenes, causing issues if
  // an object's to string has escaped characters in it.
  string = "" + string;

  if(!possible.test(string)) { return string; }
  return string.replace(badChars, escapeChar);
}

exports.escapeExpression = escapeExpression;function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

exports.isEmpty = isEmpty;function blockParams(params, ids) {
  params.path = ids;
  return params;
}

exports.blockParams = blockParams;function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}

exports.appendContextPath = appendContextPath;
},{}],46:[function(require,module,exports){
// Create a simple path alias to allow browserify to resolve
// the runtime on a supported path.
module.exports = require('./dist/cjs/handlebars.runtime').default;

},{"./dist/cjs/handlebars.runtime":40}],47:[function(require,module,exports){
module.exports = require("handlebars/runtime")["default"];

},{"handlebars/runtime":46}]},{},[1])


//# sourceMappingURL=app.min.js.map